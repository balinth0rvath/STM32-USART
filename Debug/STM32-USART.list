
STM32-USART.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000409c  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000290  080041b0  080041b0  000141b0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004440  08004440  000201e4  2**0
                  CONTENTS
  4 .ARM          00000000  08004440  08004440  000201e4  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004440  08004440  000201e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004440  08004440  00014440  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004444  08004444  00014444  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e4  20000000  08004448  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000084  200001e4  0800462c  000201e4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000268  0800462c  00020268  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201e4  2**0
                  CONTENTS, READONLY
 12 .debug_info   000054a8  00000000  00000000  0002020d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000121e  00000000  00000000  000256b5  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000005e0  00000000  00000000  000268d8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000538  00000000  00000000  00026eb8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001603c  00000000  00000000  000273f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00005005  00000000  00000000  0003d42c  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0007fa47  00000000  00000000  00042431  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000c1e78  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002068  00000000  00000000  000c1ef4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001e4 	.word	0x200001e4
 800012c:	00000000 	.word	0x00000000
 8000130:	08004194 	.word	0x08004194

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001e8 	.word	0x200001e8
 800014c:	08004194 	.word	0x08004194

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800029e:	f1a4 0401 	sub.w	r4, r4, #1
 80002a2:	d1e9      	bne.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000a88:	b598      	push	{r3, r4, r7, lr}
 8000a8a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000a8c:	f000 fa18 	bl	8000ec0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000a90:	f000 f832 	bl	8000af8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000a94:	f000 f89c 	bl	8000bd0 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000a98:	f000 f870 	bl	8000b7c <MX_USART2_UART_Init>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

    sprintf(msg, "%f\r\n", value );
 8000a9c:	4b12      	ldr	r3, [pc, #72]	; (8000ae8 <main+0x60>)
 8000a9e:	cb18      	ldmia	r3, {r3, r4}
 8000aa0:	461a      	mov	r2, r3
 8000aa2:	4623      	mov	r3, r4
 8000aa4:	4911      	ldr	r1, [pc, #68]	; (8000aec <main+0x64>)
 8000aa6:	4812      	ldr	r0, [pc, #72]	; (8000af0 <main+0x68>)
 8000aa8:	f001 ff86 	bl	80029b8 <siprintf>
    HAL_UART_Transmit(&huart2, msg, 10, 100);
 8000aac:	2364      	movs	r3, #100	; 0x64
 8000aae:	220a      	movs	r2, #10
 8000ab0:	490f      	ldr	r1, [pc, #60]	; (8000af0 <main+0x68>)
 8000ab2:	4810      	ldr	r0, [pc, #64]	; (8000af4 <main+0x6c>)
 8000ab4:	f001 f993 	bl	8001dde <HAL_UART_Transmit>
    HAL_Delay(200);
 8000ab8:	20c8      	movs	r0, #200	; 0xc8
 8000aba:	f000 fa63 	bl	8000f84 <HAL_Delay>
    value += 0.01;
 8000abe:	4b0a      	ldr	r3, [pc, #40]	; (8000ae8 <main+0x60>)
 8000ac0:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000ac4:	a306      	add	r3, pc, #24	; (adr r3, 8000ae0 <main+0x58>)
 8000ac6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000aca:	f7ff fb4f 	bl	800016c <__adddf3>
 8000ace:	4603      	mov	r3, r0
 8000ad0:	460c      	mov	r4, r1
 8000ad2:	4a05      	ldr	r2, [pc, #20]	; (8000ae8 <main+0x60>)
 8000ad4:	e9c2 3400 	strd	r3, r4, [r2]
  {
 8000ad8:	e7e0      	b.n	8000a9c <main+0x14>
 8000ada:	bf00      	nop
 8000adc:	f3af 8000 	nop.w
 8000ae0:	47ae147b 	.word	0x47ae147b
 8000ae4:	3f847ae1 	.word	0x3f847ae1
 8000ae8:	20000000 	.word	0x20000000
 8000aec:	080041b0 	.word	0x080041b0
 8000af0:	20000200 	.word	0x20000200
 8000af4:	20000220 	.word	0x20000220

08000af8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000af8:	b580      	push	{r7, lr}
 8000afa:	b090      	sub	sp, #64	; 0x40
 8000afc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000afe:	f107 0318 	add.w	r3, r7, #24
 8000b02:	2228      	movs	r2, #40	; 0x28
 8000b04:	2100      	movs	r1, #0
 8000b06:	4618      	mov	r0, r3
 8000b08:	f001 fafe 	bl	8002108 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b0c:	1d3b      	adds	r3, r7, #4
 8000b0e:	2200      	movs	r2, #0
 8000b10:	601a      	str	r2, [r3, #0]
 8000b12:	605a      	str	r2, [r3, #4]
 8000b14:	609a      	str	r2, [r3, #8]
 8000b16:	60da      	str	r2, [r3, #12]
 8000b18:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000b1a:	2302      	movs	r3, #2
 8000b1c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000b1e:	2301      	movs	r3, #1
 8000b20:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000b22:	2310      	movs	r3, #16
 8000b24:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000b26:	2302      	movs	r3, #2
 8000b28:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 8000b2a:	2300      	movs	r3, #0
 8000b2c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8000b2e:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 8000b32:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b34:	f107 0318 	add.w	r3, r7, #24
 8000b38:	4618      	mov	r0, r3
 8000b3a:	f000 fce7 	bl	800150c <HAL_RCC_OscConfig>
 8000b3e:	4603      	mov	r3, r0
 8000b40:	2b00      	cmp	r3, #0
 8000b42:	d001      	beq.n	8000b48 <SystemClock_Config+0x50>
  {
    Error_Handler();
 8000b44:	f000 f8b2 	bl	8000cac <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b48:	230f      	movs	r3, #15
 8000b4a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000b4c:	2302      	movs	r3, #2
 8000b4e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b50:	2300      	movs	r3, #0
 8000b52:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000b54:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000b58:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000b5a:	2300      	movs	r3, #0
 8000b5c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000b5e:	1d3b      	adds	r3, r7, #4
 8000b60:	2102      	movs	r1, #2
 8000b62:	4618      	mov	r0, r3
 8000b64:	f000 ff52 	bl	8001a0c <HAL_RCC_ClockConfig>
 8000b68:	4603      	mov	r3, r0
 8000b6a:	2b00      	cmp	r3, #0
 8000b6c:	d001      	beq.n	8000b72 <SystemClock_Config+0x7a>
  {
    Error_Handler();
 8000b6e:	f000 f89d 	bl	8000cac <Error_Handler>
  }
}
 8000b72:	bf00      	nop
 8000b74:	3740      	adds	r7, #64	; 0x40
 8000b76:	46bd      	mov	sp, r7
 8000b78:	bd80      	pop	{r7, pc}
	...

08000b7c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000b7c:	b580      	push	{r7, lr}
 8000b7e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000b80:	4b11      	ldr	r3, [pc, #68]	; (8000bc8 <MX_USART2_UART_Init+0x4c>)
 8000b82:	4a12      	ldr	r2, [pc, #72]	; (8000bcc <MX_USART2_UART_Init+0x50>)
 8000b84:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000b86:	4b10      	ldr	r3, [pc, #64]	; (8000bc8 <MX_USART2_UART_Init+0x4c>)
 8000b88:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000b8c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000b8e:	4b0e      	ldr	r3, [pc, #56]	; (8000bc8 <MX_USART2_UART_Init+0x4c>)
 8000b90:	2200      	movs	r2, #0
 8000b92:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000b94:	4b0c      	ldr	r3, [pc, #48]	; (8000bc8 <MX_USART2_UART_Init+0x4c>)
 8000b96:	2200      	movs	r2, #0
 8000b98:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000b9a:	4b0b      	ldr	r3, [pc, #44]	; (8000bc8 <MX_USART2_UART_Init+0x4c>)
 8000b9c:	2200      	movs	r2, #0
 8000b9e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000ba0:	4b09      	ldr	r3, [pc, #36]	; (8000bc8 <MX_USART2_UART_Init+0x4c>)
 8000ba2:	220c      	movs	r2, #12
 8000ba4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000ba6:	4b08      	ldr	r3, [pc, #32]	; (8000bc8 <MX_USART2_UART_Init+0x4c>)
 8000ba8:	2200      	movs	r2, #0
 8000baa:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000bac:	4b06      	ldr	r3, [pc, #24]	; (8000bc8 <MX_USART2_UART_Init+0x4c>)
 8000bae:	2200      	movs	r2, #0
 8000bb0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000bb2:	4805      	ldr	r0, [pc, #20]	; (8000bc8 <MX_USART2_UART_Init+0x4c>)
 8000bb4:	f001 f8c6 	bl	8001d44 <HAL_UART_Init>
 8000bb8:	4603      	mov	r3, r0
 8000bba:	2b00      	cmp	r3, #0
 8000bbc:	d001      	beq.n	8000bc2 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000bbe:	f000 f875 	bl	8000cac <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000bc2:	bf00      	nop
 8000bc4:	bd80      	pop	{r7, pc}
 8000bc6:	bf00      	nop
 8000bc8:	20000220 	.word	0x20000220
 8000bcc:	40004400 	.word	0x40004400

08000bd0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000bd0:	b580      	push	{r7, lr}
 8000bd2:	b088      	sub	sp, #32
 8000bd4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bd6:	f107 0310 	add.w	r3, r7, #16
 8000bda:	2200      	movs	r2, #0
 8000bdc:	601a      	str	r2, [r3, #0]
 8000bde:	605a      	str	r2, [r3, #4]
 8000be0:	609a      	str	r2, [r3, #8]
 8000be2:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000be4:	4b2d      	ldr	r3, [pc, #180]	; (8000c9c <MX_GPIO_Init+0xcc>)
 8000be6:	699b      	ldr	r3, [r3, #24]
 8000be8:	4a2c      	ldr	r2, [pc, #176]	; (8000c9c <MX_GPIO_Init+0xcc>)
 8000bea:	f043 0310 	orr.w	r3, r3, #16
 8000bee:	6193      	str	r3, [r2, #24]
 8000bf0:	4b2a      	ldr	r3, [pc, #168]	; (8000c9c <MX_GPIO_Init+0xcc>)
 8000bf2:	699b      	ldr	r3, [r3, #24]
 8000bf4:	f003 0310 	and.w	r3, r3, #16
 8000bf8:	60fb      	str	r3, [r7, #12]
 8000bfa:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000bfc:	4b27      	ldr	r3, [pc, #156]	; (8000c9c <MX_GPIO_Init+0xcc>)
 8000bfe:	699b      	ldr	r3, [r3, #24]
 8000c00:	4a26      	ldr	r2, [pc, #152]	; (8000c9c <MX_GPIO_Init+0xcc>)
 8000c02:	f043 0320 	orr.w	r3, r3, #32
 8000c06:	6193      	str	r3, [r2, #24]
 8000c08:	4b24      	ldr	r3, [pc, #144]	; (8000c9c <MX_GPIO_Init+0xcc>)
 8000c0a:	699b      	ldr	r3, [r3, #24]
 8000c0c:	f003 0320 	and.w	r3, r3, #32
 8000c10:	60bb      	str	r3, [r7, #8]
 8000c12:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c14:	4b21      	ldr	r3, [pc, #132]	; (8000c9c <MX_GPIO_Init+0xcc>)
 8000c16:	699b      	ldr	r3, [r3, #24]
 8000c18:	4a20      	ldr	r2, [pc, #128]	; (8000c9c <MX_GPIO_Init+0xcc>)
 8000c1a:	f043 0304 	orr.w	r3, r3, #4
 8000c1e:	6193      	str	r3, [r2, #24]
 8000c20:	4b1e      	ldr	r3, [pc, #120]	; (8000c9c <MX_GPIO_Init+0xcc>)
 8000c22:	699b      	ldr	r3, [r3, #24]
 8000c24:	f003 0304 	and.w	r3, r3, #4
 8000c28:	607b      	str	r3, [r7, #4]
 8000c2a:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c2c:	4b1b      	ldr	r3, [pc, #108]	; (8000c9c <MX_GPIO_Init+0xcc>)
 8000c2e:	699b      	ldr	r3, [r3, #24]
 8000c30:	4a1a      	ldr	r2, [pc, #104]	; (8000c9c <MX_GPIO_Init+0xcc>)
 8000c32:	f043 0308 	orr.w	r3, r3, #8
 8000c36:	6193      	str	r3, [r2, #24]
 8000c38:	4b18      	ldr	r3, [pc, #96]	; (8000c9c <MX_GPIO_Init+0xcc>)
 8000c3a:	699b      	ldr	r3, [r3, #24]
 8000c3c:	f003 0308 	and.w	r3, r3, #8
 8000c40:	603b      	str	r3, [r7, #0]
 8000c42:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000c44:	2200      	movs	r2, #0
 8000c46:	2120      	movs	r1, #32
 8000c48:	4815      	ldr	r0, [pc, #84]	; (8000ca0 <MX_GPIO_Init+0xd0>)
 8000c4a:	f000 fc25 	bl	8001498 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000c4e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000c52:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000c54:	4b13      	ldr	r3, [pc, #76]	; (8000ca4 <MX_GPIO_Init+0xd4>)
 8000c56:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c58:	2300      	movs	r3, #0
 8000c5a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000c5c:	f107 0310 	add.w	r3, r7, #16
 8000c60:	4619      	mov	r1, r3
 8000c62:	4811      	ldr	r0, [pc, #68]	; (8000ca8 <MX_GPIO_Init+0xd8>)
 8000c64:	f000 fabe 	bl	80011e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000c68:	2320      	movs	r3, #32
 8000c6a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c6c:	2301      	movs	r3, #1
 8000c6e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c70:	2300      	movs	r3, #0
 8000c72:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c74:	2302      	movs	r3, #2
 8000c76:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000c78:	f107 0310 	add.w	r3, r7, #16
 8000c7c:	4619      	mov	r1, r3
 8000c7e:	4808      	ldr	r0, [pc, #32]	; (8000ca0 <MX_GPIO_Init+0xd0>)
 8000c80:	f000 fab0 	bl	80011e4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000c84:	2200      	movs	r2, #0
 8000c86:	2100      	movs	r1, #0
 8000c88:	2028      	movs	r0, #40	; 0x28
 8000c8a:	f000 fa74 	bl	8001176 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000c8e:	2028      	movs	r0, #40	; 0x28
 8000c90:	f000 fa8d 	bl	80011ae <HAL_NVIC_EnableIRQ>

}
 8000c94:	bf00      	nop
 8000c96:	3720      	adds	r7, #32
 8000c98:	46bd      	mov	sp, r7
 8000c9a:	bd80      	pop	{r7, pc}
 8000c9c:	40021000 	.word	0x40021000
 8000ca0:	40010800 	.word	0x40010800
 8000ca4:	10110000 	.word	0x10110000
 8000ca8:	40011000 	.word	0x40011000

08000cac <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000cac:	b480      	push	{r7}
 8000cae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000cb0:	bf00      	nop
 8000cb2:	46bd      	mov	sp, r7
 8000cb4:	bc80      	pop	{r7}
 8000cb6:	4770      	bx	lr

08000cb8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000cb8:	b480      	push	{r7}
 8000cba:	b085      	sub	sp, #20
 8000cbc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000cbe:	4b15      	ldr	r3, [pc, #84]	; (8000d14 <HAL_MspInit+0x5c>)
 8000cc0:	699b      	ldr	r3, [r3, #24]
 8000cc2:	4a14      	ldr	r2, [pc, #80]	; (8000d14 <HAL_MspInit+0x5c>)
 8000cc4:	f043 0301 	orr.w	r3, r3, #1
 8000cc8:	6193      	str	r3, [r2, #24]
 8000cca:	4b12      	ldr	r3, [pc, #72]	; (8000d14 <HAL_MspInit+0x5c>)
 8000ccc:	699b      	ldr	r3, [r3, #24]
 8000cce:	f003 0301 	and.w	r3, r3, #1
 8000cd2:	60bb      	str	r3, [r7, #8]
 8000cd4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000cd6:	4b0f      	ldr	r3, [pc, #60]	; (8000d14 <HAL_MspInit+0x5c>)
 8000cd8:	69db      	ldr	r3, [r3, #28]
 8000cda:	4a0e      	ldr	r2, [pc, #56]	; (8000d14 <HAL_MspInit+0x5c>)
 8000cdc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ce0:	61d3      	str	r3, [r2, #28]
 8000ce2:	4b0c      	ldr	r3, [pc, #48]	; (8000d14 <HAL_MspInit+0x5c>)
 8000ce4:	69db      	ldr	r3, [r3, #28]
 8000ce6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000cea:	607b      	str	r3, [r7, #4]
 8000cec:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000cee:	4b0a      	ldr	r3, [pc, #40]	; (8000d18 <HAL_MspInit+0x60>)
 8000cf0:	685b      	ldr	r3, [r3, #4]
 8000cf2:	60fb      	str	r3, [r7, #12]
 8000cf4:	68fb      	ldr	r3, [r7, #12]
 8000cf6:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000cfa:	60fb      	str	r3, [r7, #12]
 8000cfc:	68fb      	ldr	r3, [r7, #12]
 8000cfe:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000d02:	60fb      	str	r3, [r7, #12]
 8000d04:	4a04      	ldr	r2, [pc, #16]	; (8000d18 <HAL_MspInit+0x60>)
 8000d06:	68fb      	ldr	r3, [r7, #12]
 8000d08:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d0a:	bf00      	nop
 8000d0c:	3714      	adds	r7, #20
 8000d0e:	46bd      	mov	sp, r7
 8000d10:	bc80      	pop	{r7}
 8000d12:	4770      	bx	lr
 8000d14:	40021000 	.word	0x40021000
 8000d18:	40010000 	.word	0x40010000

08000d1c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000d1c:	b580      	push	{r7, lr}
 8000d1e:	b088      	sub	sp, #32
 8000d20:	af00      	add	r7, sp, #0
 8000d22:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d24:	f107 0310 	add.w	r3, r7, #16
 8000d28:	2200      	movs	r2, #0
 8000d2a:	601a      	str	r2, [r3, #0]
 8000d2c:	605a      	str	r2, [r3, #4]
 8000d2e:	609a      	str	r2, [r3, #8]
 8000d30:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	681b      	ldr	r3, [r3, #0]
 8000d36:	4a15      	ldr	r2, [pc, #84]	; (8000d8c <HAL_UART_MspInit+0x70>)
 8000d38:	4293      	cmp	r3, r2
 8000d3a:	d123      	bne.n	8000d84 <HAL_UART_MspInit+0x68>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000d3c:	4b14      	ldr	r3, [pc, #80]	; (8000d90 <HAL_UART_MspInit+0x74>)
 8000d3e:	69db      	ldr	r3, [r3, #28]
 8000d40:	4a13      	ldr	r2, [pc, #76]	; (8000d90 <HAL_UART_MspInit+0x74>)
 8000d42:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d46:	61d3      	str	r3, [r2, #28]
 8000d48:	4b11      	ldr	r3, [pc, #68]	; (8000d90 <HAL_UART_MspInit+0x74>)
 8000d4a:	69db      	ldr	r3, [r3, #28]
 8000d4c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d50:	60fb      	str	r3, [r7, #12]
 8000d52:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d54:	4b0e      	ldr	r3, [pc, #56]	; (8000d90 <HAL_UART_MspInit+0x74>)
 8000d56:	699b      	ldr	r3, [r3, #24]
 8000d58:	4a0d      	ldr	r2, [pc, #52]	; (8000d90 <HAL_UART_MspInit+0x74>)
 8000d5a:	f043 0304 	orr.w	r3, r3, #4
 8000d5e:	6193      	str	r3, [r2, #24]
 8000d60:	4b0b      	ldr	r3, [pc, #44]	; (8000d90 <HAL_UART_MspInit+0x74>)
 8000d62:	699b      	ldr	r3, [r3, #24]
 8000d64:	f003 0304 	and.w	r3, r3, #4
 8000d68:	60bb      	str	r3, [r7, #8]
 8000d6a:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000d6c:	230c      	movs	r3, #12
 8000d6e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d70:	2302      	movs	r3, #2
 8000d72:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d74:	2302      	movs	r3, #2
 8000d76:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d78:	f107 0310 	add.w	r3, r7, #16
 8000d7c:	4619      	mov	r1, r3
 8000d7e:	4805      	ldr	r0, [pc, #20]	; (8000d94 <HAL_UART_MspInit+0x78>)
 8000d80:	f000 fa30 	bl	80011e4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000d84:	bf00      	nop
 8000d86:	3720      	adds	r7, #32
 8000d88:	46bd      	mov	sp, r7
 8000d8a:	bd80      	pop	{r7, pc}
 8000d8c:	40004400 	.word	0x40004400
 8000d90:	40021000 	.word	0x40021000
 8000d94:	40010800 	.word	0x40010800

08000d98 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d98:	b480      	push	{r7}
 8000d9a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000d9c:	bf00      	nop
 8000d9e:	46bd      	mov	sp, r7
 8000da0:	bc80      	pop	{r7}
 8000da2:	4770      	bx	lr

08000da4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000da4:	b480      	push	{r7}
 8000da6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000da8:	e7fe      	b.n	8000da8 <HardFault_Handler+0x4>

08000daa <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000daa:	b480      	push	{r7}
 8000dac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000dae:	e7fe      	b.n	8000dae <MemManage_Handler+0x4>

08000db0 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000db0:	b480      	push	{r7}
 8000db2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000db4:	e7fe      	b.n	8000db4 <BusFault_Handler+0x4>

08000db6 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000db6:	b480      	push	{r7}
 8000db8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000dba:	e7fe      	b.n	8000dba <UsageFault_Handler+0x4>

08000dbc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000dbc:	b480      	push	{r7}
 8000dbe:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000dc0:	bf00      	nop
 8000dc2:	46bd      	mov	sp, r7
 8000dc4:	bc80      	pop	{r7}
 8000dc6:	4770      	bx	lr

08000dc8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000dc8:	b480      	push	{r7}
 8000dca:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000dcc:	bf00      	nop
 8000dce:	46bd      	mov	sp, r7
 8000dd0:	bc80      	pop	{r7}
 8000dd2:	4770      	bx	lr

08000dd4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000dd4:	b480      	push	{r7}
 8000dd6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000dd8:	bf00      	nop
 8000dda:	46bd      	mov	sp, r7
 8000ddc:	bc80      	pop	{r7}
 8000dde:	4770      	bx	lr

08000de0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000de0:	b580      	push	{r7, lr}
 8000de2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000de4:	f000 f8b2 	bl	8000f4c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000de8:	bf00      	nop
 8000dea:	bd80      	pop	{r7, pc}

08000dec <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000dec:	b580      	push	{r7, lr}
 8000dee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8000df0:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000df4:	f000 fb68 	bl	80014c8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000df8:	bf00      	nop
 8000dfa:	bd80      	pop	{r7, pc}

08000dfc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000dfc:	b580      	push	{r7, lr}
 8000dfe:	b086      	sub	sp, #24
 8000e00:	af00      	add	r7, sp, #0
 8000e02:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000e04:	4a14      	ldr	r2, [pc, #80]	; (8000e58 <_sbrk+0x5c>)
 8000e06:	4b15      	ldr	r3, [pc, #84]	; (8000e5c <_sbrk+0x60>)
 8000e08:	1ad3      	subs	r3, r2, r3
 8000e0a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000e0c:	697b      	ldr	r3, [r7, #20]
 8000e0e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000e10:	4b13      	ldr	r3, [pc, #76]	; (8000e60 <_sbrk+0x64>)
 8000e12:	681b      	ldr	r3, [r3, #0]
 8000e14:	2b00      	cmp	r3, #0
 8000e16:	d102      	bne.n	8000e1e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000e18:	4b11      	ldr	r3, [pc, #68]	; (8000e60 <_sbrk+0x64>)
 8000e1a:	4a12      	ldr	r2, [pc, #72]	; (8000e64 <_sbrk+0x68>)
 8000e1c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000e1e:	4b10      	ldr	r3, [pc, #64]	; (8000e60 <_sbrk+0x64>)
 8000e20:	681a      	ldr	r2, [r3, #0]
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	4413      	add	r3, r2
 8000e26:	693a      	ldr	r2, [r7, #16]
 8000e28:	429a      	cmp	r2, r3
 8000e2a:	d207      	bcs.n	8000e3c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000e2c:	f001 f942 	bl	80020b4 <__errno>
 8000e30:	4602      	mov	r2, r0
 8000e32:	230c      	movs	r3, #12
 8000e34:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8000e36:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000e3a:	e009      	b.n	8000e50 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000e3c:	4b08      	ldr	r3, [pc, #32]	; (8000e60 <_sbrk+0x64>)
 8000e3e:	681b      	ldr	r3, [r3, #0]
 8000e40:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000e42:	4b07      	ldr	r3, [pc, #28]	; (8000e60 <_sbrk+0x64>)
 8000e44:	681a      	ldr	r2, [r3, #0]
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	4413      	add	r3, r2
 8000e4a:	4a05      	ldr	r2, [pc, #20]	; (8000e60 <_sbrk+0x64>)
 8000e4c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000e4e:	68fb      	ldr	r3, [r7, #12]
}
 8000e50:	4618      	mov	r0, r3
 8000e52:	3718      	adds	r7, #24
 8000e54:	46bd      	mov	sp, r7
 8000e56:	bd80      	pop	{r7, pc}
 8000e58:	20005000 	.word	0x20005000
 8000e5c:	00000400 	.word	0x00000400
 8000e60:	20000214 	.word	0x20000214
 8000e64:	20000268 	.word	0x20000268

08000e68 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000e68:	b480      	push	{r7}
 8000e6a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000e6c:	bf00      	nop
 8000e6e:	46bd      	mov	sp, r7
 8000e70:	bc80      	pop	{r7}
 8000e72:	4770      	bx	lr

08000e74 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8000e74:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8000e76:	e003      	b.n	8000e80 <LoopCopyDataInit>

08000e78 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8000e78:	4b0b      	ldr	r3, [pc, #44]	; (8000ea8 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8000e7a:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8000e7c:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8000e7e:	3104      	adds	r1, #4

08000e80 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8000e80:	480a      	ldr	r0, [pc, #40]	; (8000eac <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8000e82:	4b0b      	ldr	r3, [pc, #44]	; (8000eb0 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8000e84:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8000e86:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8000e88:	d3f6      	bcc.n	8000e78 <CopyDataInit>
  ldr r2, =_sbss
 8000e8a:	4a0a      	ldr	r2, [pc, #40]	; (8000eb4 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8000e8c:	e002      	b.n	8000e94 <LoopFillZerobss>

08000e8e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8000e8e:	2300      	movs	r3, #0
  str r3, [r2], #4
 8000e90:	f842 3b04 	str.w	r3, [r2], #4

08000e94 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8000e94:	4b08      	ldr	r3, [pc, #32]	; (8000eb8 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8000e96:	429a      	cmp	r2, r3
  bcc FillZerobss
 8000e98:	d3f9      	bcc.n	8000e8e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000e9a:	f7ff ffe5 	bl	8000e68 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000e9e:	f001 f90f 	bl	80020c0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000ea2:	f7ff fdf1 	bl	8000a88 <main>
  bx lr
 8000ea6:	4770      	bx	lr
  ldr r3, =_sidata
 8000ea8:	08004448 	.word	0x08004448
  ldr r0, =_sdata
 8000eac:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8000eb0:	200001e4 	.word	0x200001e4
  ldr r2, =_sbss
 8000eb4:	200001e4 	.word	0x200001e4
  ldr r3, = _ebss
 8000eb8:	20000268 	.word	0x20000268

08000ebc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000ebc:	e7fe      	b.n	8000ebc <ADC1_2_IRQHandler>
	...

08000ec0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ec0:	b580      	push	{r7, lr}
 8000ec2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ec4:	4b08      	ldr	r3, [pc, #32]	; (8000ee8 <HAL_Init+0x28>)
 8000ec6:	681b      	ldr	r3, [r3, #0]
 8000ec8:	4a07      	ldr	r2, [pc, #28]	; (8000ee8 <HAL_Init+0x28>)
 8000eca:	f043 0310 	orr.w	r3, r3, #16
 8000ece:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ed0:	2003      	movs	r0, #3
 8000ed2:	f000 f945 	bl	8001160 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000ed6:	2000      	movs	r0, #0
 8000ed8:	f000 f808 	bl	8000eec <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000edc:	f7ff feec 	bl	8000cb8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000ee0:	2300      	movs	r3, #0
}
 8000ee2:	4618      	mov	r0, r3
 8000ee4:	bd80      	pop	{r7, pc}
 8000ee6:	bf00      	nop
 8000ee8:	40022000 	.word	0x40022000

08000eec <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000eec:	b580      	push	{r7, lr}
 8000eee:	b082      	sub	sp, #8
 8000ef0:	af00      	add	r7, sp, #0
 8000ef2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000ef4:	4b12      	ldr	r3, [pc, #72]	; (8000f40 <HAL_InitTick+0x54>)
 8000ef6:	681a      	ldr	r2, [r3, #0]
 8000ef8:	4b12      	ldr	r3, [pc, #72]	; (8000f44 <HAL_InitTick+0x58>)
 8000efa:	781b      	ldrb	r3, [r3, #0]
 8000efc:	4619      	mov	r1, r3
 8000efe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f02:	fbb3 f3f1 	udiv	r3, r3, r1
 8000f06:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f0a:	4618      	mov	r0, r3
 8000f0c:	f000 f95d 	bl	80011ca <HAL_SYSTICK_Config>
 8000f10:	4603      	mov	r3, r0
 8000f12:	2b00      	cmp	r3, #0
 8000f14:	d001      	beq.n	8000f1a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000f16:	2301      	movs	r3, #1
 8000f18:	e00e      	b.n	8000f38 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	2b0f      	cmp	r3, #15
 8000f1e:	d80a      	bhi.n	8000f36 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f20:	2200      	movs	r2, #0
 8000f22:	6879      	ldr	r1, [r7, #4]
 8000f24:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000f28:	f000 f925 	bl	8001176 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000f2c:	4a06      	ldr	r2, [pc, #24]	; (8000f48 <HAL_InitTick+0x5c>)
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000f32:	2300      	movs	r3, #0
 8000f34:	e000      	b.n	8000f38 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000f36:	2301      	movs	r3, #1
}
 8000f38:	4618      	mov	r0, r3
 8000f3a:	3708      	adds	r7, #8
 8000f3c:	46bd      	mov	sp, r7
 8000f3e:	bd80      	pop	{r7, pc}
 8000f40:	20000008 	.word	0x20000008
 8000f44:	20000010 	.word	0x20000010
 8000f48:	2000000c 	.word	0x2000000c

08000f4c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f4c:	b480      	push	{r7}
 8000f4e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000f50:	4b05      	ldr	r3, [pc, #20]	; (8000f68 <HAL_IncTick+0x1c>)
 8000f52:	781b      	ldrb	r3, [r3, #0]
 8000f54:	461a      	mov	r2, r3
 8000f56:	4b05      	ldr	r3, [pc, #20]	; (8000f6c <HAL_IncTick+0x20>)
 8000f58:	681b      	ldr	r3, [r3, #0]
 8000f5a:	4413      	add	r3, r2
 8000f5c:	4a03      	ldr	r2, [pc, #12]	; (8000f6c <HAL_IncTick+0x20>)
 8000f5e:	6013      	str	r3, [r2, #0]
}
 8000f60:	bf00      	nop
 8000f62:	46bd      	mov	sp, r7
 8000f64:	bc80      	pop	{r7}
 8000f66:	4770      	bx	lr
 8000f68:	20000010 	.word	0x20000010
 8000f6c:	20000260 	.word	0x20000260

08000f70 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f70:	b480      	push	{r7}
 8000f72:	af00      	add	r7, sp, #0
  return uwTick;
 8000f74:	4b02      	ldr	r3, [pc, #8]	; (8000f80 <HAL_GetTick+0x10>)
 8000f76:	681b      	ldr	r3, [r3, #0]
}
 8000f78:	4618      	mov	r0, r3
 8000f7a:	46bd      	mov	sp, r7
 8000f7c:	bc80      	pop	{r7}
 8000f7e:	4770      	bx	lr
 8000f80:	20000260 	.word	0x20000260

08000f84 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000f84:	b580      	push	{r7, lr}
 8000f86:	b084      	sub	sp, #16
 8000f88:	af00      	add	r7, sp, #0
 8000f8a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000f8c:	f7ff fff0 	bl	8000f70 <HAL_GetTick>
 8000f90:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000f96:	68fb      	ldr	r3, [r7, #12]
 8000f98:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000f9c:	d005      	beq.n	8000faa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000f9e:	4b09      	ldr	r3, [pc, #36]	; (8000fc4 <HAL_Delay+0x40>)
 8000fa0:	781b      	ldrb	r3, [r3, #0]
 8000fa2:	461a      	mov	r2, r3
 8000fa4:	68fb      	ldr	r3, [r7, #12]
 8000fa6:	4413      	add	r3, r2
 8000fa8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000faa:	bf00      	nop
 8000fac:	f7ff ffe0 	bl	8000f70 <HAL_GetTick>
 8000fb0:	4602      	mov	r2, r0
 8000fb2:	68bb      	ldr	r3, [r7, #8]
 8000fb4:	1ad3      	subs	r3, r2, r3
 8000fb6:	68fa      	ldr	r2, [r7, #12]
 8000fb8:	429a      	cmp	r2, r3
 8000fba:	d8f7      	bhi.n	8000fac <HAL_Delay+0x28>
  {
  }
}
 8000fbc:	bf00      	nop
 8000fbe:	3710      	adds	r7, #16
 8000fc0:	46bd      	mov	sp, r7
 8000fc2:	bd80      	pop	{r7, pc}
 8000fc4:	20000010 	.word	0x20000010

08000fc8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000fc8:	b480      	push	{r7}
 8000fca:	b085      	sub	sp, #20
 8000fcc:	af00      	add	r7, sp, #0
 8000fce:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	f003 0307 	and.w	r3, r3, #7
 8000fd6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000fd8:	4b0c      	ldr	r3, [pc, #48]	; (800100c <__NVIC_SetPriorityGrouping+0x44>)
 8000fda:	68db      	ldr	r3, [r3, #12]
 8000fdc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000fde:	68ba      	ldr	r2, [r7, #8]
 8000fe0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000fe4:	4013      	ands	r3, r2
 8000fe6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000fe8:	68fb      	ldr	r3, [r7, #12]
 8000fea:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000fec:	68bb      	ldr	r3, [r7, #8]
 8000fee:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000ff0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000ff4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ff8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000ffa:	4a04      	ldr	r2, [pc, #16]	; (800100c <__NVIC_SetPriorityGrouping+0x44>)
 8000ffc:	68bb      	ldr	r3, [r7, #8]
 8000ffe:	60d3      	str	r3, [r2, #12]
}
 8001000:	bf00      	nop
 8001002:	3714      	adds	r7, #20
 8001004:	46bd      	mov	sp, r7
 8001006:	bc80      	pop	{r7}
 8001008:	4770      	bx	lr
 800100a:	bf00      	nop
 800100c:	e000ed00 	.word	0xe000ed00

08001010 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001010:	b480      	push	{r7}
 8001012:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001014:	4b04      	ldr	r3, [pc, #16]	; (8001028 <__NVIC_GetPriorityGrouping+0x18>)
 8001016:	68db      	ldr	r3, [r3, #12]
 8001018:	0a1b      	lsrs	r3, r3, #8
 800101a:	f003 0307 	and.w	r3, r3, #7
}
 800101e:	4618      	mov	r0, r3
 8001020:	46bd      	mov	sp, r7
 8001022:	bc80      	pop	{r7}
 8001024:	4770      	bx	lr
 8001026:	bf00      	nop
 8001028:	e000ed00 	.word	0xe000ed00

0800102c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800102c:	b480      	push	{r7}
 800102e:	b083      	sub	sp, #12
 8001030:	af00      	add	r7, sp, #0
 8001032:	4603      	mov	r3, r0
 8001034:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001036:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800103a:	2b00      	cmp	r3, #0
 800103c:	db0b      	blt.n	8001056 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800103e:	79fb      	ldrb	r3, [r7, #7]
 8001040:	f003 021f 	and.w	r2, r3, #31
 8001044:	4906      	ldr	r1, [pc, #24]	; (8001060 <__NVIC_EnableIRQ+0x34>)
 8001046:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800104a:	095b      	lsrs	r3, r3, #5
 800104c:	2001      	movs	r0, #1
 800104e:	fa00 f202 	lsl.w	r2, r0, r2
 8001052:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001056:	bf00      	nop
 8001058:	370c      	adds	r7, #12
 800105a:	46bd      	mov	sp, r7
 800105c:	bc80      	pop	{r7}
 800105e:	4770      	bx	lr
 8001060:	e000e100 	.word	0xe000e100

08001064 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001064:	b480      	push	{r7}
 8001066:	b083      	sub	sp, #12
 8001068:	af00      	add	r7, sp, #0
 800106a:	4603      	mov	r3, r0
 800106c:	6039      	str	r1, [r7, #0]
 800106e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001070:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001074:	2b00      	cmp	r3, #0
 8001076:	db0a      	blt.n	800108e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001078:	683b      	ldr	r3, [r7, #0]
 800107a:	b2da      	uxtb	r2, r3
 800107c:	490c      	ldr	r1, [pc, #48]	; (80010b0 <__NVIC_SetPriority+0x4c>)
 800107e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001082:	0112      	lsls	r2, r2, #4
 8001084:	b2d2      	uxtb	r2, r2
 8001086:	440b      	add	r3, r1
 8001088:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800108c:	e00a      	b.n	80010a4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800108e:	683b      	ldr	r3, [r7, #0]
 8001090:	b2da      	uxtb	r2, r3
 8001092:	4908      	ldr	r1, [pc, #32]	; (80010b4 <__NVIC_SetPriority+0x50>)
 8001094:	79fb      	ldrb	r3, [r7, #7]
 8001096:	f003 030f 	and.w	r3, r3, #15
 800109a:	3b04      	subs	r3, #4
 800109c:	0112      	lsls	r2, r2, #4
 800109e:	b2d2      	uxtb	r2, r2
 80010a0:	440b      	add	r3, r1
 80010a2:	761a      	strb	r2, [r3, #24]
}
 80010a4:	bf00      	nop
 80010a6:	370c      	adds	r7, #12
 80010a8:	46bd      	mov	sp, r7
 80010aa:	bc80      	pop	{r7}
 80010ac:	4770      	bx	lr
 80010ae:	bf00      	nop
 80010b0:	e000e100 	.word	0xe000e100
 80010b4:	e000ed00 	.word	0xe000ed00

080010b8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80010b8:	b480      	push	{r7}
 80010ba:	b089      	sub	sp, #36	; 0x24
 80010bc:	af00      	add	r7, sp, #0
 80010be:	60f8      	str	r0, [r7, #12]
 80010c0:	60b9      	str	r1, [r7, #8]
 80010c2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80010c4:	68fb      	ldr	r3, [r7, #12]
 80010c6:	f003 0307 	and.w	r3, r3, #7
 80010ca:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80010cc:	69fb      	ldr	r3, [r7, #28]
 80010ce:	f1c3 0307 	rsb	r3, r3, #7
 80010d2:	2b04      	cmp	r3, #4
 80010d4:	bf28      	it	cs
 80010d6:	2304      	movcs	r3, #4
 80010d8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80010da:	69fb      	ldr	r3, [r7, #28]
 80010dc:	3304      	adds	r3, #4
 80010de:	2b06      	cmp	r3, #6
 80010e0:	d902      	bls.n	80010e8 <NVIC_EncodePriority+0x30>
 80010e2:	69fb      	ldr	r3, [r7, #28]
 80010e4:	3b03      	subs	r3, #3
 80010e6:	e000      	b.n	80010ea <NVIC_EncodePriority+0x32>
 80010e8:	2300      	movs	r3, #0
 80010ea:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010ec:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80010f0:	69bb      	ldr	r3, [r7, #24]
 80010f2:	fa02 f303 	lsl.w	r3, r2, r3
 80010f6:	43da      	mvns	r2, r3
 80010f8:	68bb      	ldr	r3, [r7, #8]
 80010fa:	401a      	ands	r2, r3
 80010fc:	697b      	ldr	r3, [r7, #20]
 80010fe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001100:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001104:	697b      	ldr	r3, [r7, #20]
 8001106:	fa01 f303 	lsl.w	r3, r1, r3
 800110a:	43d9      	mvns	r1, r3
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001110:	4313      	orrs	r3, r2
         );
}
 8001112:	4618      	mov	r0, r3
 8001114:	3724      	adds	r7, #36	; 0x24
 8001116:	46bd      	mov	sp, r7
 8001118:	bc80      	pop	{r7}
 800111a:	4770      	bx	lr

0800111c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800111c:	b580      	push	{r7, lr}
 800111e:	b082      	sub	sp, #8
 8001120:	af00      	add	r7, sp, #0
 8001122:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	3b01      	subs	r3, #1
 8001128:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800112c:	d301      	bcc.n	8001132 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800112e:	2301      	movs	r3, #1
 8001130:	e00f      	b.n	8001152 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001132:	4a0a      	ldr	r2, [pc, #40]	; (800115c <SysTick_Config+0x40>)
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	3b01      	subs	r3, #1
 8001138:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800113a:	210f      	movs	r1, #15
 800113c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001140:	f7ff ff90 	bl	8001064 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001144:	4b05      	ldr	r3, [pc, #20]	; (800115c <SysTick_Config+0x40>)
 8001146:	2200      	movs	r2, #0
 8001148:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800114a:	4b04      	ldr	r3, [pc, #16]	; (800115c <SysTick_Config+0x40>)
 800114c:	2207      	movs	r2, #7
 800114e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001150:	2300      	movs	r3, #0
}
 8001152:	4618      	mov	r0, r3
 8001154:	3708      	adds	r7, #8
 8001156:	46bd      	mov	sp, r7
 8001158:	bd80      	pop	{r7, pc}
 800115a:	bf00      	nop
 800115c:	e000e010 	.word	0xe000e010

08001160 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001160:	b580      	push	{r7, lr}
 8001162:	b082      	sub	sp, #8
 8001164:	af00      	add	r7, sp, #0
 8001166:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001168:	6878      	ldr	r0, [r7, #4]
 800116a:	f7ff ff2d 	bl	8000fc8 <__NVIC_SetPriorityGrouping>
}
 800116e:	bf00      	nop
 8001170:	3708      	adds	r7, #8
 8001172:	46bd      	mov	sp, r7
 8001174:	bd80      	pop	{r7, pc}

08001176 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001176:	b580      	push	{r7, lr}
 8001178:	b086      	sub	sp, #24
 800117a:	af00      	add	r7, sp, #0
 800117c:	4603      	mov	r3, r0
 800117e:	60b9      	str	r1, [r7, #8]
 8001180:	607a      	str	r2, [r7, #4]
 8001182:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001184:	2300      	movs	r3, #0
 8001186:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001188:	f7ff ff42 	bl	8001010 <__NVIC_GetPriorityGrouping>
 800118c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800118e:	687a      	ldr	r2, [r7, #4]
 8001190:	68b9      	ldr	r1, [r7, #8]
 8001192:	6978      	ldr	r0, [r7, #20]
 8001194:	f7ff ff90 	bl	80010b8 <NVIC_EncodePriority>
 8001198:	4602      	mov	r2, r0
 800119a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800119e:	4611      	mov	r1, r2
 80011a0:	4618      	mov	r0, r3
 80011a2:	f7ff ff5f 	bl	8001064 <__NVIC_SetPriority>
}
 80011a6:	bf00      	nop
 80011a8:	3718      	adds	r7, #24
 80011aa:	46bd      	mov	sp, r7
 80011ac:	bd80      	pop	{r7, pc}

080011ae <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80011ae:	b580      	push	{r7, lr}
 80011b0:	b082      	sub	sp, #8
 80011b2:	af00      	add	r7, sp, #0
 80011b4:	4603      	mov	r3, r0
 80011b6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80011b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011bc:	4618      	mov	r0, r3
 80011be:	f7ff ff35 	bl	800102c <__NVIC_EnableIRQ>
}
 80011c2:	bf00      	nop
 80011c4:	3708      	adds	r7, #8
 80011c6:	46bd      	mov	sp, r7
 80011c8:	bd80      	pop	{r7, pc}

080011ca <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80011ca:	b580      	push	{r7, lr}
 80011cc:	b082      	sub	sp, #8
 80011ce:	af00      	add	r7, sp, #0
 80011d0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80011d2:	6878      	ldr	r0, [r7, #4]
 80011d4:	f7ff ffa2 	bl	800111c <SysTick_Config>
 80011d8:	4603      	mov	r3, r0
}
 80011da:	4618      	mov	r0, r3
 80011dc:	3708      	adds	r7, #8
 80011de:	46bd      	mov	sp, r7
 80011e0:	bd80      	pop	{r7, pc}
	...

080011e4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80011e4:	b480      	push	{r7}
 80011e6:	b08b      	sub	sp, #44	; 0x2c
 80011e8:	af00      	add	r7, sp, #0
 80011ea:	6078      	str	r0, [r7, #4]
 80011ec:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80011ee:	2300      	movs	r3, #0
 80011f0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80011f2:	2300      	movs	r3, #0
 80011f4:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80011f6:	e127      	b.n	8001448 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80011f8:	2201      	movs	r2, #1
 80011fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001200:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001202:	683b      	ldr	r3, [r7, #0]
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	69fa      	ldr	r2, [r7, #28]
 8001208:	4013      	ands	r3, r2
 800120a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800120c:	69ba      	ldr	r2, [r7, #24]
 800120e:	69fb      	ldr	r3, [r7, #28]
 8001210:	429a      	cmp	r2, r3
 8001212:	f040 8116 	bne.w	8001442 <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001216:	683b      	ldr	r3, [r7, #0]
 8001218:	685b      	ldr	r3, [r3, #4]
 800121a:	2b12      	cmp	r3, #18
 800121c:	d034      	beq.n	8001288 <HAL_GPIO_Init+0xa4>
 800121e:	2b12      	cmp	r3, #18
 8001220:	d80d      	bhi.n	800123e <HAL_GPIO_Init+0x5a>
 8001222:	2b02      	cmp	r3, #2
 8001224:	d02b      	beq.n	800127e <HAL_GPIO_Init+0x9a>
 8001226:	2b02      	cmp	r3, #2
 8001228:	d804      	bhi.n	8001234 <HAL_GPIO_Init+0x50>
 800122a:	2b00      	cmp	r3, #0
 800122c:	d031      	beq.n	8001292 <HAL_GPIO_Init+0xae>
 800122e:	2b01      	cmp	r3, #1
 8001230:	d01c      	beq.n	800126c <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001232:	e048      	b.n	80012c6 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001234:	2b03      	cmp	r3, #3
 8001236:	d043      	beq.n	80012c0 <HAL_GPIO_Init+0xdc>
 8001238:	2b11      	cmp	r3, #17
 800123a:	d01b      	beq.n	8001274 <HAL_GPIO_Init+0x90>
          break;
 800123c:	e043      	b.n	80012c6 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 800123e:	4a89      	ldr	r2, [pc, #548]	; (8001464 <HAL_GPIO_Init+0x280>)
 8001240:	4293      	cmp	r3, r2
 8001242:	d026      	beq.n	8001292 <HAL_GPIO_Init+0xae>
 8001244:	4a87      	ldr	r2, [pc, #540]	; (8001464 <HAL_GPIO_Init+0x280>)
 8001246:	4293      	cmp	r3, r2
 8001248:	d806      	bhi.n	8001258 <HAL_GPIO_Init+0x74>
 800124a:	4a87      	ldr	r2, [pc, #540]	; (8001468 <HAL_GPIO_Init+0x284>)
 800124c:	4293      	cmp	r3, r2
 800124e:	d020      	beq.n	8001292 <HAL_GPIO_Init+0xae>
 8001250:	4a86      	ldr	r2, [pc, #536]	; (800146c <HAL_GPIO_Init+0x288>)
 8001252:	4293      	cmp	r3, r2
 8001254:	d01d      	beq.n	8001292 <HAL_GPIO_Init+0xae>
          break;
 8001256:	e036      	b.n	80012c6 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001258:	4a85      	ldr	r2, [pc, #532]	; (8001470 <HAL_GPIO_Init+0x28c>)
 800125a:	4293      	cmp	r3, r2
 800125c:	d019      	beq.n	8001292 <HAL_GPIO_Init+0xae>
 800125e:	4a85      	ldr	r2, [pc, #532]	; (8001474 <HAL_GPIO_Init+0x290>)
 8001260:	4293      	cmp	r3, r2
 8001262:	d016      	beq.n	8001292 <HAL_GPIO_Init+0xae>
 8001264:	4a84      	ldr	r2, [pc, #528]	; (8001478 <HAL_GPIO_Init+0x294>)
 8001266:	4293      	cmp	r3, r2
 8001268:	d013      	beq.n	8001292 <HAL_GPIO_Init+0xae>
          break;
 800126a:	e02c      	b.n	80012c6 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800126c:	683b      	ldr	r3, [r7, #0]
 800126e:	68db      	ldr	r3, [r3, #12]
 8001270:	623b      	str	r3, [r7, #32]
          break;
 8001272:	e028      	b.n	80012c6 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001274:	683b      	ldr	r3, [r7, #0]
 8001276:	68db      	ldr	r3, [r3, #12]
 8001278:	3304      	adds	r3, #4
 800127a:	623b      	str	r3, [r7, #32]
          break;
 800127c:	e023      	b.n	80012c6 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800127e:	683b      	ldr	r3, [r7, #0]
 8001280:	68db      	ldr	r3, [r3, #12]
 8001282:	3308      	adds	r3, #8
 8001284:	623b      	str	r3, [r7, #32]
          break;
 8001286:	e01e      	b.n	80012c6 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001288:	683b      	ldr	r3, [r7, #0]
 800128a:	68db      	ldr	r3, [r3, #12]
 800128c:	330c      	adds	r3, #12
 800128e:	623b      	str	r3, [r7, #32]
          break;
 8001290:	e019      	b.n	80012c6 <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001292:	683b      	ldr	r3, [r7, #0]
 8001294:	689b      	ldr	r3, [r3, #8]
 8001296:	2b00      	cmp	r3, #0
 8001298:	d102      	bne.n	80012a0 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800129a:	2304      	movs	r3, #4
 800129c:	623b      	str	r3, [r7, #32]
          break;
 800129e:	e012      	b.n	80012c6 <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80012a0:	683b      	ldr	r3, [r7, #0]
 80012a2:	689b      	ldr	r3, [r3, #8]
 80012a4:	2b01      	cmp	r3, #1
 80012a6:	d105      	bne.n	80012b4 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80012a8:	2308      	movs	r3, #8
 80012aa:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	69fa      	ldr	r2, [r7, #28]
 80012b0:	611a      	str	r2, [r3, #16]
          break;
 80012b2:	e008      	b.n	80012c6 <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80012b4:	2308      	movs	r3, #8
 80012b6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	69fa      	ldr	r2, [r7, #28]
 80012bc:	615a      	str	r2, [r3, #20]
          break;
 80012be:	e002      	b.n	80012c6 <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80012c0:	2300      	movs	r3, #0
 80012c2:	623b      	str	r3, [r7, #32]
          break;
 80012c4:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80012c6:	69bb      	ldr	r3, [r7, #24]
 80012c8:	2bff      	cmp	r3, #255	; 0xff
 80012ca:	d801      	bhi.n	80012d0 <HAL_GPIO_Init+0xec>
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	e001      	b.n	80012d4 <HAL_GPIO_Init+0xf0>
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	3304      	adds	r3, #4
 80012d4:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80012d6:	69bb      	ldr	r3, [r7, #24]
 80012d8:	2bff      	cmp	r3, #255	; 0xff
 80012da:	d802      	bhi.n	80012e2 <HAL_GPIO_Init+0xfe>
 80012dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012de:	009b      	lsls	r3, r3, #2
 80012e0:	e002      	b.n	80012e8 <HAL_GPIO_Init+0x104>
 80012e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012e4:	3b08      	subs	r3, #8
 80012e6:	009b      	lsls	r3, r3, #2
 80012e8:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80012ea:	697b      	ldr	r3, [r7, #20]
 80012ec:	681a      	ldr	r2, [r3, #0]
 80012ee:	210f      	movs	r1, #15
 80012f0:	693b      	ldr	r3, [r7, #16]
 80012f2:	fa01 f303 	lsl.w	r3, r1, r3
 80012f6:	43db      	mvns	r3, r3
 80012f8:	401a      	ands	r2, r3
 80012fa:	6a39      	ldr	r1, [r7, #32]
 80012fc:	693b      	ldr	r3, [r7, #16]
 80012fe:	fa01 f303 	lsl.w	r3, r1, r3
 8001302:	431a      	orrs	r2, r3
 8001304:	697b      	ldr	r3, [r7, #20]
 8001306:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001308:	683b      	ldr	r3, [r7, #0]
 800130a:	685b      	ldr	r3, [r3, #4]
 800130c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001310:	2b00      	cmp	r3, #0
 8001312:	f000 8096 	beq.w	8001442 <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001316:	4b59      	ldr	r3, [pc, #356]	; (800147c <HAL_GPIO_Init+0x298>)
 8001318:	699b      	ldr	r3, [r3, #24]
 800131a:	4a58      	ldr	r2, [pc, #352]	; (800147c <HAL_GPIO_Init+0x298>)
 800131c:	f043 0301 	orr.w	r3, r3, #1
 8001320:	6193      	str	r3, [r2, #24]
 8001322:	4b56      	ldr	r3, [pc, #344]	; (800147c <HAL_GPIO_Init+0x298>)
 8001324:	699b      	ldr	r3, [r3, #24]
 8001326:	f003 0301 	and.w	r3, r3, #1
 800132a:	60bb      	str	r3, [r7, #8]
 800132c:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800132e:	4a54      	ldr	r2, [pc, #336]	; (8001480 <HAL_GPIO_Init+0x29c>)
 8001330:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001332:	089b      	lsrs	r3, r3, #2
 8001334:	3302      	adds	r3, #2
 8001336:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800133a:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800133c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800133e:	f003 0303 	and.w	r3, r3, #3
 8001342:	009b      	lsls	r3, r3, #2
 8001344:	220f      	movs	r2, #15
 8001346:	fa02 f303 	lsl.w	r3, r2, r3
 800134a:	43db      	mvns	r3, r3
 800134c:	68fa      	ldr	r2, [r7, #12]
 800134e:	4013      	ands	r3, r2
 8001350:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	4a4b      	ldr	r2, [pc, #300]	; (8001484 <HAL_GPIO_Init+0x2a0>)
 8001356:	4293      	cmp	r3, r2
 8001358:	d013      	beq.n	8001382 <HAL_GPIO_Init+0x19e>
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	4a4a      	ldr	r2, [pc, #296]	; (8001488 <HAL_GPIO_Init+0x2a4>)
 800135e:	4293      	cmp	r3, r2
 8001360:	d00d      	beq.n	800137e <HAL_GPIO_Init+0x19a>
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	4a49      	ldr	r2, [pc, #292]	; (800148c <HAL_GPIO_Init+0x2a8>)
 8001366:	4293      	cmp	r3, r2
 8001368:	d007      	beq.n	800137a <HAL_GPIO_Init+0x196>
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	4a48      	ldr	r2, [pc, #288]	; (8001490 <HAL_GPIO_Init+0x2ac>)
 800136e:	4293      	cmp	r3, r2
 8001370:	d101      	bne.n	8001376 <HAL_GPIO_Init+0x192>
 8001372:	2303      	movs	r3, #3
 8001374:	e006      	b.n	8001384 <HAL_GPIO_Init+0x1a0>
 8001376:	2304      	movs	r3, #4
 8001378:	e004      	b.n	8001384 <HAL_GPIO_Init+0x1a0>
 800137a:	2302      	movs	r3, #2
 800137c:	e002      	b.n	8001384 <HAL_GPIO_Init+0x1a0>
 800137e:	2301      	movs	r3, #1
 8001380:	e000      	b.n	8001384 <HAL_GPIO_Init+0x1a0>
 8001382:	2300      	movs	r3, #0
 8001384:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001386:	f002 0203 	and.w	r2, r2, #3
 800138a:	0092      	lsls	r2, r2, #2
 800138c:	4093      	lsls	r3, r2
 800138e:	68fa      	ldr	r2, [r7, #12]
 8001390:	4313      	orrs	r3, r2
 8001392:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001394:	493a      	ldr	r1, [pc, #232]	; (8001480 <HAL_GPIO_Init+0x29c>)
 8001396:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001398:	089b      	lsrs	r3, r3, #2
 800139a:	3302      	adds	r3, #2
 800139c:	68fa      	ldr	r2, [r7, #12]
 800139e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80013a2:	683b      	ldr	r3, [r7, #0]
 80013a4:	685b      	ldr	r3, [r3, #4]
 80013a6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	d006      	beq.n	80013bc <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80013ae:	4b39      	ldr	r3, [pc, #228]	; (8001494 <HAL_GPIO_Init+0x2b0>)
 80013b0:	681a      	ldr	r2, [r3, #0]
 80013b2:	4938      	ldr	r1, [pc, #224]	; (8001494 <HAL_GPIO_Init+0x2b0>)
 80013b4:	69bb      	ldr	r3, [r7, #24]
 80013b6:	4313      	orrs	r3, r2
 80013b8:	600b      	str	r3, [r1, #0]
 80013ba:	e006      	b.n	80013ca <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80013bc:	4b35      	ldr	r3, [pc, #212]	; (8001494 <HAL_GPIO_Init+0x2b0>)
 80013be:	681a      	ldr	r2, [r3, #0]
 80013c0:	69bb      	ldr	r3, [r7, #24]
 80013c2:	43db      	mvns	r3, r3
 80013c4:	4933      	ldr	r1, [pc, #204]	; (8001494 <HAL_GPIO_Init+0x2b0>)
 80013c6:	4013      	ands	r3, r2
 80013c8:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80013ca:	683b      	ldr	r3, [r7, #0]
 80013cc:	685b      	ldr	r3, [r3, #4]
 80013ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	d006      	beq.n	80013e4 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80013d6:	4b2f      	ldr	r3, [pc, #188]	; (8001494 <HAL_GPIO_Init+0x2b0>)
 80013d8:	685a      	ldr	r2, [r3, #4]
 80013da:	492e      	ldr	r1, [pc, #184]	; (8001494 <HAL_GPIO_Init+0x2b0>)
 80013dc:	69bb      	ldr	r3, [r7, #24]
 80013de:	4313      	orrs	r3, r2
 80013e0:	604b      	str	r3, [r1, #4]
 80013e2:	e006      	b.n	80013f2 <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80013e4:	4b2b      	ldr	r3, [pc, #172]	; (8001494 <HAL_GPIO_Init+0x2b0>)
 80013e6:	685a      	ldr	r2, [r3, #4]
 80013e8:	69bb      	ldr	r3, [r7, #24]
 80013ea:	43db      	mvns	r3, r3
 80013ec:	4929      	ldr	r1, [pc, #164]	; (8001494 <HAL_GPIO_Init+0x2b0>)
 80013ee:	4013      	ands	r3, r2
 80013f0:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80013f2:	683b      	ldr	r3, [r7, #0]
 80013f4:	685b      	ldr	r3, [r3, #4]
 80013f6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d006      	beq.n	800140c <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80013fe:	4b25      	ldr	r3, [pc, #148]	; (8001494 <HAL_GPIO_Init+0x2b0>)
 8001400:	689a      	ldr	r2, [r3, #8]
 8001402:	4924      	ldr	r1, [pc, #144]	; (8001494 <HAL_GPIO_Init+0x2b0>)
 8001404:	69bb      	ldr	r3, [r7, #24]
 8001406:	4313      	orrs	r3, r2
 8001408:	608b      	str	r3, [r1, #8]
 800140a:	e006      	b.n	800141a <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800140c:	4b21      	ldr	r3, [pc, #132]	; (8001494 <HAL_GPIO_Init+0x2b0>)
 800140e:	689a      	ldr	r2, [r3, #8]
 8001410:	69bb      	ldr	r3, [r7, #24]
 8001412:	43db      	mvns	r3, r3
 8001414:	491f      	ldr	r1, [pc, #124]	; (8001494 <HAL_GPIO_Init+0x2b0>)
 8001416:	4013      	ands	r3, r2
 8001418:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800141a:	683b      	ldr	r3, [r7, #0]
 800141c:	685b      	ldr	r3, [r3, #4]
 800141e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001422:	2b00      	cmp	r3, #0
 8001424:	d006      	beq.n	8001434 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001426:	4b1b      	ldr	r3, [pc, #108]	; (8001494 <HAL_GPIO_Init+0x2b0>)
 8001428:	68da      	ldr	r2, [r3, #12]
 800142a:	491a      	ldr	r1, [pc, #104]	; (8001494 <HAL_GPIO_Init+0x2b0>)
 800142c:	69bb      	ldr	r3, [r7, #24]
 800142e:	4313      	orrs	r3, r2
 8001430:	60cb      	str	r3, [r1, #12]
 8001432:	e006      	b.n	8001442 <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001434:	4b17      	ldr	r3, [pc, #92]	; (8001494 <HAL_GPIO_Init+0x2b0>)
 8001436:	68da      	ldr	r2, [r3, #12]
 8001438:	69bb      	ldr	r3, [r7, #24]
 800143a:	43db      	mvns	r3, r3
 800143c:	4915      	ldr	r1, [pc, #84]	; (8001494 <HAL_GPIO_Init+0x2b0>)
 800143e:	4013      	ands	r3, r2
 8001440:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001442:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001444:	3301      	adds	r3, #1
 8001446:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001448:	683b      	ldr	r3, [r7, #0]
 800144a:	681a      	ldr	r2, [r3, #0]
 800144c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800144e:	fa22 f303 	lsr.w	r3, r2, r3
 8001452:	2b00      	cmp	r3, #0
 8001454:	f47f aed0 	bne.w	80011f8 <HAL_GPIO_Init+0x14>
  }
}
 8001458:	bf00      	nop
 800145a:	372c      	adds	r7, #44	; 0x2c
 800145c:	46bd      	mov	sp, r7
 800145e:	bc80      	pop	{r7}
 8001460:	4770      	bx	lr
 8001462:	bf00      	nop
 8001464:	10210000 	.word	0x10210000
 8001468:	10110000 	.word	0x10110000
 800146c:	10120000 	.word	0x10120000
 8001470:	10310000 	.word	0x10310000
 8001474:	10320000 	.word	0x10320000
 8001478:	10220000 	.word	0x10220000
 800147c:	40021000 	.word	0x40021000
 8001480:	40010000 	.word	0x40010000
 8001484:	40010800 	.word	0x40010800
 8001488:	40010c00 	.word	0x40010c00
 800148c:	40011000 	.word	0x40011000
 8001490:	40011400 	.word	0x40011400
 8001494:	40010400 	.word	0x40010400

08001498 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001498:	b480      	push	{r7}
 800149a:	b083      	sub	sp, #12
 800149c:	af00      	add	r7, sp, #0
 800149e:	6078      	str	r0, [r7, #4]
 80014a0:	460b      	mov	r3, r1
 80014a2:	807b      	strh	r3, [r7, #2]
 80014a4:	4613      	mov	r3, r2
 80014a6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80014a8:	787b      	ldrb	r3, [r7, #1]
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d003      	beq.n	80014b6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80014ae:	887a      	ldrh	r2, [r7, #2]
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80014b4:	e003      	b.n	80014be <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80014b6:	887b      	ldrh	r3, [r7, #2]
 80014b8:	041a      	lsls	r2, r3, #16
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	611a      	str	r2, [r3, #16]
}
 80014be:	bf00      	nop
 80014c0:	370c      	adds	r7, #12
 80014c2:	46bd      	mov	sp, r7
 80014c4:	bc80      	pop	{r7}
 80014c6:	4770      	bx	lr

080014c8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80014c8:	b580      	push	{r7, lr}
 80014ca:	b082      	sub	sp, #8
 80014cc:	af00      	add	r7, sp, #0
 80014ce:	4603      	mov	r3, r0
 80014d0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80014d2:	4b08      	ldr	r3, [pc, #32]	; (80014f4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80014d4:	695a      	ldr	r2, [r3, #20]
 80014d6:	88fb      	ldrh	r3, [r7, #6]
 80014d8:	4013      	ands	r3, r2
 80014da:	2b00      	cmp	r3, #0
 80014dc:	d006      	beq.n	80014ec <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80014de:	4a05      	ldr	r2, [pc, #20]	; (80014f4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80014e0:	88fb      	ldrh	r3, [r7, #6]
 80014e2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80014e4:	88fb      	ldrh	r3, [r7, #6]
 80014e6:	4618      	mov	r0, r3
 80014e8:	f000 f806 	bl	80014f8 <HAL_GPIO_EXTI_Callback>
  }
}
 80014ec:	bf00      	nop
 80014ee:	3708      	adds	r7, #8
 80014f0:	46bd      	mov	sp, r7
 80014f2:	bd80      	pop	{r7, pc}
 80014f4:	40010400 	.word	0x40010400

080014f8 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80014f8:	b480      	push	{r7}
 80014fa:	b083      	sub	sp, #12
 80014fc:	af00      	add	r7, sp, #0
 80014fe:	4603      	mov	r3, r0
 8001500:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8001502:	bf00      	nop
 8001504:	370c      	adds	r7, #12
 8001506:	46bd      	mov	sp, r7
 8001508:	bc80      	pop	{r7}
 800150a:	4770      	bx	lr

0800150c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800150c:	b580      	push	{r7, lr}
 800150e:	b086      	sub	sp, #24
 8001510:	af00      	add	r7, sp, #0
 8001512:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	2b00      	cmp	r3, #0
 8001518:	d101      	bne.n	800151e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800151a:	2301      	movs	r3, #1
 800151c:	e26c      	b.n	80019f8 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	f003 0301 	and.w	r3, r3, #1
 8001526:	2b00      	cmp	r3, #0
 8001528:	f000 8087 	beq.w	800163a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800152c:	4b92      	ldr	r3, [pc, #584]	; (8001778 <HAL_RCC_OscConfig+0x26c>)
 800152e:	685b      	ldr	r3, [r3, #4]
 8001530:	f003 030c 	and.w	r3, r3, #12
 8001534:	2b04      	cmp	r3, #4
 8001536:	d00c      	beq.n	8001552 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001538:	4b8f      	ldr	r3, [pc, #572]	; (8001778 <HAL_RCC_OscConfig+0x26c>)
 800153a:	685b      	ldr	r3, [r3, #4]
 800153c:	f003 030c 	and.w	r3, r3, #12
 8001540:	2b08      	cmp	r3, #8
 8001542:	d112      	bne.n	800156a <HAL_RCC_OscConfig+0x5e>
 8001544:	4b8c      	ldr	r3, [pc, #560]	; (8001778 <HAL_RCC_OscConfig+0x26c>)
 8001546:	685b      	ldr	r3, [r3, #4]
 8001548:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800154c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001550:	d10b      	bne.n	800156a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001552:	4b89      	ldr	r3, [pc, #548]	; (8001778 <HAL_RCC_OscConfig+0x26c>)
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800155a:	2b00      	cmp	r3, #0
 800155c:	d06c      	beq.n	8001638 <HAL_RCC_OscConfig+0x12c>
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	685b      	ldr	r3, [r3, #4]
 8001562:	2b00      	cmp	r3, #0
 8001564:	d168      	bne.n	8001638 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001566:	2301      	movs	r3, #1
 8001568:	e246      	b.n	80019f8 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	685b      	ldr	r3, [r3, #4]
 800156e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001572:	d106      	bne.n	8001582 <HAL_RCC_OscConfig+0x76>
 8001574:	4b80      	ldr	r3, [pc, #512]	; (8001778 <HAL_RCC_OscConfig+0x26c>)
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	4a7f      	ldr	r2, [pc, #508]	; (8001778 <HAL_RCC_OscConfig+0x26c>)
 800157a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800157e:	6013      	str	r3, [r2, #0]
 8001580:	e02e      	b.n	80015e0 <HAL_RCC_OscConfig+0xd4>
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	685b      	ldr	r3, [r3, #4]
 8001586:	2b00      	cmp	r3, #0
 8001588:	d10c      	bne.n	80015a4 <HAL_RCC_OscConfig+0x98>
 800158a:	4b7b      	ldr	r3, [pc, #492]	; (8001778 <HAL_RCC_OscConfig+0x26c>)
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	4a7a      	ldr	r2, [pc, #488]	; (8001778 <HAL_RCC_OscConfig+0x26c>)
 8001590:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001594:	6013      	str	r3, [r2, #0]
 8001596:	4b78      	ldr	r3, [pc, #480]	; (8001778 <HAL_RCC_OscConfig+0x26c>)
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	4a77      	ldr	r2, [pc, #476]	; (8001778 <HAL_RCC_OscConfig+0x26c>)
 800159c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80015a0:	6013      	str	r3, [r2, #0]
 80015a2:	e01d      	b.n	80015e0 <HAL_RCC_OscConfig+0xd4>
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	685b      	ldr	r3, [r3, #4]
 80015a8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80015ac:	d10c      	bne.n	80015c8 <HAL_RCC_OscConfig+0xbc>
 80015ae:	4b72      	ldr	r3, [pc, #456]	; (8001778 <HAL_RCC_OscConfig+0x26c>)
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	4a71      	ldr	r2, [pc, #452]	; (8001778 <HAL_RCC_OscConfig+0x26c>)
 80015b4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80015b8:	6013      	str	r3, [r2, #0]
 80015ba:	4b6f      	ldr	r3, [pc, #444]	; (8001778 <HAL_RCC_OscConfig+0x26c>)
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	4a6e      	ldr	r2, [pc, #440]	; (8001778 <HAL_RCC_OscConfig+0x26c>)
 80015c0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80015c4:	6013      	str	r3, [r2, #0]
 80015c6:	e00b      	b.n	80015e0 <HAL_RCC_OscConfig+0xd4>
 80015c8:	4b6b      	ldr	r3, [pc, #428]	; (8001778 <HAL_RCC_OscConfig+0x26c>)
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	4a6a      	ldr	r2, [pc, #424]	; (8001778 <HAL_RCC_OscConfig+0x26c>)
 80015ce:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80015d2:	6013      	str	r3, [r2, #0]
 80015d4:	4b68      	ldr	r3, [pc, #416]	; (8001778 <HAL_RCC_OscConfig+0x26c>)
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	4a67      	ldr	r2, [pc, #412]	; (8001778 <HAL_RCC_OscConfig+0x26c>)
 80015da:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80015de:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	685b      	ldr	r3, [r3, #4]
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	d013      	beq.n	8001610 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015e8:	f7ff fcc2 	bl	8000f70 <HAL_GetTick>
 80015ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80015ee:	e008      	b.n	8001602 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80015f0:	f7ff fcbe 	bl	8000f70 <HAL_GetTick>
 80015f4:	4602      	mov	r2, r0
 80015f6:	693b      	ldr	r3, [r7, #16]
 80015f8:	1ad3      	subs	r3, r2, r3
 80015fa:	2b64      	cmp	r3, #100	; 0x64
 80015fc:	d901      	bls.n	8001602 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80015fe:	2303      	movs	r3, #3
 8001600:	e1fa      	b.n	80019f8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001602:	4b5d      	ldr	r3, [pc, #372]	; (8001778 <HAL_RCC_OscConfig+0x26c>)
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800160a:	2b00      	cmp	r3, #0
 800160c:	d0f0      	beq.n	80015f0 <HAL_RCC_OscConfig+0xe4>
 800160e:	e014      	b.n	800163a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001610:	f7ff fcae 	bl	8000f70 <HAL_GetTick>
 8001614:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001616:	e008      	b.n	800162a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001618:	f7ff fcaa 	bl	8000f70 <HAL_GetTick>
 800161c:	4602      	mov	r2, r0
 800161e:	693b      	ldr	r3, [r7, #16]
 8001620:	1ad3      	subs	r3, r2, r3
 8001622:	2b64      	cmp	r3, #100	; 0x64
 8001624:	d901      	bls.n	800162a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001626:	2303      	movs	r3, #3
 8001628:	e1e6      	b.n	80019f8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800162a:	4b53      	ldr	r3, [pc, #332]	; (8001778 <HAL_RCC_OscConfig+0x26c>)
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001632:	2b00      	cmp	r3, #0
 8001634:	d1f0      	bne.n	8001618 <HAL_RCC_OscConfig+0x10c>
 8001636:	e000      	b.n	800163a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001638:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	f003 0302 	and.w	r3, r3, #2
 8001642:	2b00      	cmp	r3, #0
 8001644:	d063      	beq.n	800170e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001646:	4b4c      	ldr	r3, [pc, #304]	; (8001778 <HAL_RCC_OscConfig+0x26c>)
 8001648:	685b      	ldr	r3, [r3, #4]
 800164a:	f003 030c 	and.w	r3, r3, #12
 800164e:	2b00      	cmp	r3, #0
 8001650:	d00b      	beq.n	800166a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001652:	4b49      	ldr	r3, [pc, #292]	; (8001778 <HAL_RCC_OscConfig+0x26c>)
 8001654:	685b      	ldr	r3, [r3, #4]
 8001656:	f003 030c 	and.w	r3, r3, #12
 800165a:	2b08      	cmp	r3, #8
 800165c:	d11c      	bne.n	8001698 <HAL_RCC_OscConfig+0x18c>
 800165e:	4b46      	ldr	r3, [pc, #280]	; (8001778 <HAL_RCC_OscConfig+0x26c>)
 8001660:	685b      	ldr	r3, [r3, #4]
 8001662:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001666:	2b00      	cmp	r3, #0
 8001668:	d116      	bne.n	8001698 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800166a:	4b43      	ldr	r3, [pc, #268]	; (8001778 <HAL_RCC_OscConfig+0x26c>)
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	f003 0302 	and.w	r3, r3, #2
 8001672:	2b00      	cmp	r3, #0
 8001674:	d005      	beq.n	8001682 <HAL_RCC_OscConfig+0x176>
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	691b      	ldr	r3, [r3, #16]
 800167a:	2b01      	cmp	r3, #1
 800167c:	d001      	beq.n	8001682 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800167e:	2301      	movs	r3, #1
 8001680:	e1ba      	b.n	80019f8 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001682:	4b3d      	ldr	r3, [pc, #244]	; (8001778 <HAL_RCC_OscConfig+0x26c>)
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	695b      	ldr	r3, [r3, #20]
 800168e:	00db      	lsls	r3, r3, #3
 8001690:	4939      	ldr	r1, [pc, #228]	; (8001778 <HAL_RCC_OscConfig+0x26c>)
 8001692:	4313      	orrs	r3, r2
 8001694:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001696:	e03a      	b.n	800170e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	691b      	ldr	r3, [r3, #16]
 800169c:	2b00      	cmp	r3, #0
 800169e:	d020      	beq.n	80016e2 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80016a0:	4b36      	ldr	r3, [pc, #216]	; (800177c <HAL_RCC_OscConfig+0x270>)
 80016a2:	2201      	movs	r2, #1
 80016a4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016a6:	f7ff fc63 	bl	8000f70 <HAL_GetTick>
 80016aa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80016ac:	e008      	b.n	80016c0 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80016ae:	f7ff fc5f 	bl	8000f70 <HAL_GetTick>
 80016b2:	4602      	mov	r2, r0
 80016b4:	693b      	ldr	r3, [r7, #16]
 80016b6:	1ad3      	subs	r3, r2, r3
 80016b8:	2b02      	cmp	r3, #2
 80016ba:	d901      	bls.n	80016c0 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80016bc:	2303      	movs	r3, #3
 80016be:	e19b      	b.n	80019f8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80016c0:	4b2d      	ldr	r3, [pc, #180]	; (8001778 <HAL_RCC_OscConfig+0x26c>)
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	f003 0302 	and.w	r3, r3, #2
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	d0f0      	beq.n	80016ae <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80016cc:	4b2a      	ldr	r3, [pc, #168]	; (8001778 <HAL_RCC_OscConfig+0x26c>)
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	695b      	ldr	r3, [r3, #20]
 80016d8:	00db      	lsls	r3, r3, #3
 80016da:	4927      	ldr	r1, [pc, #156]	; (8001778 <HAL_RCC_OscConfig+0x26c>)
 80016dc:	4313      	orrs	r3, r2
 80016de:	600b      	str	r3, [r1, #0]
 80016e0:	e015      	b.n	800170e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80016e2:	4b26      	ldr	r3, [pc, #152]	; (800177c <HAL_RCC_OscConfig+0x270>)
 80016e4:	2200      	movs	r2, #0
 80016e6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016e8:	f7ff fc42 	bl	8000f70 <HAL_GetTick>
 80016ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80016ee:	e008      	b.n	8001702 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80016f0:	f7ff fc3e 	bl	8000f70 <HAL_GetTick>
 80016f4:	4602      	mov	r2, r0
 80016f6:	693b      	ldr	r3, [r7, #16]
 80016f8:	1ad3      	subs	r3, r2, r3
 80016fa:	2b02      	cmp	r3, #2
 80016fc:	d901      	bls.n	8001702 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80016fe:	2303      	movs	r3, #3
 8001700:	e17a      	b.n	80019f8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001702:	4b1d      	ldr	r3, [pc, #116]	; (8001778 <HAL_RCC_OscConfig+0x26c>)
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	f003 0302 	and.w	r3, r3, #2
 800170a:	2b00      	cmp	r3, #0
 800170c:	d1f0      	bne.n	80016f0 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	f003 0308 	and.w	r3, r3, #8
 8001716:	2b00      	cmp	r3, #0
 8001718:	d03a      	beq.n	8001790 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	699b      	ldr	r3, [r3, #24]
 800171e:	2b00      	cmp	r3, #0
 8001720:	d019      	beq.n	8001756 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001722:	4b17      	ldr	r3, [pc, #92]	; (8001780 <HAL_RCC_OscConfig+0x274>)
 8001724:	2201      	movs	r2, #1
 8001726:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001728:	f7ff fc22 	bl	8000f70 <HAL_GetTick>
 800172c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800172e:	e008      	b.n	8001742 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001730:	f7ff fc1e 	bl	8000f70 <HAL_GetTick>
 8001734:	4602      	mov	r2, r0
 8001736:	693b      	ldr	r3, [r7, #16]
 8001738:	1ad3      	subs	r3, r2, r3
 800173a:	2b02      	cmp	r3, #2
 800173c:	d901      	bls.n	8001742 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800173e:	2303      	movs	r3, #3
 8001740:	e15a      	b.n	80019f8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001742:	4b0d      	ldr	r3, [pc, #52]	; (8001778 <HAL_RCC_OscConfig+0x26c>)
 8001744:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001746:	f003 0302 	and.w	r3, r3, #2
 800174a:	2b00      	cmp	r3, #0
 800174c:	d0f0      	beq.n	8001730 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800174e:	2001      	movs	r0, #1
 8001750:	f000 fada 	bl	8001d08 <RCC_Delay>
 8001754:	e01c      	b.n	8001790 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001756:	4b0a      	ldr	r3, [pc, #40]	; (8001780 <HAL_RCC_OscConfig+0x274>)
 8001758:	2200      	movs	r2, #0
 800175a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800175c:	f7ff fc08 	bl	8000f70 <HAL_GetTick>
 8001760:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001762:	e00f      	b.n	8001784 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001764:	f7ff fc04 	bl	8000f70 <HAL_GetTick>
 8001768:	4602      	mov	r2, r0
 800176a:	693b      	ldr	r3, [r7, #16]
 800176c:	1ad3      	subs	r3, r2, r3
 800176e:	2b02      	cmp	r3, #2
 8001770:	d908      	bls.n	8001784 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001772:	2303      	movs	r3, #3
 8001774:	e140      	b.n	80019f8 <HAL_RCC_OscConfig+0x4ec>
 8001776:	bf00      	nop
 8001778:	40021000 	.word	0x40021000
 800177c:	42420000 	.word	0x42420000
 8001780:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001784:	4b9e      	ldr	r3, [pc, #632]	; (8001a00 <HAL_RCC_OscConfig+0x4f4>)
 8001786:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001788:	f003 0302 	and.w	r3, r3, #2
 800178c:	2b00      	cmp	r3, #0
 800178e:	d1e9      	bne.n	8001764 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	f003 0304 	and.w	r3, r3, #4
 8001798:	2b00      	cmp	r3, #0
 800179a:	f000 80a6 	beq.w	80018ea <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800179e:	2300      	movs	r3, #0
 80017a0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80017a2:	4b97      	ldr	r3, [pc, #604]	; (8001a00 <HAL_RCC_OscConfig+0x4f4>)
 80017a4:	69db      	ldr	r3, [r3, #28]
 80017a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d10d      	bne.n	80017ca <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80017ae:	4b94      	ldr	r3, [pc, #592]	; (8001a00 <HAL_RCC_OscConfig+0x4f4>)
 80017b0:	69db      	ldr	r3, [r3, #28]
 80017b2:	4a93      	ldr	r2, [pc, #588]	; (8001a00 <HAL_RCC_OscConfig+0x4f4>)
 80017b4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80017b8:	61d3      	str	r3, [r2, #28]
 80017ba:	4b91      	ldr	r3, [pc, #580]	; (8001a00 <HAL_RCC_OscConfig+0x4f4>)
 80017bc:	69db      	ldr	r3, [r3, #28]
 80017be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017c2:	60bb      	str	r3, [r7, #8]
 80017c4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80017c6:	2301      	movs	r3, #1
 80017c8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80017ca:	4b8e      	ldr	r3, [pc, #568]	; (8001a04 <HAL_RCC_OscConfig+0x4f8>)
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d118      	bne.n	8001808 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80017d6:	4b8b      	ldr	r3, [pc, #556]	; (8001a04 <HAL_RCC_OscConfig+0x4f8>)
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	4a8a      	ldr	r2, [pc, #552]	; (8001a04 <HAL_RCC_OscConfig+0x4f8>)
 80017dc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80017e0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80017e2:	f7ff fbc5 	bl	8000f70 <HAL_GetTick>
 80017e6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80017e8:	e008      	b.n	80017fc <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80017ea:	f7ff fbc1 	bl	8000f70 <HAL_GetTick>
 80017ee:	4602      	mov	r2, r0
 80017f0:	693b      	ldr	r3, [r7, #16]
 80017f2:	1ad3      	subs	r3, r2, r3
 80017f4:	2b64      	cmp	r3, #100	; 0x64
 80017f6:	d901      	bls.n	80017fc <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80017f8:	2303      	movs	r3, #3
 80017fa:	e0fd      	b.n	80019f8 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80017fc:	4b81      	ldr	r3, [pc, #516]	; (8001a04 <HAL_RCC_OscConfig+0x4f8>)
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001804:	2b00      	cmp	r3, #0
 8001806:	d0f0      	beq.n	80017ea <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	68db      	ldr	r3, [r3, #12]
 800180c:	2b01      	cmp	r3, #1
 800180e:	d106      	bne.n	800181e <HAL_RCC_OscConfig+0x312>
 8001810:	4b7b      	ldr	r3, [pc, #492]	; (8001a00 <HAL_RCC_OscConfig+0x4f4>)
 8001812:	6a1b      	ldr	r3, [r3, #32]
 8001814:	4a7a      	ldr	r2, [pc, #488]	; (8001a00 <HAL_RCC_OscConfig+0x4f4>)
 8001816:	f043 0301 	orr.w	r3, r3, #1
 800181a:	6213      	str	r3, [r2, #32]
 800181c:	e02d      	b.n	800187a <HAL_RCC_OscConfig+0x36e>
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	68db      	ldr	r3, [r3, #12]
 8001822:	2b00      	cmp	r3, #0
 8001824:	d10c      	bne.n	8001840 <HAL_RCC_OscConfig+0x334>
 8001826:	4b76      	ldr	r3, [pc, #472]	; (8001a00 <HAL_RCC_OscConfig+0x4f4>)
 8001828:	6a1b      	ldr	r3, [r3, #32]
 800182a:	4a75      	ldr	r2, [pc, #468]	; (8001a00 <HAL_RCC_OscConfig+0x4f4>)
 800182c:	f023 0301 	bic.w	r3, r3, #1
 8001830:	6213      	str	r3, [r2, #32]
 8001832:	4b73      	ldr	r3, [pc, #460]	; (8001a00 <HAL_RCC_OscConfig+0x4f4>)
 8001834:	6a1b      	ldr	r3, [r3, #32]
 8001836:	4a72      	ldr	r2, [pc, #456]	; (8001a00 <HAL_RCC_OscConfig+0x4f4>)
 8001838:	f023 0304 	bic.w	r3, r3, #4
 800183c:	6213      	str	r3, [r2, #32]
 800183e:	e01c      	b.n	800187a <HAL_RCC_OscConfig+0x36e>
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	68db      	ldr	r3, [r3, #12]
 8001844:	2b05      	cmp	r3, #5
 8001846:	d10c      	bne.n	8001862 <HAL_RCC_OscConfig+0x356>
 8001848:	4b6d      	ldr	r3, [pc, #436]	; (8001a00 <HAL_RCC_OscConfig+0x4f4>)
 800184a:	6a1b      	ldr	r3, [r3, #32]
 800184c:	4a6c      	ldr	r2, [pc, #432]	; (8001a00 <HAL_RCC_OscConfig+0x4f4>)
 800184e:	f043 0304 	orr.w	r3, r3, #4
 8001852:	6213      	str	r3, [r2, #32]
 8001854:	4b6a      	ldr	r3, [pc, #424]	; (8001a00 <HAL_RCC_OscConfig+0x4f4>)
 8001856:	6a1b      	ldr	r3, [r3, #32]
 8001858:	4a69      	ldr	r2, [pc, #420]	; (8001a00 <HAL_RCC_OscConfig+0x4f4>)
 800185a:	f043 0301 	orr.w	r3, r3, #1
 800185e:	6213      	str	r3, [r2, #32]
 8001860:	e00b      	b.n	800187a <HAL_RCC_OscConfig+0x36e>
 8001862:	4b67      	ldr	r3, [pc, #412]	; (8001a00 <HAL_RCC_OscConfig+0x4f4>)
 8001864:	6a1b      	ldr	r3, [r3, #32]
 8001866:	4a66      	ldr	r2, [pc, #408]	; (8001a00 <HAL_RCC_OscConfig+0x4f4>)
 8001868:	f023 0301 	bic.w	r3, r3, #1
 800186c:	6213      	str	r3, [r2, #32]
 800186e:	4b64      	ldr	r3, [pc, #400]	; (8001a00 <HAL_RCC_OscConfig+0x4f4>)
 8001870:	6a1b      	ldr	r3, [r3, #32]
 8001872:	4a63      	ldr	r2, [pc, #396]	; (8001a00 <HAL_RCC_OscConfig+0x4f4>)
 8001874:	f023 0304 	bic.w	r3, r3, #4
 8001878:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	68db      	ldr	r3, [r3, #12]
 800187e:	2b00      	cmp	r3, #0
 8001880:	d015      	beq.n	80018ae <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001882:	f7ff fb75 	bl	8000f70 <HAL_GetTick>
 8001886:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001888:	e00a      	b.n	80018a0 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800188a:	f7ff fb71 	bl	8000f70 <HAL_GetTick>
 800188e:	4602      	mov	r2, r0
 8001890:	693b      	ldr	r3, [r7, #16]
 8001892:	1ad3      	subs	r3, r2, r3
 8001894:	f241 3288 	movw	r2, #5000	; 0x1388
 8001898:	4293      	cmp	r3, r2
 800189a:	d901      	bls.n	80018a0 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800189c:	2303      	movs	r3, #3
 800189e:	e0ab      	b.n	80019f8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80018a0:	4b57      	ldr	r3, [pc, #348]	; (8001a00 <HAL_RCC_OscConfig+0x4f4>)
 80018a2:	6a1b      	ldr	r3, [r3, #32]
 80018a4:	f003 0302 	and.w	r3, r3, #2
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	d0ee      	beq.n	800188a <HAL_RCC_OscConfig+0x37e>
 80018ac:	e014      	b.n	80018d8 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80018ae:	f7ff fb5f 	bl	8000f70 <HAL_GetTick>
 80018b2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80018b4:	e00a      	b.n	80018cc <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80018b6:	f7ff fb5b 	bl	8000f70 <HAL_GetTick>
 80018ba:	4602      	mov	r2, r0
 80018bc:	693b      	ldr	r3, [r7, #16]
 80018be:	1ad3      	subs	r3, r2, r3
 80018c0:	f241 3288 	movw	r2, #5000	; 0x1388
 80018c4:	4293      	cmp	r3, r2
 80018c6:	d901      	bls.n	80018cc <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80018c8:	2303      	movs	r3, #3
 80018ca:	e095      	b.n	80019f8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80018cc:	4b4c      	ldr	r3, [pc, #304]	; (8001a00 <HAL_RCC_OscConfig+0x4f4>)
 80018ce:	6a1b      	ldr	r3, [r3, #32]
 80018d0:	f003 0302 	and.w	r3, r3, #2
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	d1ee      	bne.n	80018b6 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80018d8:	7dfb      	ldrb	r3, [r7, #23]
 80018da:	2b01      	cmp	r3, #1
 80018dc:	d105      	bne.n	80018ea <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80018de:	4b48      	ldr	r3, [pc, #288]	; (8001a00 <HAL_RCC_OscConfig+0x4f4>)
 80018e0:	69db      	ldr	r3, [r3, #28]
 80018e2:	4a47      	ldr	r2, [pc, #284]	; (8001a00 <HAL_RCC_OscConfig+0x4f4>)
 80018e4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80018e8:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	69db      	ldr	r3, [r3, #28]
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	f000 8081 	beq.w	80019f6 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80018f4:	4b42      	ldr	r3, [pc, #264]	; (8001a00 <HAL_RCC_OscConfig+0x4f4>)
 80018f6:	685b      	ldr	r3, [r3, #4]
 80018f8:	f003 030c 	and.w	r3, r3, #12
 80018fc:	2b08      	cmp	r3, #8
 80018fe:	d061      	beq.n	80019c4 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	69db      	ldr	r3, [r3, #28]
 8001904:	2b02      	cmp	r3, #2
 8001906:	d146      	bne.n	8001996 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001908:	4b3f      	ldr	r3, [pc, #252]	; (8001a08 <HAL_RCC_OscConfig+0x4fc>)
 800190a:	2200      	movs	r2, #0
 800190c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800190e:	f7ff fb2f 	bl	8000f70 <HAL_GetTick>
 8001912:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001914:	e008      	b.n	8001928 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001916:	f7ff fb2b 	bl	8000f70 <HAL_GetTick>
 800191a:	4602      	mov	r2, r0
 800191c:	693b      	ldr	r3, [r7, #16]
 800191e:	1ad3      	subs	r3, r2, r3
 8001920:	2b02      	cmp	r3, #2
 8001922:	d901      	bls.n	8001928 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001924:	2303      	movs	r3, #3
 8001926:	e067      	b.n	80019f8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001928:	4b35      	ldr	r3, [pc, #212]	; (8001a00 <HAL_RCC_OscConfig+0x4f4>)
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001930:	2b00      	cmp	r3, #0
 8001932:	d1f0      	bne.n	8001916 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	6a1b      	ldr	r3, [r3, #32]
 8001938:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800193c:	d108      	bne.n	8001950 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800193e:	4b30      	ldr	r3, [pc, #192]	; (8001a00 <HAL_RCC_OscConfig+0x4f4>)
 8001940:	685b      	ldr	r3, [r3, #4]
 8001942:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	689b      	ldr	r3, [r3, #8]
 800194a:	492d      	ldr	r1, [pc, #180]	; (8001a00 <HAL_RCC_OscConfig+0x4f4>)
 800194c:	4313      	orrs	r3, r2
 800194e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001950:	4b2b      	ldr	r3, [pc, #172]	; (8001a00 <HAL_RCC_OscConfig+0x4f4>)
 8001952:	685b      	ldr	r3, [r3, #4]
 8001954:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	6a19      	ldr	r1, [r3, #32]
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001960:	430b      	orrs	r3, r1
 8001962:	4927      	ldr	r1, [pc, #156]	; (8001a00 <HAL_RCC_OscConfig+0x4f4>)
 8001964:	4313      	orrs	r3, r2
 8001966:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001968:	4b27      	ldr	r3, [pc, #156]	; (8001a08 <HAL_RCC_OscConfig+0x4fc>)
 800196a:	2201      	movs	r2, #1
 800196c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800196e:	f7ff faff 	bl	8000f70 <HAL_GetTick>
 8001972:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001974:	e008      	b.n	8001988 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001976:	f7ff fafb 	bl	8000f70 <HAL_GetTick>
 800197a:	4602      	mov	r2, r0
 800197c:	693b      	ldr	r3, [r7, #16]
 800197e:	1ad3      	subs	r3, r2, r3
 8001980:	2b02      	cmp	r3, #2
 8001982:	d901      	bls.n	8001988 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001984:	2303      	movs	r3, #3
 8001986:	e037      	b.n	80019f8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001988:	4b1d      	ldr	r3, [pc, #116]	; (8001a00 <HAL_RCC_OscConfig+0x4f4>)
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001990:	2b00      	cmp	r3, #0
 8001992:	d0f0      	beq.n	8001976 <HAL_RCC_OscConfig+0x46a>
 8001994:	e02f      	b.n	80019f6 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001996:	4b1c      	ldr	r3, [pc, #112]	; (8001a08 <HAL_RCC_OscConfig+0x4fc>)
 8001998:	2200      	movs	r2, #0
 800199a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800199c:	f7ff fae8 	bl	8000f70 <HAL_GetTick>
 80019a0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80019a2:	e008      	b.n	80019b6 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80019a4:	f7ff fae4 	bl	8000f70 <HAL_GetTick>
 80019a8:	4602      	mov	r2, r0
 80019aa:	693b      	ldr	r3, [r7, #16]
 80019ac:	1ad3      	subs	r3, r2, r3
 80019ae:	2b02      	cmp	r3, #2
 80019b0:	d901      	bls.n	80019b6 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80019b2:	2303      	movs	r3, #3
 80019b4:	e020      	b.n	80019f8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80019b6:	4b12      	ldr	r3, [pc, #72]	; (8001a00 <HAL_RCC_OscConfig+0x4f4>)
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d1f0      	bne.n	80019a4 <HAL_RCC_OscConfig+0x498>
 80019c2:	e018      	b.n	80019f6 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	69db      	ldr	r3, [r3, #28]
 80019c8:	2b01      	cmp	r3, #1
 80019ca:	d101      	bne.n	80019d0 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 80019cc:	2301      	movs	r3, #1
 80019ce:	e013      	b.n	80019f8 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80019d0:	4b0b      	ldr	r3, [pc, #44]	; (8001a00 <HAL_RCC_OscConfig+0x4f4>)
 80019d2:	685b      	ldr	r3, [r3, #4]
 80019d4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80019d6:	68fb      	ldr	r3, [r7, #12]
 80019d8:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	6a1b      	ldr	r3, [r3, #32]
 80019e0:	429a      	cmp	r2, r3
 80019e2:	d106      	bne.n	80019f2 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80019e4:	68fb      	ldr	r3, [r7, #12]
 80019e6:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80019ee:	429a      	cmp	r2, r3
 80019f0:	d001      	beq.n	80019f6 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 80019f2:	2301      	movs	r3, #1
 80019f4:	e000      	b.n	80019f8 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 80019f6:	2300      	movs	r3, #0
}
 80019f8:	4618      	mov	r0, r3
 80019fa:	3718      	adds	r7, #24
 80019fc:	46bd      	mov	sp, r7
 80019fe:	bd80      	pop	{r7, pc}
 8001a00:	40021000 	.word	0x40021000
 8001a04:	40007000 	.word	0x40007000
 8001a08:	42420060 	.word	0x42420060

08001a0c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001a0c:	b580      	push	{r7, lr}
 8001a0e:	b084      	sub	sp, #16
 8001a10:	af00      	add	r7, sp, #0
 8001a12:	6078      	str	r0, [r7, #4]
 8001a14:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	d101      	bne.n	8001a20 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001a1c:	2301      	movs	r3, #1
 8001a1e:	e0d0      	b.n	8001bc2 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001a20:	4b6a      	ldr	r3, [pc, #424]	; (8001bcc <HAL_RCC_ClockConfig+0x1c0>)
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	f003 0307 	and.w	r3, r3, #7
 8001a28:	683a      	ldr	r2, [r7, #0]
 8001a2a:	429a      	cmp	r2, r3
 8001a2c:	d910      	bls.n	8001a50 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a2e:	4b67      	ldr	r3, [pc, #412]	; (8001bcc <HAL_RCC_ClockConfig+0x1c0>)
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	f023 0207 	bic.w	r2, r3, #7
 8001a36:	4965      	ldr	r1, [pc, #404]	; (8001bcc <HAL_RCC_ClockConfig+0x1c0>)
 8001a38:	683b      	ldr	r3, [r7, #0]
 8001a3a:	4313      	orrs	r3, r2
 8001a3c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a3e:	4b63      	ldr	r3, [pc, #396]	; (8001bcc <HAL_RCC_ClockConfig+0x1c0>)
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	f003 0307 	and.w	r3, r3, #7
 8001a46:	683a      	ldr	r2, [r7, #0]
 8001a48:	429a      	cmp	r2, r3
 8001a4a:	d001      	beq.n	8001a50 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001a4c:	2301      	movs	r3, #1
 8001a4e:	e0b8      	b.n	8001bc2 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	f003 0302 	and.w	r3, r3, #2
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d020      	beq.n	8001a9e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	f003 0304 	and.w	r3, r3, #4
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	d005      	beq.n	8001a74 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001a68:	4b59      	ldr	r3, [pc, #356]	; (8001bd0 <HAL_RCC_ClockConfig+0x1c4>)
 8001a6a:	685b      	ldr	r3, [r3, #4]
 8001a6c:	4a58      	ldr	r2, [pc, #352]	; (8001bd0 <HAL_RCC_ClockConfig+0x1c4>)
 8001a6e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001a72:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	f003 0308 	and.w	r3, r3, #8
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	d005      	beq.n	8001a8c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001a80:	4b53      	ldr	r3, [pc, #332]	; (8001bd0 <HAL_RCC_ClockConfig+0x1c4>)
 8001a82:	685b      	ldr	r3, [r3, #4]
 8001a84:	4a52      	ldr	r2, [pc, #328]	; (8001bd0 <HAL_RCC_ClockConfig+0x1c4>)
 8001a86:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001a8a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001a8c:	4b50      	ldr	r3, [pc, #320]	; (8001bd0 <HAL_RCC_ClockConfig+0x1c4>)
 8001a8e:	685b      	ldr	r3, [r3, #4]
 8001a90:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	689b      	ldr	r3, [r3, #8]
 8001a98:	494d      	ldr	r1, [pc, #308]	; (8001bd0 <HAL_RCC_ClockConfig+0x1c4>)
 8001a9a:	4313      	orrs	r3, r2
 8001a9c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	f003 0301 	and.w	r3, r3, #1
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d040      	beq.n	8001b2c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	685b      	ldr	r3, [r3, #4]
 8001aae:	2b01      	cmp	r3, #1
 8001ab0:	d107      	bne.n	8001ac2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ab2:	4b47      	ldr	r3, [pc, #284]	; (8001bd0 <HAL_RCC_ClockConfig+0x1c4>)
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d115      	bne.n	8001aea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001abe:	2301      	movs	r3, #1
 8001ac0:	e07f      	b.n	8001bc2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	685b      	ldr	r3, [r3, #4]
 8001ac6:	2b02      	cmp	r3, #2
 8001ac8:	d107      	bne.n	8001ada <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001aca:	4b41      	ldr	r3, [pc, #260]	; (8001bd0 <HAL_RCC_ClockConfig+0x1c4>)
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d109      	bne.n	8001aea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001ad6:	2301      	movs	r3, #1
 8001ad8:	e073      	b.n	8001bc2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ada:	4b3d      	ldr	r3, [pc, #244]	; (8001bd0 <HAL_RCC_ClockConfig+0x1c4>)
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	f003 0302 	and.w	r3, r3, #2
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d101      	bne.n	8001aea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001ae6:	2301      	movs	r3, #1
 8001ae8:	e06b      	b.n	8001bc2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001aea:	4b39      	ldr	r3, [pc, #228]	; (8001bd0 <HAL_RCC_ClockConfig+0x1c4>)
 8001aec:	685b      	ldr	r3, [r3, #4]
 8001aee:	f023 0203 	bic.w	r2, r3, #3
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	685b      	ldr	r3, [r3, #4]
 8001af6:	4936      	ldr	r1, [pc, #216]	; (8001bd0 <HAL_RCC_ClockConfig+0x1c4>)
 8001af8:	4313      	orrs	r3, r2
 8001afa:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001afc:	f7ff fa38 	bl	8000f70 <HAL_GetTick>
 8001b00:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b02:	e00a      	b.n	8001b1a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001b04:	f7ff fa34 	bl	8000f70 <HAL_GetTick>
 8001b08:	4602      	mov	r2, r0
 8001b0a:	68fb      	ldr	r3, [r7, #12]
 8001b0c:	1ad3      	subs	r3, r2, r3
 8001b0e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b12:	4293      	cmp	r3, r2
 8001b14:	d901      	bls.n	8001b1a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001b16:	2303      	movs	r3, #3
 8001b18:	e053      	b.n	8001bc2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b1a:	4b2d      	ldr	r3, [pc, #180]	; (8001bd0 <HAL_RCC_ClockConfig+0x1c4>)
 8001b1c:	685b      	ldr	r3, [r3, #4]
 8001b1e:	f003 020c 	and.w	r2, r3, #12
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	685b      	ldr	r3, [r3, #4]
 8001b26:	009b      	lsls	r3, r3, #2
 8001b28:	429a      	cmp	r2, r3
 8001b2a:	d1eb      	bne.n	8001b04 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001b2c:	4b27      	ldr	r3, [pc, #156]	; (8001bcc <HAL_RCC_ClockConfig+0x1c0>)
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	f003 0307 	and.w	r3, r3, #7
 8001b34:	683a      	ldr	r2, [r7, #0]
 8001b36:	429a      	cmp	r2, r3
 8001b38:	d210      	bcs.n	8001b5c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b3a:	4b24      	ldr	r3, [pc, #144]	; (8001bcc <HAL_RCC_ClockConfig+0x1c0>)
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	f023 0207 	bic.w	r2, r3, #7
 8001b42:	4922      	ldr	r1, [pc, #136]	; (8001bcc <HAL_RCC_ClockConfig+0x1c0>)
 8001b44:	683b      	ldr	r3, [r7, #0]
 8001b46:	4313      	orrs	r3, r2
 8001b48:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b4a:	4b20      	ldr	r3, [pc, #128]	; (8001bcc <HAL_RCC_ClockConfig+0x1c0>)
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	f003 0307 	and.w	r3, r3, #7
 8001b52:	683a      	ldr	r2, [r7, #0]
 8001b54:	429a      	cmp	r2, r3
 8001b56:	d001      	beq.n	8001b5c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001b58:	2301      	movs	r3, #1
 8001b5a:	e032      	b.n	8001bc2 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	f003 0304 	and.w	r3, r3, #4
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	d008      	beq.n	8001b7a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001b68:	4b19      	ldr	r3, [pc, #100]	; (8001bd0 <HAL_RCC_ClockConfig+0x1c4>)
 8001b6a:	685b      	ldr	r3, [r3, #4]
 8001b6c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	68db      	ldr	r3, [r3, #12]
 8001b74:	4916      	ldr	r1, [pc, #88]	; (8001bd0 <HAL_RCC_ClockConfig+0x1c4>)
 8001b76:	4313      	orrs	r3, r2
 8001b78:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	f003 0308 	and.w	r3, r3, #8
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d009      	beq.n	8001b9a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001b86:	4b12      	ldr	r3, [pc, #72]	; (8001bd0 <HAL_RCC_ClockConfig+0x1c4>)
 8001b88:	685b      	ldr	r3, [r3, #4]
 8001b8a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	691b      	ldr	r3, [r3, #16]
 8001b92:	00db      	lsls	r3, r3, #3
 8001b94:	490e      	ldr	r1, [pc, #56]	; (8001bd0 <HAL_RCC_ClockConfig+0x1c4>)
 8001b96:	4313      	orrs	r3, r2
 8001b98:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001b9a:	f000 f821 	bl	8001be0 <HAL_RCC_GetSysClockFreq>
 8001b9e:	4601      	mov	r1, r0
 8001ba0:	4b0b      	ldr	r3, [pc, #44]	; (8001bd0 <HAL_RCC_ClockConfig+0x1c4>)
 8001ba2:	685b      	ldr	r3, [r3, #4]
 8001ba4:	091b      	lsrs	r3, r3, #4
 8001ba6:	f003 030f 	and.w	r3, r3, #15
 8001baa:	4a0a      	ldr	r2, [pc, #40]	; (8001bd4 <HAL_RCC_ClockConfig+0x1c8>)
 8001bac:	5cd3      	ldrb	r3, [r2, r3]
 8001bae:	fa21 f303 	lsr.w	r3, r1, r3
 8001bb2:	4a09      	ldr	r2, [pc, #36]	; (8001bd8 <HAL_RCC_ClockConfig+0x1cc>)
 8001bb4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001bb6:	4b09      	ldr	r3, [pc, #36]	; (8001bdc <HAL_RCC_ClockConfig+0x1d0>)
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	4618      	mov	r0, r3
 8001bbc:	f7ff f996 	bl	8000eec <HAL_InitTick>

  return HAL_OK;
 8001bc0:	2300      	movs	r3, #0
}
 8001bc2:	4618      	mov	r0, r3
 8001bc4:	3710      	adds	r7, #16
 8001bc6:	46bd      	mov	sp, r7
 8001bc8:	bd80      	pop	{r7, pc}
 8001bca:	bf00      	nop
 8001bcc:	40022000 	.word	0x40022000
 8001bd0:	40021000 	.word	0x40021000
 8001bd4:	080041cc 	.word	0x080041cc
 8001bd8:	20000008 	.word	0x20000008
 8001bdc:	2000000c 	.word	0x2000000c

08001be0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001be0:	b490      	push	{r4, r7}
 8001be2:	b08a      	sub	sp, #40	; 0x28
 8001be4:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001be6:	4b2a      	ldr	r3, [pc, #168]	; (8001c90 <HAL_RCC_GetSysClockFreq+0xb0>)
 8001be8:	1d3c      	adds	r4, r7, #4
 8001bea:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001bec:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001bf0:	4b28      	ldr	r3, [pc, #160]	; (8001c94 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001bf2:	881b      	ldrh	r3, [r3, #0]
 8001bf4:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001bf6:	2300      	movs	r3, #0
 8001bf8:	61fb      	str	r3, [r7, #28]
 8001bfa:	2300      	movs	r3, #0
 8001bfc:	61bb      	str	r3, [r7, #24]
 8001bfe:	2300      	movs	r3, #0
 8001c00:	627b      	str	r3, [r7, #36]	; 0x24
 8001c02:	2300      	movs	r3, #0
 8001c04:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8001c06:	2300      	movs	r3, #0
 8001c08:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001c0a:	4b23      	ldr	r3, [pc, #140]	; (8001c98 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001c0c:	685b      	ldr	r3, [r3, #4]
 8001c0e:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001c10:	69fb      	ldr	r3, [r7, #28]
 8001c12:	f003 030c 	and.w	r3, r3, #12
 8001c16:	2b04      	cmp	r3, #4
 8001c18:	d002      	beq.n	8001c20 <HAL_RCC_GetSysClockFreq+0x40>
 8001c1a:	2b08      	cmp	r3, #8
 8001c1c:	d003      	beq.n	8001c26 <HAL_RCC_GetSysClockFreq+0x46>
 8001c1e:	e02d      	b.n	8001c7c <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001c20:	4b1e      	ldr	r3, [pc, #120]	; (8001c9c <HAL_RCC_GetSysClockFreq+0xbc>)
 8001c22:	623b      	str	r3, [r7, #32]
      break;
 8001c24:	e02d      	b.n	8001c82 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001c26:	69fb      	ldr	r3, [r7, #28]
 8001c28:	0c9b      	lsrs	r3, r3, #18
 8001c2a:	f003 030f 	and.w	r3, r3, #15
 8001c2e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001c32:	4413      	add	r3, r2
 8001c34:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001c38:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001c3a:	69fb      	ldr	r3, [r7, #28]
 8001c3c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d013      	beq.n	8001c6c <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001c44:	4b14      	ldr	r3, [pc, #80]	; (8001c98 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001c46:	685b      	ldr	r3, [r3, #4]
 8001c48:	0c5b      	lsrs	r3, r3, #17
 8001c4a:	f003 0301 	and.w	r3, r3, #1
 8001c4e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001c52:	4413      	add	r3, r2
 8001c54:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8001c58:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001c5a:	697b      	ldr	r3, [r7, #20]
 8001c5c:	4a0f      	ldr	r2, [pc, #60]	; (8001c9c <HAL_RCC_GetSysClockFreq+0xbc>)
 8001c5e:	fb02 f203 	mul.w	r2, r2, r3
 8001c62:	69bb      	ldr	r3, [r7, #24]
 8001c64:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c68:	627b      	str	r3, [r7, #36]	; 0x24
 8001c6a:	e004      	b.n	8001c76 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001c6c:	697b      	ldr	r3, [r7, #20]
 8001c6e:	4a0c      	ldr	r2, [pc, #48]	; (8001ca0 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001c70:	fb02 f303 	mul.w	r3, r2, r3
 8001c74:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8001c76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c78:	623b      	str	r3, [r7, #32]
      break;
 8001c7a:	e002      	b.n	8001c82 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001c7c:	4b07      	ldr	r3, [pc, #28]	; (8001c9c <HAL_RCC_GetSysClockFreq+0xbc>)
 8001c7e:	623b      	str	r3, [r7, #32]
      break;
 8001c80:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001c82:	6a3b      	ldr	r3, [r7, #32]
}
 8001c84:	4618      	mov	r0, r3
 8001c86:	3728      	adds	r7, #40	; 0x28
 8001c88:	46bd      	mov	sp, r7
 8001c8a:	bc90      	pop	{r4, r7}
 8001c8c:	4770      	bx	lr
 8001c8e:	bf00      	nop
 8001c90:	080041b8 	.word	0x080041b8
 8001c94:	080041c8 	.word	0x080041c8
 8001c98:	40021000 	.word	0x40021000
 8001c9c:	007a1200 	.word	0x007a1200
 8001ca0:	003d0900 	.word	0x003d0900

08001ca4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001ca4:	b480      	push	{r7}
 8001ca6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001ca8:	4b02      	ldr	r3, [pc, #8]	; (8001cb4 <HAL_RCC_GetHCLKFreq+0x10>)
 8001caa:	681b      	ldr	r3, [r3, #0]
}
 8001cac:	4618      	mov	r0, r3
 8001cae:	46bd      	mov	sp, r7
 8001cb0:	bc80      	pop	{r7}
 8001cb2:	4770      	bx	lr
 8001cb4:	20000008 	.word	0x20000008

08001cb8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001cb8:	b580      	push	{r7, lr}
 8001cba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001cbc:	f7ff fff2 	bl	8001ca4 <HAL_RCC_GetHCLKFreq>
 8001cc0:	4601      	mov	r1, r0
 8001cc2:	4b05      	ldr	r3, [pc, #20]	; (8001cd8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001cc4:	685b      	ldr	r3, [r3, #4]
 8001cc6:	0a1b      	lsrs	r3, r3, #8
 8001cc8:	f003 0307 	and.w	r3, r3, #7
 8001ccc:	4a03      	ldr	r2, [pc, #12]	; (8001cdc <HAL_RCC_GetPCLK1Freq+0x24>)
 8001cce:	5cd3      	ldrb	r3, [r2, r3]
 8001cd0:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001cd4:	4618      	mov	r0, r3
 8001cd6:	bd80      	pop	{r7, pc}
 8001cd8:	40021000 	.word	0x40021000
 8001cdc:	080041dc 	.word	0x080041dc

08001ce0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001ce0:	b580      	push	{r7, lr}
 8001ce2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001ce4:	f7ff ffde 	bl	8001ca4 <HAL_RCC_GetHCLKFreq>
 8001ce8:	4601      	mov	r1, r0
 8001cea:	4b05      	ldr	r3, [pc, #20]	; (8001d00 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001cec:	685b      	ldr	r3, [r3, #4]
 8001cee:	0adb      	lsrs	r3, r3, #11
 8001cf0:	f003 0307 	and.w	r3, r3, #7
 8001cf4:	4a03      	ldr	r2, [pc, #12]	; (8001d04 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001cf6:	5cd3      	ldrb	r3, [r2, r3]
 8001cf8:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001cfc:	4618      	mov	r0, r3
 8001cfe:	bd80      	pop	{r7, pc}
 8001d00:	40021000 	.word	0x40021000
 8001d04:	080041dc 	.word	0x080041dc

08001d08 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001d08:	b480      	push	{r7}
 8001d0a:	b085      	sub	sp, #20
 8001d0c:	af00      	add	r7, sp, #0
 8001d0e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001d10:	4b0a      	ldr	r3, [pc, #40]	; (8001d3c <RCC_Delay+0x34>)
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	4a0a      	ldr	r2, [pc, #40]	; (8001d40 <RCC_Delay+0x38>)
 8001d16:	fba2 2303 	umull	r2, r3, r2, r3
 8001d1a:	0a5b      	lsrs	r3, r3, #9
 8001d1c:	687a      	ldr	r2, [r7, #4]
 8001d1e:	fb02 f303 	mul.w	r3, r2, r3
 8001d22:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001d24:	bf00      	nop
  }
  while (Delay --);
 8001d26:	68fb      	ldr	r3, [r7, #12]
 8001d28:	1e5a      	subs	r2, r3, #1
 8001d2a:	60fa      	str	r2, [r7, #12]
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d1f9      	bne.n	8001d24 <RCC_Delay+0x1c>
}
 8001d30:	bf00      	nop
 8001d32:	3714      	adds	r7, #20
 8001d34:	46bd      	mov	sp, r7
 8001d36:	bc80      	pop	{r7}
 8001d38:	4770      	bx	lr
 8001d3a:	bf00      	nop
 8001d3c:	20000008 	.word	0x20000008
 8001d40:	10624dd3 	.word	0x10624dd3

08001d44 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001d44:	b580      	push	{r7, lr}
 8001d46:	b082      	sub	sp, #8
 8001d48:	af00      	add	r7, sp, #0
 8001d4a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d101      	bne.n	8001d56 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001d52:	2301      	movs	r3, #1
 8001d54:	e03f      	b.n	8001dd6 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8001d5c:	b2db      	uxtb	r3, r3
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d106      	bne.n	8001d70 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	2200      	movs	r2, #0
 8001d66:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001d6a:	6878      	ldr	r0, [r7, #4]
 8001d6c:	f7fe ffd6 	bl	8000d1c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	2224      	movs	r2, #36	; 0x24
 8001d74:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	68da      	ldr	r2, [r3, #12]
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001d86:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001d88:	6878      	ldr	r0, [r7, #4]
 8001d8a:	f000 f905 	bl	8001f98 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	691a      	ldr	r2, [r3, #16]
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001d9c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	695a      	ldr	r2, [r3, #20]
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001dac:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	68da      	ldr	r2, [r3, #12]
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001dbc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	2200      	movs	r2, #0
 8001dc2:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	2220      	movs	r2, #32
 8001dc8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	2220      	movs	r2, #32
 8001dd0:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8001dd4:	2300      	movs	r3, #0
}
 8001dd6:	4618      	mov	r0, r3
 8001dd8:	3708      	adds	r7, #8
 8001dda:	46bd      	mov	sp, r7
 8001ddc:	bd80      	pop	{r7, pc}

08001dde <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001dde:	b580      	push	{r7, lr}
 8001de0:	b08a      	sub	sp, #40	; 0x28
 8001de2:	af02      	add	r7, sp, #8
 8001de4:	60f8      	str	r0, [r7, #12]
 8001de6:	60b9      	str	r1, [r7, #8]
 8001de8:	603b      	str	r3, [r7, #0]
 8001dea:	4613      	mov	r3, r2
 8001dec:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8001dee:	2300      	movs	r3, #0
 8001df0:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001df2:	68fb      	ldr	r3, [r7, #12]
 8001df4:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8001df8:	b2db      	uxtb	r3, r3
 8001dfa:	2b20      	cmp	r3, #32
 8001dfc:	d17c      	bne.n	8001ef8 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8001dfe:	68bb      	ldr	r3, [r7, #8]
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d002      	beq.n	8001e0a <HAL_UART_Transmit+0x2c>
 8001e04:	88fb      	ldrh	r3, [r7, #6]
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d101      	bne.n	8001e0e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8001e0a:	2301      	movs	r3, #1
 8001e0c:	e075      	b.n	8001efa <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8001e0e:	68fb      	ldr	r3, [r7, #12]
 8001e10:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001e14:	2b01      	cmp	r3, #1
 8001e16:	d101      	bne.n	8001e1c <HAL_UART_Transmit+0x3e>
 8001e18:	2302      	movs	r3, #2
 8001e1a:	e06e      	b.n	8001efa <HAL_UART_Transmit+0x11c>
 8001e1c:	68fb      	ldr	r3, [r7, #12]
 8001e1e:	2201      	movs	r2, #1
 8001e20:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001e24:	68fb      	ldr	r3, [r7, #12]
 8001e26:	2200      	movs	r2, #0
 8001e28:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001e2a:	68fb      	ldr	r3, [r7, #12]
 8001e2c:	2221      	movs	r2, #33	; 0x21
 8001e2e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8001e32:	f7ff f89d 	bl	8000f70 <HAL_GetTick>
 8001e36:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8001e38:	68fb      	ldr	r3, [r7, #12]
 8001e3a:	88fa      	ldrh	r2, [r7, #6]
 8001e3c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8001e3e:	68fb      	ldr	r3, [r7, #12]
 8001e40:	88fa      	ldrh	r2, [r7, #6]
 8001e42:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001e44:	68fb      	ldr	r3, [r7, #12]
 8001e46:	689b      	ldr	r3, [r3, #8]
 8001e48:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001e4c:	d108      	bne.n	8001e60 <HAL_UART_Transmit+0x82>
 8001e4e:	68fb      	ldr	r3, [r7, #12]
 8001e50:	691b      	ldr	r3, [r3, #16]
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d104      	bne.n	8001e60 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8001e56:	2300      	movs	r3, #0
 8001e58:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8001e5a:	68bb      	ldr	r3, [r7, #8]
 8001e5c:	61bb      	str	r3, [r7, #24]
 8001e5e:	e003      	b.n	8001e68 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8001e60:	68bb      	ldr	r3, [r7, #8]
 8001e62:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8001e64:	2300      	movs	r3, #0
 8001e66:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8001e68:	68fb      	ldr	r3, [r7, #12]
 8001e6a:	2200      	movs	r2, #0
 8001e6c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 8001e70:	e02a      	b.n	8001ec8 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001e72:	683b      	ldr	r3, [r7, #0]
 8001e74:	9300      	str	r3, [sp, #0]
 8001e76:	697b      	ldr	r3, [r7, #20]
 8001e78:	2200      	movs	r2, #0
 8001e7a:	2180      	movs	r1, #128	; 0x80
 8001e7c:	68f8      	ldr	r0, [r7, #12]
 8001e7e:	f000 f840 	bl	8001f02 <UART_WaitOnFlagUntilTimeout>
 8001e82:	4603      	mov	r3, r0
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d001      	beq.n	8001e8c <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8001e88:	2303      	movs	r3, #3
 8001e8a:	e036      	b.n	8001efa <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8001e8c:	69fb      	ldr	r3, [r7, #28]
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d10b      	bne.n	8001eaa <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8001e92:	69bb      	ldr	r3, [r7, #24]
 8001e94:	881b      	ldrh	r3, [r3, #0]
 8001e96:	461a      	mov	r2, r3
 8001e98:	68fb      	ldr	r3, [r7, #12]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001ea0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8001ea2:	69bb      	ldr	r3, [r7, #24]
 8001ea4:	3302      	adds	r3, #2
 8001ea6:	61bb      	str	r3, [r7, #24]
 8001ea8:	e007      	b.n	8001eba <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8001eaa:	69fb      	ldr	r3, [r7, #28]
 8001eac:	781a      	ldrb	r2, [r3, #0]
 8001eae:	68fb      	ldr	r3, [r7, #12]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8001eb4:	69fb      	ldr	r3, [r7, #28]
 8001eb6:	3301      	adds	r3, #1
 8001eb8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8001eba:	68fb      	ldr	r3, [r7, #12]
 8001ebc:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001ebe:	b29b      	uxth	r3, r3
 8001ec0:	3b01      	subs	r3, #1
 8001ec2:	b29a      	uxth	r2, r3
 8001ec4:	68fb      	ldr	r3, [r7, #12]
 8001ec6:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8001ec8:	68fb      	ldr	r3, [r7, #12]
 8001eca:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001ecc:	b29b      	uxth	r3, r3
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d1cf      	bne.n	8001e72 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001ed2:	683b      	ldr	r3, [r7, #0]
 8001ed4:	9300      	str	r3, [sp, #0]
 8001ed6:	697b      	ldr	r3, [r7, #20]
 8001ed8:	2200      	movs	r2, #0
 8001eda:	2140      	movs	r1, #64	; 0x40
 8001edc:	68f8      	ldr	r0, [r7, #12]
 8001ede:	f000 f810 	bl	8001f02 <UART_WaitOnFlagUntilTimeout>
 8001ee2:	4603      	mov	r3, r0
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d001      	beq.n	8001eec <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8001ee8:	2303      	movs	r3, #3
 8001eea:	e006      	b.n	8001efa <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8001eec:	68fb      	ldr	r3, [r7, #12]
 8001eee:	2220      	movs	r2, #32
 8001ef0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 8001ef4:	2300      	movs	r3, #0
 8001ef6:	e000      	b.n	8001efa <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8001ef8:	2302      	movs	r3, #2
  }
}
 8001efa:	4618      	mov	r0, r3
 8001efc:	3720      	adds	r7, #32
 8001efe:	46bd      	mov	sp, r7
 8001f00:	bd80      	pop	{r7, pc}

08001f02 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8001f02:	b580      	push	{r7, lr}
 8001f04:	b084      	sub	sp, #16
 8001f06:	af00      	add	r7, sp, #0
 8001f08:	60f8      	str	r0, [r7, #12]
 8001f0a:	60b9      	str	r1, [r7, #8]
 8001f0c:	603b      	str	r3, [r7, #0]
 8001f0e:	4613      	mov	r3, r2
 8001f10:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001f12:	e02c      	b.n	8001f6e <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001f14:	69bb      	ldr	r3, [r7, #24]
 8001f16:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001f1a:	d028      	beq.n	8001f6e <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8001f1c:	69bb      	ldr	r3, [r7, #24]
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d007      	beq.n	8001f32 <UART_WaitOnFlagUntilTimeout+0x30>
 8001f22:	f7ff f825 	bl	8000f70 <HAL_GetTick>
 8001f26:	4602      	mov	r2, r0
 8001f28:	683b      	ldr	r3, [r7, #0]
 8001f2a:	1ad3      	subs	r3, r2, r3
 8001f2c:	69ba      	ldr	r2, [r7, #24]
 8001f2e:	429a      	cmp	r2, r3
 8001f30:	d21d      	bcs.n	8001f6e <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8001f32:	68fb      	ldr	r3, [r7, #12]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	68da      	ldr	r2, [r3, #12]
 8001f38:	68fb      	ldr	r3, [r7, #12]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8001f40:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001f42:	68fb      	ldr	r3, [r7, #12]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	695a      	ldr	r2, [r3, #20]
 8001f48:	68fb      	ldr	r3, [r7, #12]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	f022 0201 	bic.w	r2, r2, #1
 8001f50:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8001f52:	68fb      	ldr	r3, [r7, #12]
 8001f54:	2220      	movs	r2, #32
 8001f56:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8001f5a:	68fb      	ldr	r3, [r7, #12]
 8001f5c:	2220      	movs	r2, #32
 8001f5e:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8001f62:	68fb      	ldr	r3, [r7, #12]
 8001f64:	2200      	movs	r2, #0
 8001f66:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8001f6a:	2303      	movs	r3, #3
 8001f6c:	e00f      	b.n	8001f8e <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001f6e:	68fb      	ldr	r3, [r7, #12]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	681a      	ldr	r2, [r3, #0]
 8001f74:	68bb      	ldr	r3, [r7, #8]
 8001f76:	4013      	ands	r3, r2
 8001f78:	68ba      	ldr	r2, [r7, #8]
 8001f7a:	429a      	cmp	r2, r3
 8001f7c:	bf0c      	ite	eq
 8001f7e:	2301      	moveq	r3, #1
 8001f80:	2300      	movne	r3, #0
 8001f82:	b2db      	uxtb	r3, r3
 8001f84:	461a      	mov	r2, r3
 8001f86:	79fb      	ldrb	r3, [r7, #7]
 8001f88:	429a      	cmp	r2, r3
 8001f8a:	d0c3      	beq.n	8001f14 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001f8c:	2300      	movs	r3, #0
}
 8001f8e:	4618      	mov	r0, r3
 8001f90:	3710      	adds	r7, #16
 8001f92:	46bd      	mov	sp, r7
 8001f94:	bd80      	pop	{r7, pc}
	...

08001f98 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001f98:	b580      	push	{r7, lr}
 8001f9a:	b084      	sub	sp, #16
 8001f9c:	af00      	add	r7, sp, #0
 8001f9e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	691b      	ldr	r3, [r3, #16]
 8001fa6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	68da      	ldr	r2, [r3, #12]
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	430a      	orrs	r2, r1
 8001fb4:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	689a      	ldr	r2, [r3, #8]
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	691b      	ldr	r3, [r3, #16]
 8001fbe:	431a      	orrs	r2, r3
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	695b      	ldr	r3, [r3, #20]
 8001fc4:	4313      	orrs	r3, r2
 8001fc6:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	68db      	ldr	r3, [r3, #12]
 8001fce:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8001fd2:	f023 030c 	bic.w	r3, r3, #12
 8001fd6:	687a      	ldr	r2, [r7, #4]
 8001fd8:	6812      	ldr	r2, [r2, #0]
 8001fda:	68b9      	ldr	r1, [r7, #8]
 8001fdc:	430b      	orrs	r3, r1
 8001fde:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	695b      	ldr	r3, [r3, #20]
 8001fe6:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	699a      	ldr	r2, [r3, #24]
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	430a      	orrs	r2, r1
 8001ff4:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	4a2c      	ldr	r2, [pc, #176]	; (80020ac <UART_SetConfig+0x114>)
 8001ffc:	4293      	cmp	r3, r2
 8001ffe:	d103      	bne.n	8002008 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8002000:	f7ff fe6e 	bl	8001ce0 <HAL_RCC_GetPCLK2Freq>
 8002004:	60f8      	str	r0, [r7, #12]
 8002006:	e002      	b.n	800200e <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8002008:	f7ff fe56 	bl	8001cb8 <HAL_RCC_GetPCLK1Freq>
 800200c:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800200e:	68fa      	ldr	r2, [r7, #12]
 8002010:	4613      	mov	r3, r2
 8002012:	009b      	lsls	r3, r3, #2
 8002014:	4413      	add	r3, r2
 8002016:	009a      	lsls	r2, r3, #2
 8002018:	441a      	add	r2, r3
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	685b      	ldr	r3, [r3, #4]
 800201e:	009b      	lsls	r3, r3, #2
 8002020:	fbb2 f3f3 	udiv	r3, r2, r3
 8002024:	4a22      	ldr	r2, [pc, #136]	; (80020b0 <UART_SetConfig+0x118>)
 8002026:	fba2 2303 	umull	r2, r3, r2, r3
 800202a:	095b      	lsrs	r3, r3, #5
 800202c:	0119      	lsls	r1, r3, #4
 800202e:	68fa      	ldr	r2, [r7, #12]
 8002030:	4613      	mov	r3, r2
 8002032:	009b      	lsls	r3, r3, #2
 8002034:	4413      	add	r3, r2
 8002036:	009a      	lsls	r2, r3, #2
 8002038:	441a      	add	r2, r3
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	685b      	ldr	r3, [r3, #4]
 800203e:	009b      	lsls	r3, r3, #2
 8002040:	fbb2 f2f3 	udiv	r2, r2, r3
 8002044:	4b1a      	ldr	r3, [pc, #104]	; (80020b0 <UART_SetConfig+0x118>)
 8002046:	fba3 0302 	umull	r0, r3, r3, r2
 800204a:	095b      	lsrs	r3, r3, #5
 800204c:	2064      	movs	r0, #100	; 0x64
 800204e:	fb00 f303 	mul.w	r3, r0, r3
 8002052:	1ad3      	subs	r3, r2, r3
 8002054:	011b      	lsls	r3, r3, #4
 8002056:	3332      	adds	r3, #50	; 0x32
 8002058:	4a15      	ldr	r2, [pc, #84]	; (80020b0 <UART_SetConfig+0x118>)
 800205a:	fba2 2303 	umull	r2, r3, r2, r3
 800205e:	095b      	lsrs	r3, r3, #5
 8002060:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002064:	4419      	add	r1, r3
 8002066:	68fa      	ldr	r2, [r7, #12]
 8002068:	4613      	mov	r3, r2
 800206a:	009b      	lsls	r3, r3, #2
 800206c:	4413      	add	r3, r2
 800206e:	009a      	lsls	r2, r3, #2
 8002070:	441a      	add	r2, r3
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	685b      	ldr	r3, [r3, #4]
 8002076:	009b      	lsls	r3, r3, #2
 8002078:	fbb2 f2f3 	udiv	r2, r2, r3
 800207c:	4b0c      	ldr	r3, [pc, #48]	; (80020b0 <UART_SetConfig+0x118>)
 800207e:	fba3 0302 	umull	r0, r3, r3, r2
 8002082:	095b      	lsrs	r3, r3, #5
 8002084:	2064      	movs	r0, #100	; 0x64
 8002086:	fb00 f303 	mul.w	r3, r0, r3
 800208a:	1ad3      	subs	r3, r2, r3
 800208c:	011b      	lsls	r3, r3, #4
 800208e:	3332      	adds	r3, #50	; 0x32
 8002090:	4a07      	ldr	r2, [pc, #28]	; (80020b0 <UART_SetConfig+0x118>)
 8002092:	fba2 2303 	umull	r2, r3, r2, r3
 8002096:	095b      	lsrs	r3, r3, #5
 8002098:	f003 020f 	and.w	r2, r3, #15
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	440a      	add	r2, r1
 80020a2:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80020a4:	bf00      	nop
 80020a6:	3710      	adds	r7, #16
 80020a8:	46bd      	mov	sp, r7
 80020aa:	bd80      	pop	{r7, pc}
 80020ac:	40013800 	.word	0x40013800
 80020b0:	51eb851f 	.word	0x51eb851f

080020b4 <__errno>:
 80020b4:	4b01      	ldr	r3, [pc, #4]	; (80020bc <__errno+0x8>)
 80020b6:	6818      	ldr	r0, [r3, #0]
 80020b8:	4770      	bx	lr
 80020ba:	bf00      	nop
 80020bc:	20000014 	.word	0x20000014

080020c0 <__libc_init_array>:
 80020c0:	b570      	push	{r4, r5, r6, lr}
 80020c2:	2500      	movs	r5, #0
 80020c4:	4e0c      	ldr	r6, [pc, #48]	; (80020f8 <__libc_init_array+0x38>)
 80020c6:	4c0d      	ldr	r4, [pc, #52]	; (80020fc <__libc_init_array+0x3c>)
 80020c8:	1ba4      	subs	r4, r4, r6
 80020ca:	10a4      	asrs	r4, r4, #2
 80020cc:	42a5      	cmp	r5, r4
 80020ce:	d109      	bne.n	80020e4 <__libc_init_array+0x24>
 80020d0:	f002 f860 	bl	8004194 <_init>
 80020d4:	2500      	movs	r5, #0
 80020d6:	4e0a      	ldr	r6, [pc, #40]	; (8002100 <__libc_init_array+0x40>)
 80020d8:	4c0a      	ldr	r4, [pc, #40]	; (8002104 <__libc_init_array+0x44>)
 80020da:	1ba4      	subs	r4, r4, r6
 80020dc:	10a4      	asrs	r4, r4, #2
 80020de:	42a5      	cmp	r5, r4
 80020e0:	d105      	bne.n	80020ee <__libc_init_array+0x2e>
 80020e2:	bd70      	pop	{r4, r5, r6, pc}
 80020e4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80020e8:	4798      	blx	r3
 80020ea:	3501      	adds	r5, #1
 80020ec:	e7ee      	b.n	80020cc <__libc_init_array+0xc>
 80020ee:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80020f2:	4798      	blx	r3
 80020f4:	3501      	adds	r5, #1
 80020f6:	e7f2      	b.n	80020de <__libc_init_array+0x1e>
 80020f8:	08004440 	.word	0x08004440
 80020fc:	08004440 	.word	0x08004440
 8002100:	08004440 	.word	0x08004440
 8002104:	08004444 	.word	0x08004444

08002108 <memset>:
 8002108:	4603      	mov	r3, r0
 800210a:	4402      	add	r2, r0
 800210c:	4293      	cmp	r3, r2
 800210e:	d100      	bne.n	8002112 <memset+0xa>
 8002110:	4770      	bx	lr
 8002112:	f803 1b01 	strb.w	r1, [r3], #1
 8002116:	e7f9      	b.n	800210c <memset+0x4>

08002118 <__cvt>:
 8002118:	2b00      	cmp	r3, #0
 800211a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800211e:	461e      	mov	r6, r3
 8002120:	bfbb      	ittet	lt
 8002122:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 8002126:	461e      	movlt	r6, r3
 8002128:	2300      	movge	r3, #0
 800212a:	232d      	movlt	r3, #45	; 0x2d
 800212c:	b088      	sub	sp, #32
 800212e:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8002130:	e9dd 1a12 	ldrd	r1, sl, [sp, #72]	; 0x48
 8002134:	f027 0720 	bic.w	r7, r7, #32
 8002138:	2f46      	cmp	r7, #70	; 0x46
 800213a:	4614      	mov	r4, r2
 800213c:	9d10      	ldr	r5, [sp, #64]	; 0x40
 800213e:	700b      	strb	r3, [r1, #0]
 8002140:	d004      	beq.n	800214c <__cvt+0x34>
 8002142:	2f45      	cmp	r7, #69	; 0x45
 8002144:	d100      	bne.n	8002148 <__cvt+0x30>
 8002146:	3501      	adds	r5, #1
 8002148:	2302      	movs	r3, #2
 800214a:	e000      	b.n	800214e <__cvt+0x36>
 800214c:	2303      	movs	r3, #3
 800214e:	aa07      	add	r2, sp, #28
 8002150:	9204      	str	r2, [sp, #16]
 8002152:	aa06      	add	r2, sp, #24
 8002154:	e9cd a202 	strd	sl, r2, [sp, #8]
 8002158:	e9cd 3500 	strd	r3, r5, [sp]
 800215c:	4622      	mov	r2, r4
 800215e:	4633      	mov	r3, r6
 8002160:	f000 fcda 	bl	8002b18 <_dtoa_r>
 8002164:	2f47      	cmp	r7, #71	; 0x47
 8002166:	4680      	mov	r8, r0
 8002168:	d102      	bne.n	8002170 <__cvt+0x58>
 800216a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800216c:	07db      	lsls	r3, r3, #31
 800216e:	d526      	bpl.n	80021be <__cvt+0xa6>
 8002170:	2f46      	cmp	r7, #70	; 0x46
 8002172:	eb08 0905 	add.w	r9, r8, r5
 8002176:	d111      	bne.n	800219c <__cvt+0x84>
 8002178:	f898 3000 	ldrb.w	r3, [r8]
 800217c:	2b30      	cmp	r3, #48	; 0x30
 800217e:	d10a      	bne.n	8002196 <__cvt+0x7e>
 8002180:	2200      	movs	r2, #0
 8002182:	2300      	movs	r3, #0
 8002184:	4620      	mov	r0, r4
 8002186:	4631      	mov	r1, r6
 8002188:	f7fe fc0e 	bl	80009a8 <__aeabi_dcmpeq>
 800218c:	b918      	cbnz	r0, 8002196 <__cvt+0x7e>
 800218e:	f1c5 0501 	rsb	r5, r5, #1
 8002192:	f8ca 5000 	str.w	r5, [sl]
 8002196:	f8da 3000 	ldr.w	r3, [sl]
 800219a:	4499      	add	r9, r3
 800219c:	2200      	movs	r2, #0
 800219e:	2300      	movs	r3, #0
 80021a0:	4620      	mov	r0, r4
 80021a2:	4631      	mov	r1, r6
 80021a4:	f7fe fc00 	bl	80009a8 <__aeabi_dcmpeq>
 80021a8:	b938      	cbnz	r0, 80021ba <__cvt+0xa2>
 80021aa:	2230      	movs	r2, #48	; 0x30
 80021ac:	9b07      	ldr	r3, [sp, #28]
 80021ae:	454b      	cmp	r3, r9
 80021b0:	d205      	bcs.n	80021be <__cvt+0xa6>
 80021b2:	1c59      	adds	r1, r3, #1
 80021b4:	9107      	str	r1, [sp, #28]
 80021b6:	701a      	strb	r2, [r3, #0]
 80021b8:	e7f8      	b.n	80021ac <__cvt+0x94>
 80021ba:	f8cd 901c 	str.w	r9, [sp, #28]
 80021be:	4640      	mov	r0, r8
 80021c0:	9b07      	ldr	r3, [sp, #28]
 80021c2:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80021c4:	eba3 0308 	sub.w	r3, r3, r8
 80021c8:	6013      	str	r3, [r2, #0]
 80021ca:	b008      	add	sp, #32
 80021cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

080021d0 <__exponent>:
 80021d0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80021d2:	2900      	cmp	r1, #0
 80021d4:	bfb4      	ite	lt
 80021d6:	232d      	movlt	r3, #45	; 0x2d
 80021d8:	232b      	movge	r3, #43	; 0x2b
 80021da:	4604      	mov	r4, r0
 80021dc:	bfb8      	it	lt
 80021de:	4249      	neglt	r1, r1
 80021e0:	2909      	cmp	r1, #9
 80021e2:	f804 2b02 	strb.w	r2, [r4], #2
 80021e6:	7043      	strb	r3, [r0, #1]
 80021e8:	dd21      	ble.n	800222e <__exponent+0x5e>
 80021ea:	f10d 0307 	add.w	r3, sp, #7
 80021ee:	461f      	mov	r7, r3
 80021f0:	260a      	movs	r6, #10
 80021f2:	fb91 f5f6 	sdiv	r5, r1, r6
 80021f6:	fb06 1115 	mls	r1, r6, r5, r1
 80021fa:	2d09      	cmp	r5, #9
 80021fc:	f101 0130 	add.w	r1, r1, #48	; 0x30
 8002200:	f803 1c01 	strb.w	r1, [r3, #-1]
 8002204:	f103 32ff 	add.w	r2, r3, #4294967295	; 0xffffffff
 8002208:	4629      	mov	r1, r5
 800220a:	dc09      	bgt.n	8002220 <__exponent+0x50>
 800220c:	3130      	adds	r1, #48	; 0x30
 800220e:	3b02      	subs	r3, #2
 8002210:	f802 1c01 	strb.w	r1, [r2, #-1]
 8002214:	42bb      	cmp	r3, r7
 8002216:	4622      	mov	r2, r4
 8002218:	d304      	bcc.n	8002224 <__exponent+0x54>
 800221a:	1a10      	subs	r0, r2, r0
 800221c:	b003      	add	sp, #12
 800221e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002220:	4613      	mov	r3, r2
 8002222:	e7e6      	b.n	80021f2 <__exponent+0x22>
 8002224:	f813 2b01 	ldrb.w	r2, [r3], #1
 8002228:	f804 2b01 	strb.w	r2, [r4], #1
 800222c:	e7f2      	b.n	8002214 <__exponent+0x44>
 800222e:	2330      	movs	r3, #48	; 0x30
 8002230:	4419      	add	r1, r3
 8002232:	7083      	strb	r3, [r0, #2]
 8002234:	1d02      	adds	r2, r0, #4
 8002236:	70c1      	strb	r1, [r0, #3]
 8002238:	e7ef      	b.n	800221a <__exponent+0x4a>
	...

0800223c <_printf_float>:
 800223c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002240:	b091      	sub	sp, #68	; 0x44
 8002242:	460c      	mov	r4, r1
 8002244:	9f1a      	ldr	r7, [sp, #104]	; 0x68
 8002246:	4693      	mov	fp, r2
 8002248:	461e      	mov	r6, r3
 800224a:	4605      	mov	r5, r0
 800224c:	f001 fa18 	bl	8003680 <_localeconv_r>
 8002250:	6803      	ldr	r3, [r0, #0]
 8002252:	4618      	mov	r0, r3
 8002254:	9309      	str	r3, [sp, #36]	; 0x24
 8002256:	f7fd ff7b 	bl	8000150 <strlen>
 800225a:	2300      	movs	r3, #0
 800225c:	930e      	str	r3, [sp, #56]	; 0x38
 800225e:	683b      	ldr	r3, [r7, #0]
 8002260:	900a      	str	r0, [sp, #40]	; 0x28
 8002262:	3307      	adds	r3, #7
 8002264:	f023 0307 	bic.w	r3, r3, #7
 8002268:	f103 0208 	add.w	r2, r3, #8
 800226c:	f894 8018 	ldrb.w	r8, [r4, #24]
 8002270:	f8d4 a000 	ldr.w	sl, [r4]
 8002274:	603a      	str	r2, [r7, #0]
 8002276:	e9d3 2300 	ldrd	r2, r3, [r3]
 800227a:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800227e:	e9d4 7912 	ldrd	r7, r9, [r4, #72]	; 0x48
 8002282:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8002286:	930b      	str	r3, [sp, #44]	; 0x2c
 8002288:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800228c:	4ba6      	ldr	r3, [pc, #664]	; (8002528 <_printf_float+0x2ec>)
 800228e:	4638      	mov	r0, r7
 8002290:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8002292:	f7fe fbbb 	bl	8000a0c <__aeabi_dcmpun>
 8002296:	bb68      	cbnz	r0, 80022f4 <_printf_float+0xb8>
 8002298:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800229c:	4ba2      	ldr	r3, [pc, #648]	; (8002528 <_printf_float+0x2ec>)
 800229e:	4638      	mov	r0, r7
 80022a0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80022a2:	f7fe fb95 	bl	80009d0 <__aeabi_dcmple>
 80022a6:	bb28      	cbnz	r0, 80022f4 <_printf_float+0xb8>
 80022a8:	2200      	movs	r2, #0
 80022aa:	2300      	movs	r3, #0
 80022ac:	4638      	mov	r0, r7
 80022ae:	4649      	mov	r1, r9
 80022b0:	f7fe fb84 	bl	80009bc <__aeabi_dcmplt>
 80022b4:	b110      	cbz	r0, 80022bc <_printf_float+0x80>
 80022b6:	232d      	movs	r3, #45	; 0x2d
 80022b8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80022bc:	4f9b      	ldr	r7, [pc, #620]	; (800252c <_printf_float+0x2f0>)
 80022be:	4b9c      	ldr	r3, [pc, #624]	; (8002530 <_printf_float+0x2f4>)
 80022c0:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80022c4:	bf98      	it	ls
 80022c6:	461f      	movls	r7, r3
 80022c8:	2303      	movs	r3, #3
 80022ca:	f04f 0900 	mov.w	r9, #0
 80022ce:	6123      	str	r3, [r4, #16]
 80022d0:	f02a 0304 	bic.w	r3, sl, #4
 80022d4:	6023      	str	r3, [r4, #0]
 80022d6:	9600      	str	r6, [sp, #0]
 80022d8:	465b      	mov	r3, fp
 80022da:	aa0f      	add	r2, sp, #60	; 0x3c
 80022dc:	4621      	mov	r1, r4
 80022de:	4628      	mov	r0, r5
 80022e0:	f000 f9e2 	bl	80026a8 <_printf_common>
 80022e4:	3001      	adds	r0, #1
 80022e6:	f040 8090 	bne.w	800240a <_printf_float+0x1ce>
 80022ea:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80022ee:	b011      	add	sp, #68	; 0x44
 80022f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80022f4:	463a      	mov	r2, r7
 80022f6:	464b      	mov	r3, r9
 80022f8:	4638      	mov	r0, r7
 80022fa:	4649      	mov	r1, r9
 80022fc:	f7fe fb86 	bl	8000a0c <__aeabi_dcmpun>
 8002300:	b110      	cbz	r0, 8002308 <_printf_float+0xcc>
 8002302:	4f8c      	ldr	r7, [pc, #560]	; (8002534 <_printf_float+0x2f8>)
 8002304:	4b8c      	ldr	r3, [pc, #560]	; (8002538 <_printf_float+0x2fc>)
 8002306:	e7db      	b.n	80022c0 <_printf_float+0x84>
 8002308:	6863      	ldr	r3, [r4, #4]
 800230a:	f44a 6280 	orr.w	r2, sl, #1024	; 0x400
 800230e:	1c59      	adds	r1, r3, #1
 8002310:	a80d      	add	r0, sp, #52	; 0x34
 8002312:	a90e      	add	r1, sp, #56	; 0x38
 8002314:	d140      	bne.n	8002398 <_printf_float+0x15c>
 8002316:	2306      	movs	r3, #6
 8002318:	6063      	str	r3, [r4, #4]
 800231a:	f04f 0c00 	mov.w	ip, #0
 800231e:	f10d 0333 	add.w	r3, sp, #51	; 0x33
 8002322:	e9cd 2301 	strd	r2, r3, [sp, #4]
 8002326:	6863      	ldr	r3, [r4, #4]
 8002328:	6022      	str	r2, [r4, #0]
 800232a:	e9cd 0803 	strd	r0, r8, [sp, #12]
 800232e:	9300      	str	r3, [sp, #0]
 8002330:	463a      	mov	r2, r7
 8002332:	464b      	mov	r3, r9
 8002334:	e9cd 1c05 	strd	r1, ip, [sp, #20]
 8002338:	4628      	mov	r0, r5
 800233a:	f7ff feed 	bl	8002118 <__cvt>
 800233e:	f008 03df 	and.w	r3, r8, #223	; 0xdf
 8002342:	2b47      	cmp	r3, #71	; 0x47
 8002344:	4607      	mov	r7, r0
 8002346:	d109      	bne.n	800235c <_printf_float+0x120>
 8002348:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800234a:	1cd8      	adds	r0, r3, #3
 800234c:	db02      	blt.n	8002354 <_printf_float+0x118>
 800234e:	6862      	ldr	r2, [r4, #4]
 8002350:	4293      	cmp	r3, r2
 8002352:	dd47      	ble.n	80023e4 <_printf_float+0x1a8>
 8002354:	f1a8 0802 	sub.w	r8, r8, #2
 8002358:	fa5f f888 	uxtb.w	r8, r8
 800235c:	f1b8 0f65 	cmp.w	r8, #101	; 0x65
 8002360:	990d      	ldr	r1, [sp, #52]	; 0x34
 8002362:	d824      	bhi.n	80023ae <_printf_float+0x172>
 8002364:	3901      	subs	r1, #1
 8002366:	4642      	mov	r2, r8
 8002368:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800236c:	910d      	str	r1, [sp, #52]	; 0x34
 800236e:	f7ff ff2f 	bl	80021d0 <__exponent>
 8002372:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8002374:	4681      	mov	r9, r0
 8002376:	1813      	adds	r3, r2, r0
 8002378:	2a01      	cmp	r2, #1
 800237a:	6123      	str	r3, [r4, #16]
 800237c:	dc02      	bgt.n	8002384 <_printf_float+0x148>
 800237e:	6822      	ldr	r2, [r4, #0]
 8002380:	07d1      	lsls	r1, r2, #31
 8002382:	d501      	bpl.n	8002388 <_printf_float+0x14c>
 8002384:	3301      	adds	r3, #1
 8002386:	6123      	str	r3, [r4, #16]
 8002388:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 800238c:	2b00      	cmp	r3, #0
 800238e:	d0a2      	beq.n	80022d6 <_printf_float+0x9a>
 8002390:	232d      	movs	r3, #45	; 0x2d
 8002392:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002396:	e79e      	b.n	80022d6 <_printf_float+0x9a>
 8002398:	f1b8 0f67 	cmp.w	r8, #103	; 0x67
 800239c:	f000 816e 	beq.w	800267c <_printf_float+0x440>
 80023a0:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80023a4:	d1b9      	bne.n	800231a <_printf_float+0xde>
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d1b7      	bne.n	800231a <_printf_float+0xde>
 80023aa:	2301      	movs	r3, #1
 80023ac:	e7b4      	b.n	8002318 <_printf_float+0xdc>
 80023ae:	f1b8 0f66 	cmp.w	r8, #102	; 0x66
 80023b2:	d119      	bne.n	80023e8 <_printf_float+0x1ac>
 80023b4:	2900      	cmp	r1, #0
 80023b6:	6863      	ldr	r3, [r4, #4]
 80023b8:	dd0c      	ble.n	80023d4 <_printf_float+0x198>
 80023ba:	6121      	str	r1, [r4, #16]
 80023bc:	b913      	cbnz	r3, 80023c4 <_printf_float+0x188>
 80023be:	6822      	ldr	r2, [r4, #0]
 80023c0:	07d2      	lsls	r2, r2, #31
 80023c2:	d502      	bpl.n	80023ca <_printf_float+0x18e>
 80023c4:	3301      	adds	r3, #1
 80023c6:	440b      	add	r3, r1
 80023c8:	6123      	str	r3, [r4, #16]
 80023ca:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80023cc:	f04f 0900 	mov.w	r9, #0
 80023d0:	65a3      	str	r3, [r4, #88]	; 0x58
 80023d2:	e7d9      	b.n	8002388 <_printf_float+0x14c>
 80023d4:	b913      	cbnz	r3, 80023dc <_printf_float+0x1a0>
 80023d6:	6822      	ldr	r2, [r4, #0]
 80023d8:	07d0      	lsls	r0, r2, #31
 80023da:	d501      	bpl.n	80023e0 <_printf_float+0x1a4>
 80023dc:	3302      	adds	r3, #2
 80023de:	e7f3      	b.n	80023c8 <_printf_float+0x18c>
 80023e0:	2301      	movs	r3, #1
 80023e2:	e7f1      	b.n	80023c8 <_printf_float+0x18c>
 80023e4:	f04f 0867 	mov.w	r8, #103	; 0x67
 80023e8:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 80023ec:	4293      	cmp	r3, r2
 80023ee:	db05      	blt.n	80023fc <_printf_float+0x1c0>
 80023f0:	6822      	ldr	r2, [r4, #0]
 80023f2:	6123      	str	r3, [r4, #16]
 80023f4:	07d1      	lsls	r1, r2, #31
 80023f6:	d5e8      	bpl.n	80023ca <_printf_float+0x18e>
 80023f8:	3301      	adds	r3, #1
 80023fa:	e7e5      	b.n	80023c8 <_printf_float+0x18c>
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	bfcc      	ite	gt
 8002400:	2301      	movgt	r3, #1
 8002402:	f1c3 0302 	rsble	r3, r3, #2
 8002406:	4413      	add	r3, r2
 8002408:	e7de      	b.n	80023c8 <_printf_float+0x18c>
 800240a:	6823      	ldr	r3, [r4, #0]
 800240c:	055a      	lsls	r2, r3, #21
 800240e:	d407      	bmi.n	8002420 <_printf_float+0x1e4>
 8002410:	6923      	ldr	r3, [r4, #16]
 8002412:	463a      	mov	r2, r7
 8002414:	4659      	mov	r1, fp
 8002416:	4628      	mov	r0, r5
 8002418:	47b0      	blx	r6
 800241a:	3001      	adds	r0, #1
 800241c:	d129      	bne.n	8002472 <_printf_float+0x236>
 800241e:	e764      	b.n	80022ea <_printf_float+0xae>
 8002420:	f1b8 0f65 	cmp.w	r8, #101	; 0x65
 8002424:	f240 80d7 	bls.w	80025d6 <_printf_float+0x39a>
 8002428:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800242c:	2200      	movs	r2, #0
 800242e:	2300      	movs	r3, #0
 8002430:	f7fe faba 	bl	80009a8 <__aeabi_dcmpeq>
 8002434:	b388      	cbz	r0, 800249a <_printf_float+0x25e>
 8002436:	2301      	movs	r3, #1
 8002438:	4a40      	ldr	r2, [pc, #256]	; (800253c <_printf_float+0x300>)
 800243a:	4659      	mov	r1, fp
 800243c:	4628      	mov	r0, r5
 800243e:	47b0      	blx	r6
 8002440:	3001      	adds	r0, #1
 8002442:	f43f af52 	beq.w	80022ea <_printf_float+0xae>
 8002446:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800244a:	429a      	cmp	r2, r3
 800244c:	db02      	blt.n	8002454 <_printf_float+0x218>
 800244e:	6823      	ldr	r3, [r4, #0]
 8002450:	07d8      	lsls	r0, r3, #31
 8002452:	d50e      	bpl.n	8002472 <_printf_float+0x236>
 8002454:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8002458:	4659      	mov	r1, fp
 800245a:	4628      	mov	r0, r5
 800245c:	47b0      	blx	r6
 800245e:	3001      	adds	r0, #1
 8002460:	f43f af43 	beq.w	80022ea <_printf_float+0xae>
 8002464:	2700      	movs	r7, #0
 8002466:	f104 081a 	add.w	r8, r4, #26
 800246a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800246c:	3b01      	subs	r3, #1
 800246e:	42bb      	cmp	r3, r7
 8002470:	dc09      	bgt.n	8002486 <_printf_float+0x24a>
 8002472:	6823      	ldr	r3, [r4, #0]
 8002474:	079f      	lsls	r7, r3, #30
 8002476:	f100 80fd 	bmi.w	8002674 <_printf_float+0x438>
 800247a:	68e0      	ldr	r0, [r4, #12]
 800247c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800247e:	4298      	cmp	r0, r3
 8002480:	bfb8      	it	lt
 8002482:	4618      	movlt	r0, r3
 8002484:	e733      	b.n	80022ee <_printf_float+0xb2>
 8002486:	2301      	movs	r3, #1
 8002488:	4642      	mov	r2, r8
 800248a:	4659      	mov	r1, fp
 800248c:	4628      	mov	r0, r5
 800248e:	47b0      	blx	r6
 8002490:	3001      	adds	r0, #1
 8002492:	f43f af2a 	beq.w	80022ea <_printf_float+0xae>
 8002496:	3701      	adds	r7, #1
 8002498:	e7e7      	b.n	800246a <_printf_float+0x22e>
 800249a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800249c:	2b00      	cmp	r3, #0
 800249e:	dc2b      	bgt.n	80024f8 <_printf_float+0x2bc>
 80024a0:	2301      	movs	r3, #1
 80024a2:	4a26      	ldr	r2, [pc, #152]	; (800253c <_printf_float+0x300>)
 80024a4:	4659      	mov	r1, fp
 80024a6:	4628      	mov	r0, r5
 80024a8:	47b0      	blx	r6
 80024aa:	3001      	adds	r0, #1
 80024ac:	f43f af1d 	beq.w	80022ea <_printf_float+0xae>
 80024b0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80024b2:	b923      	cbnz	r3, 80024be <_printf_float+0x282>
 80024b4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80024b6:	b913      	cbnz	r3, 80024be <_printf_float+0x282>
 80024b8:	6823      	ldr	r3, [r4, #0]
 80024ba:	07d9      	lsls	r1, r3, #31
 80024bc:	d5d9      	bpl.n	8002472 <_printf_float+0x236>
 80024be:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80024c2:	4659      	mov	r1, fp
 80024c4:	4628      	mov	r0, r5
 80024c6:	47b0      	blx	r6
 80024c8:	3001      	adds	r0, #1
 80024ca:	f43f af0e 	beq.w	80022ea <_printf_float+0xae>
 80024ce:	f04f 0800 	mov.w	r8, #0
 80024d2:	f104 091a 	add.w	r9, r4, #26
 80024d6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80024d8:	425b      	negs	r3, r3
 80024da:	4543      	cmp	r3, r8
 80024dc:	dc01      	bgt.n	80024e2 <_printf_float+0x2a6>
 80024de:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80024e0:	e797      	b.n	8002412 <_printf_float+0x1d6>
 80024e2:	2301      	movs	r3, #1
 80024e4:	464a      	mov	r2, r9
 80024e6:	4659      	mov	r1, fp
 80024e8:	4628      	mov	r0, r5
 80024ea:	47b0      	blx	r6
 80024ec:	3001      	adds	r0, #1
 80024ee:	f43f aefc 	beq.w	80022ea <_printf_float+0xae>
 80024f2:	f108 0801 	add.w	r8, r8, #1
 80024f6:	e7ee      	b.n	80024d6 <_printf_float+0x29a>
 80024f8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80024fa:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80024fc:	429a      	cmp	r2, r3
 80024fe:	bfa8      	it	ge
 8002500:	461a      	movge	r2, r3
 8002502:	2a00      	cmp	r2, #0
 8002504:	4690      	mov	r8, r2
 8002506:	dd07      	ble.n	8002518 <_printf_float+0x2dc>
 8002508:	4613      	mov	r3, r2
 800250a:	4659      	mov	r1, fp
 800250c:	463a      	mov	r2, r7
 800250e:	4628      	mov	r0, r5
 8002510:	47b0      	blx	r6
 8002512:	3001      	adds	r0, #1
 8002514:	f43f aee9 	beq.w	80022ea <_printf_float+0xae>
 8002518:	f104 031a 	add.w	r3, r4, #26
 800251c:	f04f 0a00 	mov.w	sl, #0
 8002520:	ea28 78e8 	bic.w	r8, r8, r8, asr #31
 8002524:	930b      	str	r3, [sp, #44]	; 0x2c
 8002526:	e015      	b.n	8002554 <_printf_float+0x318>
 8002528:	7fefffff 	.word	0x7fefffff
 800252c:	080041e8 	.word	0x080041e8
 8002530:	080041e4 	.word	0x080041e4
 8002534:	080041f0 	.word	0x080041f0
 8002538:	080041ec 	.word	0x080041ec
 800253c:	080041f4 	.word	0x080041f4
 8002540:	2301      	movs	r3, #1
 8002542:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8002544:	4659      	mov	r1, fp
 8002546:	4628      	mov	r0, r5
 8002548:	47b0      	blx	r6
 800254a:	3001      	adds	r0, #1
 800254c:	f43f aecd 	beq.w	80022ea <_printf_float+0xae>
 8002550:	f10a 0a01 	add.w	sl, sl, #1
 8002554:	f8d4 9058 	ldr.w	r9, [r4, #88]	; 0x58
 8002558:	eba9 0308 	sub.w	r3, r9, r8
 800255c:	4553      	cmp	r3, sl
 800255e:	dcef      	bgt.n	8002540 <_printf_float+0x304>
 8002560:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8002564:	429a      	cmp	r2, r3
 8002566:	444f      	add	r7, r9
 8002568:	db14      	blt.n	8002594 <_printf_float+0x358>
 800256a:	6823      	ldr	r3, [r4, #0]
 800256c:	07da      	lsls	r2, r3, #31
 800256e:	d411      	bmi.n	8002594 <_printf_float+0x358>
 8002570:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8002572:	990d      	ldr	r1, [sp, #52]	; 0x34
 8002574:	eba3 0209 	sub.w	r2, r3, r9
 8002578:	eba3 0901 	sub.w	r9, r3, r1
 800257c:	4591      	cmp	r9, r2
 800257e:	bfa8      	it	ge
 8002580:	4691      	movge	r9, r2
 8002582:	f1b9 0f00 	cmp.w	r9, #0
 8002586:	dc0d      	bgt.n	80025a4 <_printf_float+0x368>
 8002588:	2700      	movs	r7, #0
 800258a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800258e:	f104 081a 	add.w	r8, r4, #26
 8002592:	e018      	b.n	80025c6 <_printf_float+0x38a>
 8002594:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8002598:	4659      	mov	r1, fp
 800259a:	4628      	mov	r0, r5
 800259c:	47b0      	blx	r6
 800259e:	3001      	adds	r0, #1
 80025a0:	d1e6      	bne.n	8002570 <_printf_float+0x334>
 80025a2:	e6a2      	b.n	80022ea <_printf_float+0xae>
 80025a4:	464b      	mov	r3, r9
 80025a6:	463a      	mov	r2, r7
 80025a8:	4659      	mov	r1, fp
 80025aa:	4628      	mov	r0, r5
 80025ac:	47b0      	blx	r6
 80025ae:	3001      	adds	r0, #1
 80025b0:	d1ea      	bne.n	8002588 <_printf_float+0x34c>
 80025b2:	e69a      	b.n	80022ea <_printf_float+0xae>
 80025b4:	2301      	movs	r3, #1
 80025b6:	4642      	mov	r2, r8
 80025b8:	4659      	mov	r1, fp
 80025ba:	4628      	mov	r0, r5
 80025bc:	47b0      	blx	r6
 80025be:	3001      	adds	r0, #1
 80025c0:	f43f ae93 	beq.w	80022ea <_printf_float+0xae>
 80025c4:	3701      	adds	r7, #1
 80025c6:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80025ca:	1a9b      	subs	r3, r3, r2
 80025cc:	eba3 0309 	sub.w	r3, r3, r9
 80025d0:	42bb      	cmp	r3, r7
 80025d2:	dcef      	bgt.n	80025b4 <_printf_float+0x378>
 80025d4:	e74d      	b.n	8002472 <_printf_float+0x236>
 80025d6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80025d8:	2a01      	cmp	r2, #1
 80025da:	dc01      	bgt.n	80025e0 <_printf_float+0x3a4>
 80025dc:	07db      	lsls	r3, r3, #31
 80025de:	d538      	bpl.n	8002652 <_printf_float+0x416>
 80025e0:	2301      	movs	r3, #1
 80025e2:	463a      	mov	r2, r7
 80025e4:	4659      	mov	r1, fp
 80025e6:	4628      	mov	r0, r5
 80025e8:	47b0      	blx	r6
 80025ea:	3001      	adds	r0, #1
 80025ec:	f43f ae7d 	beq.w	80022ea <_printf_float+0xae>
 80025f0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80025f4:	4659      	mov	r1, fp
 80025f6:	4628      	mov	r0, r5
 80025f8:	47b0      	blx	r6
 80025fa:	3001      	adds	r0, #1
 80025fc:	f107 0701 	add.w	r7, r7, #1
 8002600:	f43f ae73 	beq.w	80022ea <_printf_float+0xae>
 8002604:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8002608:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800260a:	2200      	movs	r2, #0
 800260c:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8002610:	2300      	movs	r3, #0
 8002612:	f7fe f9c9 	bl	80009a8 <__aeabi_dcmpeq>
 8002616:	b9c0      	cbnz	r0, 800264a <_printf_float+0x40e>
 8002618:	4643      	mov	r3, r8
 800261a:	463a      	mov	r2, r7
 800261c:	4659      	mov	r1, fp
 800261e:	4628      	mov	r0, r5
 8002620:	47b0      	blx	r6
 8002622:	3001      	adds	r0, #1
 8002624:	d10d      	bne.n	8002642 <_printf_float+0x406>
 8002626:	e660      	b.n	80022ea <_printf_float+0xae>
 8002628:	2301      	movs	r3, #1
 800262a:	4642      	mov	r2, r8
 800262c:	4659      	mov	r1, fp
 800262e:	4628      	mov	r0, r5
 8002630:	47b0      	blx	r6
 8002632:	3001      	adds	r0, #1
 8002634:	f43f ae59 	beq.w	80022ea <_printf_float+0xae>
 8002638:	3701      	adds	r7, #1
 800263a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800263c:	3b01      	subs	r3, #1
 800263e:	42bb      	cmp	r3, r7
 8002640:	dcf2      	bgt.n	8002628 <_printf_float+0x3ec>
 8002642:	464b      	mov	r3, r9
 8002644:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8002648:	e6e4      	b.n	8002414 <_printf_float+0x1d8>
 800264a:	2700      	movs	r7, #0
 800264c:	f104 081a 	add.w	r8, r4, #26
 8002650:	e7f3      	b.n	800263a <_printf_float+0x3fe>
 8002652:	2301      	movs	r3, #1
 8002654:	e7e1      	b.n	800261a <_printf_float+0x3de>
 8002656:	2301      	movs	r3, #1
 8002658:	4642      	mov	r2, r8
 800265a:	4659      	mov	r1, fp
 800265c:	4628      	mov	r0, r5
 800265e:	47b0      	blx	r6
 8002660:	3001      	adds	r0, #1
 8002662:	f43f ae42 	beq.w	80022ea <_printf_float+0xae>
 8002666:	3701      	adds	r7, #1
 8002668:	68e3      	ldr	r3, [r4, #12]
 800266a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800266c:	1a9b      	subs	r3, r3, r2
 800266e:	42bb      	cmp	r3, r7
 8002670:	dcf1      	bgt.n	8002656 <_printf_float+0x41a>
 8002672:	e702      	b.n	800247a <_printf_float+0x23e>
 8002674:	2700      	movs	r7, #0
 8002676:	f104 0819 	add.w	r8, r4, #25
 800267a:	e7f5      	b.n	8002668 <_printf_float+0x42c>
 800267c:	2b00      	cmp	r3, #0
 800267e:	f43f ae94 	beq.w	80023aa <_printf_float+0x16e>
 8002682:	f04f 0c00 	mov.w	ip, #0
 8002686:	e9cd 1c05 	strd	r1, ip, [sp, #20]
 800268a:	f10d 0133 	add.w	r1, sp, #51	; 0x33
 800268e:	6022      	str	r2, [r4, #0]
 8002690:	e9cd 0803 	strd	r0, r8, [sp, #12]
 8002694:	e9cd 2101 	strd	r2, r1, [sp, #4]
 8002698:	9300      	str	r3, [sp, #0]
 800269a:	463a      	mov	r2, r7
 800269c:	464b      	mov	r3, r9
 800269e:	4628      	mov	r0, r5
 80026a0:	f7ff fd3a 	bl	8002118 <__cvt>
 80026a4:	4607      	mov	r7, r0
 80026a6:	e64f      	b.n	8002348 <_printf_float+0x10c>

080026a8 <_printf_common>:
 80026a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80026ac:	4691      	mov	r9, r2
 80026ae:	461f      	mov	r7, r3
 80026b0:	688a      	ldr	r2, [r1, #8]
 80026b2:	690b      	ldr	r3, [r1, #16]
 80026b4:	4606      	mov	r6, r0
 80026b6:	4293      	cmp	r3, r2
 80026b8:	bfb8      	it	lt
 80026ba:	4613      	movlt	r3, r2
 80026bc:	f8c9 3000 	str.w	r3, [r9]
 80026c0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80026c4:	460c      	mov	r4, r1
 80026c6:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80026ca:	b112      	cbz	r2, 80026d2 <_printf_common+0x2a>
 80026cc:	3301      	adds	r3, #1
 80026ce:	f8c9 3000 	str.w	r3, [r9]
 80026d2:	6823      	ldr	r3, [r4, #0]
 80026d4:	0699      	lsls	r1, r3, #26
 80026d6:	bf42      	ittt	mi
 80026d8:	f8d9 3000 	ldrmi.w	r3, [r9]
 80026dc:	3302      	addmi	r3, #2
 80026de:	f8c9 3000 	strmi.w	r3, [r9]
 80026e2:	6825      	ldr	r5, [r4, #0]
 80026e4:	f015 0506 	ands.w	r5, r5, #6
 80026e8:	d107      	bne.n	80026fa <_printf_common+0x52>
 80026ea:	f104 0a19 	add.w	sl, r4, #25
 80026ee:	68e3      	ldr	r3, [r4, #12]
 80026f0:	f8d9 2000 	ldr.w	r2, [r9]
 80026f4:	1a9b      	subs	r3, r3, r2
 80026f6:	42ab      	cmp	r3, r5
 80026f8:	dc29      	bgt.n	800274e <_printf_common+0xa6>
 80026fa:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80026fe:	6822      	ldr	r2, [r4, #0]
 8002700:	3300      	adds	r3, #0
 8002702:	bf18      	it	ne
 8002704:	2301      	movne	r3, #1
 8002706:	0692      	lsls	r2, r2, #26
 8002708:	d42e      	bmi.n	8002768 <_printf_common+0xc0>
 800270a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800270e:	4639      	mov	r1, r7
 8002710:	4630      	mov	r0, r6
 8002712:	47c0      	blx	r8
 8002714:	3001      	adds	r0, #1
 8002716:	d021      	beq.n	800275c <_printf_common+0xb4>
 8002718:	6823      	ldr	r3, [r4, #0]
 800271a:	68e5      	ldr	r5, [r4, #12]
 800271c:	f003 0306 	and.w	r3, r3, #6
 8002720:	2b04      	cmp	r3, #4
 8002722:	bf18      	it	ne
 8002724:	2500      	movne	r5, #0
 8002726:	f8d9 2000 	ldr.w	r2, [r9]
 800272a:	f04f 0900 	mov.w	r9, #0
 800272e:	bf08      	it	eq
 8002730:	1aad      	subeq	r5, r5, r2
 8002732:	68a3      	ldr	r3, [r4, #8]
 8002734:	6922      	ldr	r2, [r4, #16]
 8002736:	bf08      	it	eq
 8002738:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800273c:	4293      	cmp	r3, r2
 800273e:	bfc4      	itt	gt
 8002740:	1a9b      	subgt	r3, r3, r2
 8002742:	18ed      	addgt	r5, r5, r3
 8002744:	341a      	adds	r4, #26
 8002746:	454d      	cmp	r5, r9
 8002748:	d11a      	bne.n	8002780 <_printf_common+0xd8>
 800274a:	2000      	movs	r0, #0
 800274c:	e008      	b.n	8002760 <_printf_common+0xb8>
 800274e:	2301      	movs	r3, #1
 8002750:	4652      	mov	r2, sl
 8002752:	4639      	mov	r1, r7
 8002754:	4630      	mov	r0, r6
 8002756:	47c0      	blx	r8
 8002758:	3001      	adds	r0, #1
 800275a:	d103      	bne.n	8002764 <_printf_common+0xbc>
 800275c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002760:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002764:	3501      	adds	r5, #1
 8002766:	e7c2      	b.n	80026ee <_printf_common+0x46>
 8002768:	2030      	movs	r0, #48	; 0x30
 800276a:	18e1      	adds	r1, r4, r3
 800276c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8002770:	1c5a      	adds	r2, r3, #1
 8002772:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8002776:	4422      	add	r2, r4
 8002778:	3302      	adds	r3, #2
 800277a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800277e:	e7c4      	b.n	800270a <_printf_common+0x62>
 8002780:	2301      	movs	r3, #1
 8002782:	4622      	mov	r2, r4
 8002784:	4639      	mov	r1, r7
 8002786:	4630      	mov	r0, r6
 8002788:	47c0      	blx	r8
 800278a:	3001      	adds	r0, #1
 800278c:	d0e6      	beq.n	800275c <_printf_common+0xb4>
 800278e:	f109 0901 	add.w	r9, r9, #1
 8002792:	e7d8      	b.n	8002746 <_printf_common+0x9e>

08002794 <_printf_i>:
 8002794:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002798:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 800279c:	460c      	mov	r4, r1
 800279e:	7e09      	ldrb	r1, [r1, #24]
 80027a0:	b085      	sub	sp, #20
 80027a2:	296e      	cmp	r1, #110	; 0x6e
 80027a4:	4617      	mov	r7, r2
 80027a6:	4606      	mov	r6, r0
 80027a8:	4698      	mov	r8, r3
 80027aa:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80027ac:	f000 80b3 	beq.w	8002916 <_printf_i+0x182>
 80027b0:	d822      	bhi.n	80027f8 <_printf_i+0x64>
 80027b2:	2963      	cmp	r1, #99	; 0x63
 80027b4:	d036      	beq.n	8002824 <_printf_i+0x90>
 80027b6:	d80a      	bhi.n	80027ce <_printf_i+0x3a>
 80027b8:	2900      	cmp	r1, #0
 80027ba:	f000 80b9 	beq.w	8002930 <_printf_i+0x19c>
 80027be:	2958      	cmp	r1, #88	; 0x58
 80027c0:	f000 8083 	beq.w	80028ca <_printf_i+0x136>
 80027c4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80027c8:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 80027cc:	e032      	b.n	8002834 <_printf_i+0xa0>
 80027ce:	2964      	cmp	r1, #100	; 0x64
 80027d0:	d001      	beq.n	80027d6 <_printf_i+0x42>
 80027d2:	2969      	cmp	r1, #105	; 0x69
 80027d4:	d1f6      	bne.n	80027c4 <_printf_i+0x30>
 80027d6:	6820      	ldr	r0, [r4, #0]
 80027d8:	6813      	ldr	r3, [r2, #0]
 80027da:	0605      	lsls	r5, r0, #24
 80027dc:	f103 0104 	add.w	r1, r3, #4
 80027e0:	d52a      	bpl.n	8002838 <_printf_i+0xa4>
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	6011      	str	r1, [r2, #0]
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	da03      	bge.n	80027f2 <_printf_i+0x5e>
 80027ea:	222d      	movs	r2, #45	; 0x2d
 80027ec:	425b      	negs	r3, r3
 80027ee:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 80027f2:	486f      	ldr	r0, [pc, #444]	; (80029b0 <_printf_i+0x21c>)
 80027f4:	220a      	movs	r2, #10
 80027f6:	e039      	b.n	800286c <_printf_i+0xd8>
 80027f8:	2973      	cmp	r1, #115	; 0x73
 80027fa:	f000 809d 	beq.w	8002938 <_printf_i+0x1a4>
 80027fe:	d808      	bhi.n	8002812 <_printf_i+0x7e>
 8002800:	296f      	cmp	r1, #111	; 0x6f
 8002802:	d020      	beq.n	8002846 <_printf_i+0xb2>
 8002804:	2970      	cmp	r1, #112	; 0x70
 8002806:	d1dd      	bne.n	80027c4 <_printf_i+0x30>
 8002808:	6823      	ldr	r3, [r4, #0]
 800280a:	f043 0320 	orr.w	r3, r3, #32
 800280e:	6023      	str	r3, [r4, #0]
 8002810:	e003      	b.n	800281a <_printf_i+0x86>
 8002812:	2975      	cmp	r1, #117	; 0x75
 8002814:	d017      	beq.n	8002846 <_printf_i+0xb2>
 8002816:	2978      	cmp	r1, #120	; 0x78
 8002818:	d1d4      	bne.n	80027c4 <_printf_i+0x30>
 800281a:	2378      	movs	r3, #120	; 0x78
 800281c:	4865      	ldr	r0, [pc, #404]	; (80029b4 <_printf_i+0x220>)
 800281e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8002822:	e055      	b.n	80028d0 <_printf_i+0x13c>
 8002824:	6813      	ldr	r3, [r2, #0]
 8002826:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800282a:	1d19      	adds	r1, r3, #4
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	6011      	str	r1, [r2, #0]
 8002830:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002834:	2301      	movs	r3, #1
 8002836:	e08c      	b.n	8002952 <_printf_i+0x1be>
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	f010 0f40 	tst.w	r0, #64	; 0x40
 800283e:	6011      	str	r1, [r2, #0]
 8002840:	bf18      	it	ne
 8002842:	b21b      	sxthne	r3, r3
 8002844:	e7cf      	b.n	80027e6 <_printf_i+0x52>
 8002846:	6813      	ldr	r3, [r2, #0]
 8002848:	6825      	ldr	r5, [r4, #0]
 800284a:	1d18      	adds	r0, r3, #4
 800284c:	6010      	str	r0, [r2, #0]
 800284e:	0628      	lsls	r0, r5, #24
 8002850:	d501      	bpl.n	8002856 <_printf_i+0xc2>
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	e002      	b.n	800285c <_printf_i+0xc8>
 8002856:	0668      	lsls	r0, r5, #25
 8002858:	d5fb      	bpl.n	8002852 <_printf_i+0xbe>
 800285a:	881b      	ldrh	r3, [r3, #0]
 800285c:	296f      	cmp	r1, #111	; 0x6f
 800285e:	bf14      	ite	ne
 8002860:	220a      	movne	r2, #10
 8002862:	2208      	moveq	r2, #8
 8002864:	4852      	ldr	r0, [pc, #328]	; (80029b0 <_printf_i+0x21c>)
 8002866:	2100      	movs	r1, #0
 8002868:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800286c:	6865      	ldr	r5, [r4, #4]
 800286e:	2d00      	cmp	r5, #0
 8002870:	60a5      	str	r5, [r4, #8]
 8002872:	f2c0 8095 	blt.w	80029a0 <_printf_i+0x20c>
 8002876:	6821      	ldr	r1, [r4, #0]
 8002878:	f021 0104 	bic.w	r1, r1, #4
 800287c:	6021      	str	r1, [r4, #0]
 800287e:	2b00      	cmp	r3, #0
 8002880:	d13d      	bne.n	80028fe <_printf_i+0x16a>
 8002882:	2d00      	cmp	r5, #0
 8002884:	f040 808e 	bne.w	80029a4 <_printf_i+0x210>
 8002888:	4665      	mov	r5, ip
 800288a:	2a08      	cmp	r2, #8
 800288c:	d10b      	bne.n	80028a6 <_printf_i+0x112>
 800288e:	6823      	ldr	r3, [r4, #0]
 8002890:	07db      	lsls	r3, r3, #31
 8002892:	d508      	bpl.n	80028a6 <_printf_i+0x112>
 8002894:	6923      	ldr	r3, [r4, #16]
 8002896:	6862      	ldr	r2, [r4, #4]
 8002898:	429a      	cmp	r2, r3
 800289a:	bfde      	ittt	le
 800289c:	2330      	movle	r3, #48	; 0x30
 800289e:	f805 3c01 	strble.w	r3, [r5, #-1]
 80028a2:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 80028a6:	ebac 0305 	sub.w	r3, ip, r5
 80028aa:	6123      	str	r3, [r4, #16]
 80028ac:	f8cd 8000 	str.w	r8, [sp]
 80028b0:	463b      	mov	r3, r7
 80028b2:	aa03      	add	r2, sp, #12
 80028b4:	4621      	mov	r1, r4
 80028b6:	4630      	mov	r0, r6
 80028b8:	f7ff fef6 	bl	80026a8 <_printf_common>
 80028bc:	3001      	adds	r0, #1
 80028be:	d14d      	bne.n	800295c <_printf_i+0x1c8>
 80028c0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80028c4:	b005      	add	sp, #20
 80028c6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80028ca:	4839      	ldr	r0, [pc, #228]	; (80029b0 <_printf_i+0x21c>)
 80028cc:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 80028d0:	6813      	ldr	r3, [r2, #0]
 80028d2:	6821      	ldr	r1, [r4, #0]
 80028d4:	1d1d      	adds	r5, r3, #4
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	6015      	str	r5, [r2, #0]
 80028da:	060a      	lsls	r2, r1, #24
 80028dc:	d50b      	bpl.n	80028f6 <_printf_i+0x162>
 80028de:	07ca      	lsls	r2, r1, #31
 80028e0:	bf44      	itt	mi
 80028e2:	f041 0120 	orrmi.w	r1, r1, #32
 80028e6:	6021      	strmi	r1, [r4, #0]
 80028e8:	b91b      	cbnz	r3, 80028f2 <_printf_i+0x15e>
 80028ea:	6822      	ldr	r2, [r4, #0]
 80028ec:	f022 0220 	bic.w	r2, r2, #32
 80028f0:	6022      	str	r2, [r4, #0]
 80028f2:	2210      	movs	r2, #16
 80028f4:	e7b7      	b.n	8002866 <_printf_i+0xd2>
 80028f6:	064d      	lsls	r5, r1, #25
 80028f8:	bf48      	it	mi
 80028fa:	b29b      	uxthmi	r3, r3
 80028fc:	e7ef      	b.n	80028de <_printf_i+0x14a>
 80028fe:	4665      	mov	r5, ip
 8002900:	fbb3 f1f2 	udiv	r1, r3, r2
 8002904:	fb02 3311 	mls	r3, r2, r1, r3
 8002908:	5cc3      	ldrb	r3, [r0, r3]
 800290a:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800290e:	460b      	mov	r3, r1
 8002910:	2900      	cmp	r1, #0
 8002912:	d1f5      	bne.n	8002900 <_printf_i+0x16c>
 8002914:	e7b9      	b.n	800288a <_printf_i+0xf6>
 8002916:	6813      	ldr	r3, [r2, #0]
 8002918:	6825      	ldr	r5, [r4, #0]
 800291a:	1d18      	adds	r0, r3, #4
 800291c:	6961      	ldr	r1, [r4, #20]
 800291e:	6010      	str	r0, [r2, #0]
 8002920:	0628      	lsls	r0, r5, #24
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	d501      	bpl.n	800292a <_printf_i+0x196>
 8002926:	6019      	str	r1, [r3, #0]
 8002928:	e002      	b.n	8002930 <_printf_i+0x19c>
 800292a:	066a      	lsls	r2, r5, #25
 800292c:	d5fb      	bpl.n	8002926 <_printf_i+0x192>
 800292e:	8019      	strh	r1, [r3, #0]
 8002930:	2300      	movs	r3, #0
 8002932:	4665      	mov	r5, ip
 8002934:	6123      	str	r3, [r4, #16]
 8002936:	e7b9      	b.n	80028ac <_printf_i+0x118>
 8002938:	6813      	ldr	r3, [r2, #0]
 800293a:	1d19      	adds	r1, r3, #4
 800293c:	6011      	str	r1, [r2, #0]
 800293e:	681d      	ldr	r5, [r3, #0]
 8002940:	6862      	ldr	r2, [r4, #4]
 8002942:	2100      	movs	r1, #0
 8002944:	4628      	mov	r0, r5
 8002946:	f000 feb1 	bl	80036ac <memchr>
 800294a:	b108      	cbz	r0, 8002950 <_printf_i+0x1bc>
 800294c:	1b40      	subs	r0, r0, r5
 800294e:	6060      	str	r0, [r4, #4]
 8002950:	6863      	ldr	r3, [r4, #4]
 8002952:	6123      	str	r3, [r4, #16]
 8002954:	2300      	movs	r3, #0
 8002956:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800295a:	e7a7      	b.n	80028ac <_printf_i+0x118>
 800295c:	6923      	ldr	r3, [r4, #16]
 800295e:	462a      	mov	r2, r5
 8002960:	4639      	mov	r1, r7
 8002962:	4630      	mov	r0, r6
 8002964:	47c0      	blx	r8
 8002966:	3001      	adds	r0, #1
 8002968:	d0aa      	beq.n	80028c0 <_printf_i+0x12c>
 800296a:	6823      	ldr	r3, [r4, #0]
 800296c:	079b      	lsls	r3, r3, #30
 800296e:	d413      	bmi.n	8002998 <_printf_i+0x204>
 8002970:	68e0      	ldr	r0, [r4, #12]
 8002972:	9b03      	ldr	r3, [sp, #12]
 8002974:	4298      	cmp	r0, r3
 8002976:	bfb8      	it	lt
 8002978:	4618      	movlt	r0, r3
 800297a:	e7a3      	b.n	80028c4 <_printf_i+0x130>
 800297c:	2301      	movs	r3, #1
 800297e:	464a      	mov	r2, r9
 8002980:	4639      	mov	r1, r7
 8002982:	4630      	mov	r0, r6
 8002984:	47c0      	blx	r8
 8002986:	3001      	adds	r0, #1
 8002988:	d09a      	beq.n	80028c0 <_printf_i+0x12c>
 800298a:	3501      	adds	r5, #1
 800298c:	68e3      	ldr	r3, [r4, #12]
 800298e:	9a03      	ldr	r2, [sp, #12]
 8002990:	1a9b      	subs	r3, r3, r2
 8002992:	42ab      	cmp	r3, r5
 8002994:	dcf2      	bgt.n	800297c <_printf_i+0x1e8>
 8002996:	e7eb      	b.n	8002970 <_printf_i+0x1dc>
 8002998:	2500      	movs	r5, #0
 800299a:	f104 0919 	add.w	r9, r4, #25
 800299e:	e7f5      	b.n	800298c <_printf_i+0x1f8>
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d1ac      	bne.n	80028fe <_printf_i+0x16a>
 80029a4:	7803      	ldrb	r3, [r0, #0]
 80029a6:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80029aa:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80029ae:	e76c      	b.n	800288a <_printf_i+0xf6>
 80029b0:	080041f6 	.word	0x080041f6
 80029b4:	08004207 	.word	0x08004207

080029b8 <siprintf>:
 80029b8:	b40e      	push	{r1, r2, r3}
 80029ba:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80029be:	b500      	push	{lr}
 80029c0:	b09c      	sub	sp, #112	; 0x70
 80029c2:	ab1d      	add	r3, sp, #116	; 0x74
 80029c4:	9002      	str	r0, [sp, #8]
 80029c6:	9006      	str	r0, [sp, #24]
 80029c8:	9107      	str	r1, [sp, #28]
 80029ca:	9104      	str	r1, [sp, #16]
 80029cc:	4808      	ldr	r0, [pc, #32]	; (80029f0 <siprintf+0x38>)
 80029ce:	4909      	ldr	r1, [pc, #36]	; (80029f4 <siprintf+0x3c>)
 80029d0:	f853 2b04 	ldr.w	r2, [r3], #4
 80029d4:	9105      	str	r1, [sp, #20]
 80029d6:	6800      	ldr	r0, [r0, #0]
 80029d8:	a902      	add	r1, sp, #8
 80029da:	9301      	str	r3, [sp, #4]
 80029dc:	f001 fa6a 	bl	8003eb4 <_svfiprintf_r>
 80029e0:	2200      	movs	r2, #0
 80029e2:	9b02      	ldr	r3, [sp, #8]
 80029e4:	701a      	strb	r2, [r3, #0]
 80029e6:	b01c      	add	sp, #112	; 0x70
 80029e8:	f85d eb04 	ldr.w	lr, [sp], #4
 80029ec:	b003      	add	sp, #12
 80029ee:	4770      	bx	lr
 80029f0:	20000014 	.word	0x20000014
 80029f4:	ffff0208 	.word	0xffff0208

080029f8 <quorem>:
 80029f8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80029fc:	6903      	ldr	r3, [r0, #16]
 80029fe:	690c      	ldr	r4, [r1, #16]
 8002a00:	4680      	mov	r8, r0
 8002a02:	42a3      	cmp	r3, r4
 8002a04:	f2c0 8084 	blt.w	8002b10 <quorem+0x118>
 8002a08:	3c01      	subs	r4, #1
 8002a0a:	f101 0714 	add.w	r7, r1, #20
 8002a0e:	f100 0614 	add.w	r6, r0, #20
 8002a12:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 8002a16:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 8002a1a:	3501      	adds	r5, #1
 8002a1c:	fbb0 f5f5 	udiv	r5, r0, r5
 8002a20:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 8002a24:	eb06 030c 	add.w	r3, r6, ip
 8002a28:	eb07 090c 	add.w	r9, r7, ip
 8002a2c:	9301      	str	r3, [sp, #4]
 8002a2e:	b39d      	cbz	r5, 8002a98 <quorem+0xa0>
 8002a30:	f04f 0a00 	mov.w	sl, #0
 8002a34:	4638      	mov	r0, r7
 8002a36:	46b6      	mov	lr, r6
 8002a38:	46d3      	mov	fp, sl
 8002a3a:	f850 2b04 	ldr.w	r2, [r0], #4
 8002a3e:	b293      	uxth	r3, r2
 8002a40:	fb05 a303 	mla	r3, r5, r3, sl
 8002a44:	0c12      	lsrs	r2, r2, #16
 8002a46:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8002a4a:	fb05 a202 	mla	r2, r5, r2, sl
 8002a4e:	b29b      	uxth	r3, r3
 8002a50:	ebab 0303 	sub.w	r3, fp, r3
 8002a54:	f8de b000 	ldr.w	fp, [lr]
 8002a58:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 8002a5c:	fa1f fb8b 	uxth.w	fp, fp
 8002a60:	445b      	add	r3, fp
 8002a62:	fa1f fb82 	uxth.w	fp, r2
 8002a66:	f8de 2000 	ldr.w	r2, [lr]
 8002a6a:	4581      	cmp	r9, r0
 8002a6c:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 8002a70:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8002a74:	b29b      	uxth	r3, r3
 8002a76:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8002a7a:	ea4f 4b22 	mov.w	fp, r2, asr #16
 8002a7e:	f84e 3b04 	str.w	r3, [lr], #4
 8002a82:	d2da      	bcs.n	8002a3a <quorem+0x42>
 8002a84:	f856 300c 	ldr.w	r3, [r6, ip]
 8002a88:	b933      	cbnz	r3, 8002a98 <quorem+0xa0>
 8002a8a:	9b01      	ldr	r3, [sp, #4]
 8002a8c:	3b04      	subs	r3, #4
 8002a8e:	429e      	cmp	r6, r3
 8002a90:	461a      	mov	r2, r3
 8002a92:	d331      	bcc.n	8002af8 <quorem+0x100>
 8002a94:	f8c8 4010 	str.w	r4, [r8, #16]
 8002a98:	4640      	mov	r0, r8
 8002a9a:	f001 f835 	bl	8003b08 <__mcmp>
 8002a9e:	2800      	cmp	r0, #0
 8002aa0:	db26      	blt.n	8002af0 <quorem+0xf8>
 8002aa2:	4630      	mov	r0, r6
 8002aa4:	f04f 0c00 	mov.w	ip, #0
 8002aa8:	3501      	adds	r5, #1
 8002aaa:	f857 1b04 	ldr.w	r1, [r7], #4
 8002aae:	f8d0 e000 	ldr.w	lr, [r0]
 8002ab2:	b28b      	uxth	r3, r1
 8002ab4:	ebac 0303 	sub.w	r3, ip, r3
 8002ab8:	fa1f f28e 	uxth.w	r2, lr
 8002abc:	4413      	add	r3, r2
 8002abe:	0c0a      	lsrs	r2, r1, #16
 8002ac0:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8002ac4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8002ac8:	b29b      	uxth	r3, r3
 8002aca:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8002ace:	45b9      	cmp	r9, r7
 8002ad0:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8002ad4:	f840 3b04 	str.w	r3, [r0], #4
 8002ad8:	d2e7      	bcs.n	8002aaa <quorem+0xb2>
 8002ada:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 8002ade:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 8002ae2:	b92a      	cbnz	r2, 8002af0 <quorem+0xf8>
 8002ae4:	3b04      	subs	r3, #4
 8002ae6:	429e      	cmp	r6, r3
 8002ae8:	461a      	mov	r2, r3
 8002aea:	d30b      	bcc.n	8002b04 <quorem+0x10c>
 8002aec:	f8c8 4010 	str.w	r4, [r8, #16]
 8002af0:	4628      	mov	r0, r5
 8002af2:	b003      	add	sp, #12
 8002af4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002af8:	6812      	ldr	r2, [r2, #0]
 8002afa:	3b04      	subs	r3, #4
 8002afc:	2a00      	cmp	r2, #0
 8002afe:	d1c9      	bne.n	8002a94 <quorem+0x9c>
 8002b00:	3c01      	subs	r4, #1
 8002b02:	e7c4      	b.n	8002a8e <quorem+0x96>
 8002b04:	6812      	ldr	r2, [r2, #0]
 8002b06:	3b04      	subs	r3, #4
 8002b08:	2a00      	cmp	r2, #0
 8002b0a:	d1ef      	bne.n	8002aec <quorem+0xf4>
 8002b0c:	3c01      	subs	r4, #1
 8002b0e:	e7ea      	b.n	8002ae6 <quorem+0xee>
 8002b10:	2000      	movs	r0, #0
 8002b12:	e7ee      	b.n	8002af2 <quorem+0xfa>
 8002b14:	0000      	movs	r0, r0
	...

08002b18 <_dtoa_r>:
 8002b18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002b1c:	4616      	mov	r6, r2
 8002b1e:	461f      	mov	r7, r3
 8002b20:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8002b22:	b095      	sub	sp, #84	; 0x54
 8002b24:	4604      	mov	r4, r0
 8002b26:	f8dd 8084 	ldr.w	r8, [sp, #132]	; 0x84
 8002b2a:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8002b2e:	b93d      	cbnz	r5, 8002b40 <_dtoa_r+0x28>
 8002b30:	2010      	movs	r0, #16
 8002b32:	f000 fdb3 	bl	800369c <malloc>
 8002b36:	6260      	str	r0, [r4, #36]	; 0x24
 8002b38:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8002b3c:	6005      	str	r5, [r0, #0]
 8002b3e:	60c5      	str	r5, [r0, #12]
 8002b40:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002b42:	6819      	ldr	r1, [r3, #0]
 8002b44:	b151      	cbz	r1, 8002b5c <_dtoa_r+0x44>
 8002b46:	685a      	ldr	r2, [r3, #4]
 8002b48:	2301      	movs	r3, #1
 8002b4a:	4093      	lsls	r3, r2
 8002b4c:	604a      	str	r2, [r1, #4]
 8002b4e:	608b      	str	r3, [r1, #8]
 8002b50:	4620      	mov	r0, r4
 8002b52:	f000 fdf8 	bl	8003746 <_Bfree>
 8002b56:	2200      	movs	r2, #0
 8002b58:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002b5a:	601a      	str	r2, [r3, #0]
 8002b5c:	1e3b      	subs	r3, r7, #0
 8002b5e:	bfaf      	iteee	ge
 8002b60:	2300      	movge	r3, #0
 8002b62:	2201      	movlt	r2, #1
 8002b64:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8002b68:	9303      	strlt	r3, [sp, #12]
 8002b6a:	bfac      	ite	ge
 8002b6c:	f8c8 3000 	strge.w	r3, [r8]
 8002b70:	f8c8 2000 	strlt.w	r2, [r8]
 8002b74:	4bae      	ldr	r3, [pc, #696]	; (8002e30 <_dtoa_r+0x318>)
 8002b76:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8002b7a:	ea33 0308 	bics.w	r3, r3, r8
 8002b7e:	d11b      	bne.n	8002bb8 <_dtoa_r+0xa0>
 8002b80:	f242 730f 	movw	r3, #9999	; 0x270f
 8002b84:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8002b86:	6013      	str	r3, [r2, #0]
 8002b88:	9b02      	ldr	r3, [sp, #8]
 8002b8a:	b923      	cbnz	r3, 8002b96 <_dtoa_r+0x7e>
 8002b8c:	f3c8 0013 	ubfx	r0, r8, #0, #20
 8002b90:	2800      	cmp	r0, #0
 8002b92:	f000 8545 	beq.w	8003620 <_dtoa_r+0xb08>
 8002b96:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8002b98:	b953      	cbnz	r3, 8002bb0 <_dtoa_r+0x98>
 8002b9a:	4ba6      	ldr	r3, [pc, #664]	; (8002e34 <_dtoa_r+0x31c>)
 8002b9c:	e021      	b.n	8002be2 <_dtoa_r+0xca>
 8002b9e:	4ba6      	ldr	r3, [pc, #664]	; (8002e38 <_dtoa_r+0x320>)
 8002ba0:	9306      	str	r3, [sp, #24]
 8002ba2:	3308      	adds	r3, #8
 8002ba4:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8002ba6:	6013      	str	r3, [r2, #0]
 8002ba8:	9806      	ldr	r0, [sp, #24]
 8002baa:	b015      	add	sp, #84	; 0x54
 8002bac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002bb0:	4ba0      	ldr	r3, [pc, #640]	; (8002e34 <_dtoa_r+0x31c>)
 8002bb2:	9306      	str	r3, [sp, #24]
 8002bb4:	3303      	adds	r3, #3
 8002bb6:	e7f5      	b.n	8002ba4 <_dtoa_r+0x8c>
 8002bb8:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8002bbc:	2200      	movs	r2, #0
 8002bbe:	2300      	movs	r3, #0
 8002bc0:	4630      	mov	r0, r6
 8002bc2:	4639      	mov	r1, r7
 8002bc4:	f7fd fef0 	bl	80009a8 <__aeabi_dcmpeq>
 8002bc8:	4682      	mov	sl, r0
 8002bca:	b160      	cbz	r0, 8002be6 <_dtoa_r+0xce>
 8002bcc:	2301      	movs	r3, #1
 8002bce:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8002bd0:	6013      	str	r3, [r2, #0]
 8002bd2:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	f000 8520 	beq.w	800361a <_dtoa_r+0xb02>
 8002bda:	4b98      	ldr	r3, [pc, #608]	; (8002e3c <_dtoa_r+0x324>)
 8002bdc:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8002bde:	6013      	str	r3, [r2, #0]
 8002be0:	3b01      	subs	r3, #1
 8002be2:	9306      	str	r3, [sp, #24]
 8002be4:	e7e0      	b.n	8002ba8 <_dtoa_r+0x90>
 8002be6:	ab12      	add	r3, sp, #72	; 0x48
 8002be8:	9301      	str	r3, [sp, #4]
 8002bea:	ab13      	add	r3, sp, #76	; 0x4c
 8002bec:	9300      	str	r3, [sp, #0]
 8002bee:	4632      	mov	r2, r6
 8002bf0:	463b      	mov	r3, r7
 8002bf2:	4620      	mov	r0, r4
 8002bf4:	f001 f800 	bl	8003bf8 <__d2b>
 8002bf8:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8002bfc:	4683      	mov	fp, r0
 8002bfe:	2d00      	cmp	r5, #0
 8002c00:	d07d      	beq.n	8002cfe <_dtoa_r+0x1e6>
 8002c02:	46b0      	mov	r8, r6
 8002c04:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8002c08:	f043 597f 	orr.w	r9, r3, #1069547520	; 0x3fc00000
 8002c0c:	f449 1940 	orr.w	r9, r9, #3145728	; 0x300000
 8002c10:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8002c14:	f8cd a040 	str.w	sl, [sp, #64]	; 0x40
 8002c18:	2200      	movs	r2, #0
 8002c1a:	4b89      	ldr	r3, [pc, #548]	; (8002e40 <_dtoa_r+0x328>)
 8002c1c:	4640      	mov	r0, r8
 8002c1e:	4649      	mov	r1, r9
 8002c20:	f7fd faa2 	bl	8000168 <__aeabi_dsub>
 8002c24:	a37c      	add	r3, pc, #496	; (adr r3, 8002e18 <_dtoa_r+0x300>)
 8002c26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c2a:	f7fd fc55 	bl	80004d8 <__aeabi_dmul>
 8002c2e:	a37c      	add	r3, pc, #496	; (adr r3, 8002e20 <_dtoa_r+0x308>)
 8002c30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c34:	f7fd fa9a 	bl	800016c <__adddf3>
 8002c38:	4606      	mov	r6, r0
 8002c3a:	4628      	mov	r0, r5
 8002c3c:	460f      	mov	r7, r1
 8002c3e:	f7fd fbe1 	bl	8000404 <__aeabi_i2d>
 8002c42:	a379      	add	r3, pc, #484	; (adr r3, 8002e28 <_dtoa_r+0x310>)
 8002c44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c48:	f7fd fc46 	bl	80004d8 <__aeabi_dmul>
 8002c4c:	4602      	mov	r2, r0
 8002c4e:	460b      	mov	r3, r1
 8002c50:	4630      	mov	r0, r6
 8002c52:	4639      	mov	r1, r7
 8002c54:	f7fd fa8a 	bl	800016c <__adddf3>
 8002c58:	4606      	mov	r6, r0
 8002c5a:	460f      	mov	r7, r1
 8002c5c:	f7fd feec 	bl	8000a38 <__aeabi_d2iz>
 8002c60:	2200      	movs	r2, #0
 8002c62:	4682      	mov	sl, r0
 8002c64:	2300      	movs	r3, #0
 8002c66:	4630      	mov	r0, r6
 8002c68:	4639      	mov	r1, r7
 8002c6a:	f7fd fea7 	bl	80009bc <__aeabi_dcmplt>
 8002c6e:	b148      	cbz	r0, 8002c84 <_dtoa_r+0x16c>
 8002c70:	4650      	mov	r0, sl
 8002c72:	f7fd fbc7 	bl	8000404 <__aeabi_i2d>
 8002c76:	4632      	mov	r2, r6
 8002c78:	463b      	mov	r3, r7
 8002c7a:	f7fd fe95 	bl	80009a8 <__aeabi_dcmpeq>
 8002c7e:	b908      	cbnz	r0, 8002c84 <_dtoa_r+0x16c>
 8002c80:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8002c84:	f1ba 0f16 	cmp.w	sl, #22
 8002c88:	d85a      	bhi.n	8002d40 <_dtoa_r+0x228>
 8002c8a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8002c8e:	496d      	ldr	r1, [pc, #436]	; (8002e44 <_dtoa_r+0x32c>)
 8002c90:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8002c94:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002c98:	f7fd feae 	bl	80009f8 <__aeabi_dcmpgt>
 8002c9c:	2800      	cmp	r0, #0
 8002c9e:	d051      	beq.n	8002d44 <_dtoa_r+0x22c>
 8002ca0:	2300      	movs	r3, #0
 8002ca2:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8002ca6:	930d      	str	r3, [sp, #52]	; 0x34
 8002ca8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8002caa:	1b5d      	subs	r5, r3, r5
 8002cac:	1e6b      	subs	r3, r5, #1
 8002cae:	9307      	str	r3, [sp, #28]
 8002cb0:	bf43      	ittte	mi
 8002cb2:	2300      	movmi	r3, #0
 8002cb4:	f1c5 0901 	rsbmi	r9, r5, #1
 8002cb8:	9307      	strmi	r3, [sp, #28]
 8002cba:	f04f 0900 	movpl.w	r9, #0
 8002cbe:	f1ba 0f00 	cmp.w	sl, #0
 8002cc2:	db41      	blt.n	8002d48 <_dtoa_r+0x230>
 8002cc4:	9b07      	ldr	r3, [sp, #28]
 8002cc6:	f8cd a030 	str.w	sl, [sp, #48]	; 0x30
 8002cca:	4453      	add	r3, sl
 8002ccc:	9307      	str	r3, [sp, #28]
 8002cce:	2300      	movs	r3, #0
 8002cd0:	9308      	str	r3, [sp, #32]
 8002cd2:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8002cd4:	2b09      	cmp	r3, #9
 8002cd6:	f200 808f 	bhi.w	8002df8 <_dtoa_r+0x2e0>
 8002cda:	2b05      	cmp	r3, #5
 8002cdc:	bfc4      	itt	gt
 8002cde:	3b04      	subgt	r3, #4
 8002ce0:	931e      	strgt	r3, [sp, #120]	; 0x78
 8002ce2:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8002ce4:	bfc8      	it	gt
 8002ce6:	2500      	movgt	r5, #0
 8002ce8:	f1a3 0302 	sub.w	r3, r3, #2
 8002cec:	bfd8      	it	le
 8002cee:	2501      	movle	r5, #1
 8002cf0:	2b03      	cmp	r3, #3
 8002cf2:	f200 808d 	bhi.w	8002e10 <_dtoa_r+0x2f8>
 8002cf6:	e8df f003 	tbb	[pc, r3]
 8002cfa:	7d7b      	.short	0x7d7b
 8002cfc:	6f2f      	.short	0x6f2f
 8002cfe:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 8002d02:	441d      	add	r5, r3
 8002d04:	f205 4032 	addw	r0, r5, #1074	; 0x432
 8002d08:	2820      	cmp	r0, #32
 8002d0a:	dd13      	ble.n	8002d34 <_dtoa_r+0x21c>
 8002d0c:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 8002d10:	9b02      	ldr	r3, [sp, #8]
 8002d12:	fa08 f800 	lsl.w	r8, r8, r0
 8002d16:	f205 4012 	addw	r0, r5, #1042	; 0x412
 8002d1a:	fa23 f000 	lsr.w	r0, r3, r0
 8002d1e:	ea48 0000 	orr.w	r0, r8, r0
 8002d22:	f7fd fb5f 	bl	80003e4 <__aeabi_ui2d>
 8002d26:	2301      	movs	r3, #1
 8002d28:	4680      	mov	r8, r0
 8002d2a:	f1a1 79f8 	sub.w	r9, r1, #32505856	; 0x1f00000
 8002d2e:	3d01      	subs	r5, #1
 8002d30:	9310      	str	r3, [sp, #64]	; 0x40
 8002d32:	e771      	b.n	8002c18 <_dtoa_r+0x100>
 8002d34:	9b02      	ldr	r3, [sp, #8]
 8002d36:	f1c0 0020 	rsb	r0, r0, #32
 8002d3a:	fa03 f000 	lsl.w	r0, r3, r0
 8002d3e:	e7f0      	b.n	8002d22 <_dtoa_r+0x20a>
 8002d40:	2301      	movs	r3, #1
 8002d42:	e7b0      	b.n	8002ca6 <_dtoa_r+0x18e>
 8002d44:	900d      	str	r0, [sp, #52]	; 0x34
 8002d46:	e7af      	b.n	8002ca8 <_dtoa_r+0x190>
 8002d48:	f1ca 0300 	rsb	r3, sl, #0
 8002d4c:	9308      	str	r3, [sp, #32]
 8002d4e:	2300      	movs	r3, #0
 8002d50:	eba9 090a 	sub.w	r9, r9, sl
 8002d54:	930c      	str	r3, [sp, #48]	; 0x30
 8002d56:	e7bc      	b.n	8002cd2 <_dtoa_r+0x1ba>
 8002d58:	2301      	movs	r3, #1
 8002d5a:	9309      	str	r3, [sp, #36]	; 0x24
 8002d5c:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	dd74      	ble.n	8002e4c <_dtoa_r+0x334>
 8002d62:	4698      	mov	r8, r3
 8002d64:	9304      	str	r3, [sp, #16]
 8002d66:	2200      	movs	r2, #0
 8002d68:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8002d6a:	6072      	str	r2, [r6, #4]
 8002d6c:	2204      	movs	r2, #4
 8002d6e:	f102 0014 	add.w	r0, r2, #20
 8002d72:	4298      	cmp	r0, r3
 8002d74:	6871      	ldr	r1, [r6, #4]
 8002d76:	d96e      	bls.n	8002e56 <_dtoa_r+0x33e>
 8002d78:	4620      	mov	r0, r4
 8002d7a:	f000 fcb0 	bl	80036de <_Balloc>
 8002d7e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002d80:	6030      	str	r0, [r6, #0]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	f1b8 0f0e 	cmp.w	r8, #14
 8002d88:	9306      	str	r3, [sp, #24]
 8002d8a:	f200 80ed 	bhi.w	8002f68 <_dtoa_r+0x450>
 8002d8e:	2d00      	cmp	r5, #0
 8002d90:	f000 80ea 	beq.w	8002f68 <_dtoa_r+0x450>
 8002d94:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8002d98:	f1ba 0f00 	cmp.w	sl, #0
 8002d9c:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 8002da0:	dd77      	ble.n	8002e92 <_dtoa_r+0x37a>
 8002da2:	4a28      	ldr	r2, [pc, #160]	; (8002e44 <_dtoa_r+0x32c>)
 8002da4:	f00a 030f 	and.w	r3, sl, #15
 8002da8:	ea4f 162a 	mov.w	r6, sl, asr #4
 8002dac:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8002db0:	06f0      	lsls	r0, r6, #27
 8002db2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002db6:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8002dba:	d568      	bpl.n	8002e8e <_dtoa_r+0x376>
 8002dbc:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8002dc0:	4b21      	ldr	r3, [pc, #132]	; (8002e48 <_dtoa_r+0x330>)
 8002dc2:	2503      	movs	r5, #3
 8002dc4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8002dc8:	f7fd fcb0 	bl	800072c <__aeabi_ddiv>
 8002dcc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8002dd0:	f006 060f 	and.w	r6, r6, #15
 8002dd4:	4f1c      	ldr	r7, [pc, #112]	; (8002e48 <_dtoa_r+0x330>)
 8002dd6:	e04f      	b.n	8002e78 <_dtoa_r+0x360>
 8002dd8:	2301      	movs	r3, #1
 8002dda:	9309      	str	r3, [sp, #36]	; 0x24
 8002ddc:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8002dde:	4453      	add	r3, sl
 8002de0:	f103 0801 	add.w	r8, r3, #1
 8002de4:	9304      	str	r3, [sp, #16]
 8002de6:	4643      	mov	r3, r8
 8002de8:	2b01      	cmp	r3, #1
 8002dea:	bfb8      	it	lt
 8002dec:	2301      	movlt	r3, #1
 8002dee:	e7ba      	b.n	8002d66 <_dtoa_r+0x24e>
 8002df0:	2300      	movs	r3, #0
 8002df2:	e7b2      	b.n	8002d5a <_dtoa_r+0x242>
 8002df4:	2300      	movs	r3, #0
 8002df6:	e7f0      	b.n	8002dda <_dtoa_r+0x2c2>
 8002df8:	2501      	movs	r5, #1
 8002dfa:	2300      	movs	r3, #0
 8002dfc:	9509      	str	r5, [sp, #36]	; 0x24
 8002dfe:	931e      	str	r3, [sp, #120]	; 0x78
 8002e00:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002e04:	2200      	movs	r2, #0
 8002e06:	9304      	str	r3, [sp, #16]
 8002e08:	4698      	mov	r8, r3
 8002e0a:	2312      	movs	r3, #18
 8002e0c:	921f      	str	r2, [sp, #124]	; 0x7c
 8002e0e:	e7aa      	b.n	8002d66 <_dtoa_r+0x24e>
 8002e10:	2301      	movs	r3, #1
 8002e12:	9309      	str	r3, [sp, #36]	; 0x24
 8002e14:	e7f4      	b.n	8002e00 <_dtoa_r+0x2e8>
 8002e16:	bf00      	nop
 8002e18:	636f4361 	.word	0x636f4361
 8002e1c:	3fd287a7 	.word	0x3fd287a7
 8002e20:	8b60c8b3 	.word	0x8b60c8b3
 8002e24:	3fc68a28 	.word	0x3fc68a28
 8002e28:	509f79fb 	.word	0x509f79fb
 8002e2c:	3fd34413 	.word	0x3fd34413
 8002e30:	7ff00000 	.word	0x7ff00000
 8002e34:	08004221 	.word	0x08004221
 8002e38:	08004218 	.word	0x08004218
 8002e3c:	080041f5 	.word	0x080041f5
 8002e40:	3ff80000 	.word	0x3ff80000
 8002e44:	08004250 	.word	0x08004250
 8002e48:	08004228 	.word	0x08004228
 8002e4c:	2301      	movs	r3, #1
 8002e4e:	9304      	str	r3, [sp, #16]
 8002e50:	4698      	mov	r8, r3
 8002e52:	461a      	mov	r2, r3
 8002e54:	e7da      	b.n	8002e0c <_dtoa_r+0x2f4>
 8002e56:	3101      	adds	r1, #1
 8002e58:	6071      	str	r1, [r6, #4]
 8002e5a:	0052      	lsls	r2, r2, #1
 8002e5c:	e787      	b.n	8002d6e <_dtoa_r+0x256>
 8002e5e:	07f1      	lsls	r1, r6, #31
 8002e60:	d508      	bpl.n	8002e74 <_dtoa_r+0x35c>
 8002e62:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8002e66:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002e6a:	f7fd fb35 	bl	80004d8 <__aeabi_dmul>
 8002e6e:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8002e72:	3501      	adds	r5, #1
 8002e74:	1076      	asrs	r6, r6, #1
 8002e76:	3708      	adds	r7, #8
 8002e78:	2e00      	cmp	r6, #0
 8002e7a:	d1f0      	bne.n	8002e5e <_dtoa_r+0x346>
 8002e7c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8002e80:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8002e84:	f7fd fc52 	bl	800072c <__aeabi_ddiv>
 8002e88:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8002e8c:	e01b      	b.n	8002ec6 <_dtoa_r+0x3ae>
 8002e8e:	2502      	movs	r5, #2
 8002e90:	e7a0      	b.n	8002dd4 <_dtoa_r+0x2bc>
 8002e92:	f000 80a4 	beq.w	8002fde <_dtoa_r+0x4c6>
 8002e96:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8002e9a:	f1ca 0600 	rsb	r6, sl, #0
 8002e9e:	4ba0      	ldr	r3, [pc, #640]	; (8003120 <_dtoa_r+0x608>)
 8002ea0:	f006 020f 	and.w	r2, r6, #15
 8002ea4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8002ea8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002eac:	f7fd fb14 	bl	80004d8 <__aeabi_dmul>
 8002eb0:	2502      	movs	r5, #2
 8002eb2:	2300      	movs	r3, #0
 8002eb4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8002eb8:	4f9a      	ldr	r7, [pc, #616]	; (8003124 <_dtoa_r+0x60c>)
 8002eba:	1136      	asrs	r6, r6, #4
 8002ebc:	2e00      	cmp	r6, #0
 8002ebe:	f040 8083 	bne.w	8002fc8 <_dtoa_r+0x4b0>
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d1e0      	bne.n	8002e88 <_dtoa_r+0x370>
 8002ec6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	f000 808a 	beq.w	8002fe2 <_dtoa_r+0x4ca>
 8002ece:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8002ed2:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8002ed6:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8002eda:	2200      	movs	r2, #0
 8002edc:	4b92      	ldr	r3, [pc, #584]	; (8003128 <_dtoa_r+0x610>)
 8002ede:	f7fd fd6d 	bl	80009bc <__aeabi_dcmplt>
 8002ee2:	2800      	cmp	r0, #0
 8002ee4:	d07d      	beq.n	8002fe2 <_dtoa_r+0x4ca>
 8002ee6:	f1b8 0f00 	cmp.w	r8, #0
 8002eea:	d07a      	beq.n	8002fe2 <_dtoa_r+0x4ca>
 8002eec:	9b04      	ldr	r3, [sp, #16]
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	dd36      	ble.n	8002f60 <_dtoa_r+0x448>
 8002ef2:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8002ef6:	2200      	movs	r2, #0
 8002ef8:	4b8c      	ldr	r3, [pc, #560]	; (800312c <_dtoa_r+0x614>)
 8002efa:	f7fd faed 	bl	80004d8 <__aeabi_dmul>
 8002efe:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8002f02:	9e04      	ldr	r6, [sp, #16]
 8002f04:	f10a 37ff 	add.w	r7, sl, #4294967295	; 0xffffffff
 8002f08:	3501      	adds	r5, #1
 8002f0a:	4628      	mov	r0, r5
 8002f0c:	f7fd fa7a 	bl	8000404 <__aeabi_i2d>
 8002f10:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8002f14:	f7fd fae0 	bl	80004d8 <__aeabi_dmul>
 8002f18:	2200      	movs	r2, #0
 8002f1a:	4b85      	ldr	r3, [pc, #532]	; (8003130 <_dtoa_r+0x618>)
 8002f1c:	f7fd f926 	bl	800016c <__adddf3>
 8002f20:	f1a1 7550 	sub.w	r5, r1, #54525952	; 0x3400000
 8002f24:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8002f28:	950b      	str	r5, [sp, #44]	; 0x2c
 8002f2a:	2e00      	cmp	r6, #0
 8002f2c:	d15c      	bne.n	8002fe8 <_dtoa_r+0x4d0>
 8002f2e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8002f32:	2200      	movs	r2, #0
 8002f34:	4b7f      	ldr	r3, [pc, #508]	; (8003134 <_dtoa_r+0x61c>)
 8002f36:	f7fd f917 	bl	8000168 <__aeabi_dsub>
 8002f3a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8002f3c:	462b      	mov	r3, r5
 8002f3e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8002f42:	f7fd fd59 	bl	80009f8 <__aeabi_dcmpgt>
 8002f46:	2800      	cmp	r0, #0
 8002f48:	f040 8281 	bne.w	800344e <_dtoa_r+0x936>
 8002f4c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8002f50:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8002f52:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 8002f56:	f7fd fd31 	bl	80009bc <__aeabi_dcmplt>
 8002f5a:	2800      	cmp	r0, #0
 8002f5c:	f040 8275 	bne.w	800344a <_dtoa_r+0x932>
 8002f60:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 8002f64:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8002f68:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	f2c0 814b 	blt.w	8003206 <_dtoa_r+0x6ee>
 8002f70:	f1ba 0f0e 	cmp.w	sl, #14
 8002f74:	f300 8147 	bgt.w	8003206 <_dtoa_r+0x6ee>
 8002f78:	4b69      	ldr	r3, [pc, #420]	; (8003120 <_dtoa_r+0x608>)
 8002f7a:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8002f7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f82:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8002f86:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	f280 80d7 	bge.w	800313c <_dtoa_r+0x624>
 8002f8e:	f1b8 0f00 	cmp.w	r8, #0
 8002f92:	f300 80d3 	bgt.w	800313c <_dtoa_r+0x624>
 8002f96:	f040 8257 	bne.w	8003448 <_dtoa_r+0x930>
 8002f9a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8002f9e:	2200      	movs	r2, #0
 8002fa0:	4b64      	ldr	r3, [pc, #400]	; (8003134 <_dtoa_r+0x61c>)
 8002fa2:	f7fd fa99 	bl	80004d8 <__aeabi_dmul>
 8002fa6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8002faa:	f7fd fd1b 	bl	80009e4 <__aeabi_dcmpge>
 8002fae:	4646      	mov	r6, r8
 8002fb0:	4647      	mov	r7, r8
 8002fb2:	2800      	cmp	r0, #0
 8002fb4:	f040 822d 	bne.w	8003412 <_dtoa_r+0x8fa>
 8002fb8:	9b06      	ldr	r3, [sp, #24]
 8002fba:	9a06      	ldr	r2, [sp, #24]
 8002fbc:	1c5d      	adds	r5, r3, #1
 8002fbe:	2331      	movs	r3, #49	; 0x31
 8002fc0:	f10a 0a01 	add.w	sl, sl, #1
 8002fc4:	7013      	strb	r3, [r2, #0]
 8002fc6:	e228      	b.n	800341a <_dtoa_r+0x902>
 8002fc8:	07f2      	lsls	r2, r6, #31
 8002fca:	d505      	bpl.n	8002fd8 <_dtoa_r+0x4c0>
 8002fcc:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002fd0:	f7fd fa82 	bl	80004d8 <__aeabi_dmul>
 8002fd4:	2301      	movs	r3, #1
 8002fd6:	3501      	adds	r5, #1
 8002fd8:	1076      	asrs	r6, r6, #1
 8002fda:	3708      	adds	r7, #8
 8002fdc:	e76e      	b.n	8002ebc <_dtoa_r+0x3a4>
 8002fde:	2502      	movs	r5, #2
 8002fe0:	e771      	b.n	8002ec6 <_dtoa_r+0x3ae>
 8002fe2:	4657      	mov	r7, sl
 8002fe4:	4646      	mov	r6, r8
 8002fe6:	e790      	b.n	8002f0a <_dtoa_r+0x3f2>
 8002fe8:	4b4d      	ldr	r3, [pc, #308]	; (8003120 <_dtoa_r+0x608>)
 8002fea:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8002fee:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 8002ff2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d048      	beq.n	800308a <_dtoa_r+0x572>
 8002ff8:	4602      	mov	r2, r0
 8002ffa:	460b      	mov	r3, r1
 8002ffc:	2000      	movs	r0, #0
 8002ffe:	494e      	ldr	r1, [pc, #312]	; (8003138 <_dtoa_r+0x620>)
 8003000:	f7fd fb94 	bl	800072c <__aeabi_ddiv>
 8003004:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8003008:	f7fd f8ae 	bl	8000168 <__aeabi_dsub>
 800300c:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8003010:	9d06      	ldr	r5, [sp, #24]
 8003012:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003016:	f7fd fd0f 	bl	8000a38 <__aeabi_d2iz>
 800301a:	9011      	str	r0, [sp, #68]	; 0x44
 800301c:	f7fd f9f2 	bl	8000404 <__aeabi_i2d>
 8003020:	4602      	mov	r2, r0
 8003022:	460b      	mov	r3, r1
 8003024:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003028:	f7fd f89e 	bl	8000168 <__aeabi_dsub>
 800302c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800302e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8003032:	3330      	adds	r3, #48	; 0x30
 8003034:	f805 3b01 	strb.w	r3, [r5], #1
 8003038:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800303c:	f7fd fcbe 	bl	80009bc <__aeabi_dcmplt>
 8003040:	2800      	cmp	r0, #0
 8003042:	d163      	bne.n	800310c <_dtoa_r+0x5f4>
 8003044:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8003048:	2000      	movs	r0, #0
 800304a:	4937      	ldr	r1, [pc, #220]	; (8003128 <_dtoa_r+0x610>)
 800304c:	f7fd f88c 	bl	8000168 <__aeabi_dsub>
 8003050:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8003054:	f7fd fcb2 	bl	80009bc <__aeabi_dcmplt>
 8003058:	2800      	cmp	r0, #0
 800305a:	f040 80b5 	bne.w	80031c8 <_dtoa_r+0x6b0>
 800305e:	9b06      	ldr	r3, [sp, #24]
 8003060:	1aeb      	subs	r3, r5, r3
 8003062:	429e      	cmp	r6, r3
 8003064:	f77f af7c 	ble.w	8002f60 <_dtoa_r+0x448>
 8003068:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800306c:	2200      	movs	r2, #0
 800306e:	4b2f      	ldr	r3, [pc, #188]	; (800312c <_dtoa_r+0x614>)
 8003070:	f7fd fa32 	bl	80004d8 <__aeabi_dmul>
 8003074:	2200      	movs	r2, #0
 8003076:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800307a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800307e:	4b2b      	ldr	r3, [pc, #172]	; (800312c <_dtoa_r+0x614>)
 8003080:	f7fd fa2a 	bl	80004d8 <__aeabi_dmul>
 8003084:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8003088:	e7c3      	b.n	8003012 <_dtoa_r+0x4fa>
 800308a:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800308e:	f7fd fa23 	bl	80004d8 <__aeabi_dmul>
 8003092:	9b06      	ldr	r3, [sp, #24]
 8003094:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8003098:	199d      	adds	r5, r3, r6
 800309a:	461e      	mov	r6, r3
 800309c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80030a0:	f7fd fcca 	bl	8000a38 <__aeabi_d2iz>
 80030a4:	9011      	str	r0, [sp, #68]	; 0x44
 80030a6:	f7fd f9ad 	bl	8000404 <__aeabi_i2d>
 80030aa:	4602      	mov	r2, r0
 80030ac:	460b      	mov	r3, r1
 80030ae:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80030b2:	f7fd f859 	bl	8000168 <__aeabi_dsub>
 80030b6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80030b8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80030bc:	3330      	adds	r3, #48	; 0x30
 80030be:	f806 3b01 	strb.w	r3, [r6], #1
 80030c2:	42ae      	cmp	r6, r5
 80030c4:	f04f 0200 	mov.w	r2, #0
 80030c8:	d124      	bne.n	8003114 <_dtoa_r+0x5fc>
 80030ca:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80030ce:	4b1a      	ldr	r3, [pc, #104]	; (8003138 <_dtoa_r+0x620>)
 80030d0:	f7fd f84c 	bl	800016c <__adddf3>
 80030d4:	4602      	mov	r2, r0
 80030d6:	460b      	mov	r3, r1
 80030d8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80030dc:	f7fd fc8c 	bl	80009f8 <__aeabi_dcmpgt>
 80030e0:	2800      	cmp	r0, #0
 80030e2:	d171      	bne.n	80031c8 <_dtoa_r+0x6b0>
 80030e4:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80030e8:	2000      	movs	r0, #0
 80030ea:	4913      	ldr	r1, [pc, #76]	; (8003138 <_dtoa_r+0x620>)
 80030ec:	f7fd f83c 	bl	8000168 <__aeabi_dsub>
 80030f0:	4602      	mov	r2, r0
 80030f2:	460b      	mov	r3, r1
 80030f4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80030f8:	f7fd fc60 	bl	80009bc <__aeabi_dcmplt>
 80030fc:	2800      	cmp	r0, #0
 80030fe:	f43f af2f 	beq.w	8002f60 <_dtoa_r+0x448>
 8003102:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8003106:	1e6a      	subs	r2, r5, #1
 8003108:	2b30      	cmp	r3, #48	; 0x30
 800310a:	d001      	beq.n	8003110 <_dtoa_r+0x5f8>
 800310c:	46ba      	mov	sl, r7
 800310e:	e04a      	b.n	80031a6 <_dtoa_r+0x68e>
 8003110:	4615      	mov	r5, r2
 8003112:	e7f6      	b.n	8003102 <_dtoa_r+0x5ea>
 8003114:	4b05      	ldr	r3, [pc, #20]	; (800312c <_dtoa_r+0x614>)
 8003116:	f7fd f9df 	bl	80004d8 <__aeabi_dmul>
 800311a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800311e:	e7bd      	b.n	800309c <_dtoa_r+0x584>
 8003120:	08004250 	.word	0x08004250
 8003124:	08004228 	.word	0x08004228
 8003128:	3ff00000 	.word	0x3ff00000
 800312c:	40240000 	.word	0x40240000
 8003130:	401c0000 	.word	0x401c0000
 8003134:	40140000 	.word	0x40140000
 8003138:	3fe00000 	.word	0x3fe00000
 800313c:	9d06      	ldr	r5, [sp, #24]
 800313e:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8003142:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8003146:	4630      	mov	r0, r6
 8003148:	4639      	mov	r1, r7
 800314a:	f7fd faef 	bl	800072c <__aeabi_ddiv>
 800314e:	f7fd fc73 	bl	8000a38 <__aeabi_d2iz>
 8003152:	4681      	mov	r9, r0
 8003154:	f7fd f956 	bl	8000404 <__aeabi_i2d>
 8003158:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800315c:	f7fd f9bc 	bl	80004d8 <__aeabi_dmul>
 8003160:	4602      	mov	r2, r0
 8003162:	460b      	mov	r3, r1
 8003164:	4630      	mov	r0, r6
 8003166:	4639      	mov	r1, r7
 8003168:	f7fc fffe 	bl	8000168 <__aeabi_dsub>
 800316c:	f109 0630 	add.w	r6, r9, #48	; 0x30
 8003170:	f805 6b01 	strb.w	r6, [r5], #1
 8003174:	9e06      	ldr	r6, [sp, #24]
 8003176:	4602      	mov	r2, r0
 8003178:	1bae      	subs	r6, r5, r6
 800317a:	45b0      	cmp	r8, r6
 800317c:	460b      	mov	r3, r1
 800317e:	d135      	bne.n	80031ec <_dtoa_r+0x6d4>
 8003180:	f7fc fff4 	bl	800016c <__adddf3>
 8003184:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8003188:	4606      	mov	r6, r0
 800318a:	460f      	mov	r7, r1
 800318c:	f7fd fc34 	bl	80009f8 <__aeabi_dcmpgt>
 8003190:	b9c8      	cbnz	r0, 80031c6 <_dtoa_r+0x6ae>
 8003192:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8003196:	4630      	mov	r0, r6
 8003198:	4639      	mov	r1, r7
 800319a:	f7fd fc05 	bl	80009a8 <__aeabi_dcmpeq>
 800319e:	b110      	cbz	r0, 80031a6 <_dtoa_r+0x68e>
 80031a0:	f019 0f01 	tst.w	r9, #1
 80031a4:	d10f      	bne.n	80031c6 <_dtoa_r+0x6ae>
 80031a6:	4659      	mov	r1, fp
 80031a8:	4620      	mov	r0, r4
 80031aa:	f000 facc 	bl	8003746 <_Bfree>
 80031ae:	2300      	movs	r3, #0
 80031b0:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80031b2:	702b      	strb	r3, [r5, #0]
 80031b4:	f10a 0301 	add.w	r3, sl, #1
 80031b8:	6013      	str	r3, [r2, #0]
 80031ba:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80031bc:	2b00      	cmp	r3, #0
 80031be:	f43f acf3 	beq.w	8002ba8 <_dtoa_r+0x90>
 80031c2:	601d      	str	r5, [r3, #0]
 80031c4:	e4f0      	b.n	8002ba8 <_dtoa_r+0x90>
 80031c6:	4657      	mov	r7, sl
 80031c8:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80031cc:	1e6b      	subs	r3, r5, #1
 80031ce:	2a39      	cmp	r2, #57	; 0x39
 80031d0:	d106      	bne.n	80031e0 <_dtoa_r+0x6c8>
 80031d2:	9a06      	ldr	r2, [sp, #24]
 80031d4:	429a      	cmp	r2, r3
 80031d6:	d107      	bne.n	80031e8 <_dtoa_r+0x6d0>
 80031d8:	2330      	movs	r3, #48	; 0x30
 80031da:	7013      	strb	r3, [r2, #0]
 80031dc:	4613      	mov	r3, r2
 80031de:	3701      	adds	r7, #1
 80031e0:	781a      	ldrb	r2, [r3, #0]
 80031e2:	3201      	adds	r2, #1
 80031e4:	701a      	strb	r2, [r3, #0]
 80031e6:	e791      	b.n	800310c <_dtoa_r+0x5f4>
 80031e8:	461d      	mov	r5, r3
 80031ea:	e7ed      	b.n	80031c8 <_dtoa_r+0x6b0>
 80031ec:	2200      	movs	r2, #0
 80031ee:	4b99      	ldr	r3, [pc, #612]	; (8003454 <_dtoa_r+0x93c>)
 80031f0:	f7fd f972 	bl	80004d8 <__aeabi_dmul>
 80031f4:	2200      	movs	r2, #0
 80031f6:	2300      	movs	r3, #0
 80031f8:	4606      	mov	r6, r0
 80031fa:	460f      	mov	r7, r1
 80031fc:	f7fd fbd4 	bl	80009a8 <__aeabi_dcmpeq>
 8003200:	2800      	cmp	r0, #0
 8003202:	d09e      	beq.n	8003142 <_dtoa_r+0x62a>
 8003204:	e7cf      	b.n	80031a6 <_dtoa_r+0x68e>
 8003206:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003208:	2a00      	cmp	r2, #0
 800320a:	f000 8088 	beq.w	800331e <_dtoa_r+0x806>
 800320e:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8003210:	2a01      	cmp	r2, #1
 8003212:	dc6d      	bgt.n	80032f0 <_dtoa_r+0x7d8>
 8003214:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8003216:	2a00      	cmp	r2, #0
 8003218:	d066      	beq.n	80032e8 <_dtoa_r+0x7d0>
 800321a:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800321e:	464d      	mov	r5, r9
 8003220:	9e08      	ldr	r6, [sp, #32]
 8003222:	9a07      	ldr	r2, [sp, #28]
 8003224:	2101      	movs	r1, #1
 8003226:	441a      	add	r2, r3
 8003228:	4620      	mov	r0, r4
 800322a:	4499      	add	r9, r3
 800322c:	9207      	str	r2, [sp, #28]
 800322e:	f000 fb2a 	bl	8003886 <__i2b>
 8003232:	4607      	mov	r7, r0
 8003234:	2d00      	cmp	r5, #0
 8003236:	dd0b      	ble.n	8003250 <_dtoa_r+0x738>
 8003238:	9b07      	ldr	r3, [sp, #28]
 800323a:	2b00      	cmp	r3, #0
 800323c:	dd08      	ble.n	8003250 <_dtoa_r+0x738>
 800323e:	42ab      	cmp	r3, r5
 8003240:	bfa8      	it	ge
 8003242:	462b      	movge	r3, r5
 8003244:	9a07      	ldr	r2, [sp, #28]
 8003246:	eba9 0903 	sub.w	r9, r9, r3
 800324a:	1aed      	subs	r5, r5, r3
 800324c:	1ad3      	subs	r3, r2, r3
 800324e:	9307      	str	r3, [sp, #28]
 8003250:	9b08      	ldr	r3, [sp, #32]
 8003252:	b1eb      	cbz	r3, 8003290 <_dtoa_r+0x778>
 8003254:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003256:	2b00      	cmp	r3, #0
 8003258:	d065      	beq.n	8003326 <_dtoa_r+0x80e>
 800325a:	b18e      	cbz	r6, 8003280 <_dtoa_r+0x768>
 800325c:	4639      	mov	r1, r7
 800325e:	4632      	mov	r2, r6
 8003260:	4620      	mov	r0, r4
 8003262:	f000 fbaf 	bl	80039c4 <__pow5mult>
 8003266:	465a      	mov	r2, fp
 8003268:	4601      	mov	r1, r0
 800326a:	4607      	mov	r7, r0
 800326c:	4620      	mov	r0, r4
 800326e:	f000 fb13 	bl	8003898 <__multiply>
 8003272:	4659      	mov	r1, fp
 8003274:	900a      	str	r0, [sp, #40]	; 0x28
 8003276:	4620      	mov	r0, r4
 8003278:	f000 fa65 	bl	8003746 <_Bfree>
 800327c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800327e:	469b      	mov	fp, r3
 8003280:	9b08      	ldr	r3, [sp, #32]
 8003282:	1b9a      	subs	r2, r3, r6
 8003284:	d004      	beq.n	8003290 <_dtoa_r+0x778>
 8003286:	4659      	mov	r1, fp
 8003288:	4620      	mov	r0, r4
 800328a:	f000 fb9b 	bl	80039c4 <__pow5mult>
 800328e:	4683      	mov	fp, r0
 8003290:	2101      	movs	r1, #1
 8003292:	4620      	mov	r0, r4
 8003294:	f000 faf7 	bl	8003886 <__i2b>
 8003298:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800329a:	4606      	mov	r6, r0
 800329c:	2b00      	cmp	r3, #0
 800329e:	f000 81c6 	beq.w	800362e <_dtoa_r+0xb16>
 80032a2:	461a      	mov	r2, r3
 80032a4:	4601      	mov	r1, r0
 80032a6:	4620      	mov	r0, r4
 80032a8:	f000 fb8c 	bl	80039c4 <__pow5mult>
 80032ac:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80032ae:	4606      	mov	r6, r0
 80032b0:	2b01      	cmp	r3, #1
 80032b2:	dc3e      	bgt.n	8003332 <_dtoa_r+0x81a>
 80032b4:	9b02      	ldr	r3, [sp, #8]
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d137      	bne.n	800332a <_dtoa_r+0x812>
 80032ba:	9b03      	ldr	r3, [sp, #12]
 80032bc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	d134      	bne.n	800332e <_dtoa_r+0x816>
 80032c4:	9b03      	ldr	r3, [sp, #12]
 80032c6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80032ca:	0d1b      	lsrs	r3, r3, #20
 80032cc:	051b      	lsls	r3, r3, #20
 80032ce:	b12b      	cbz	r3, 80032dc <_dtoa_r+0x7c4>
 80032d0:	9b07      	ldr	r3, [sp, #28]
 80032d2:	f109 0901 	add.w	r9, r9, #1
 80032d6:	3301      	adds	r3, #1
 80032d8:	9307      	str	r3, [sp, #28]
 80032da:	2301      	movs	r3, #1
 80032dc:	9308      	str	r3, [sp, #32]
 80032de:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d128      	bne.n	8003336 <_dtoa_r+0x81e>
 80032e4:	2001      	movs	r0, #1
 80032e6:	e02e      	b.n	8003346 <_dtoa_r+0x82e>
 80032e8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80032ea:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80032ee:	e796      	b.n	800321e <_dtoa_r+0x706>
 80032f0:	9b08      	ldr	r3, [sp, #32]
 80032f2:	f108 36ff 	add.w	r6, r8, #4294967295	; 0xffffffff
 80032f6:	42b3      	cmp	r3, r6
 80032f8:	bfb7      	itett	lt
 80032fa:	9b08      	ldrlt	r3, [sp, #32]
 80032fc:	1b9e      	subge	r6, r3, r6
 80032fe:	1af2      	sublt	r2, r6, r3
 8003300:	9b0c      	ldrlt	r3, [sp, #48]	; 0x30
 8003302:	bfbf      	itttt	lt
 8003304:	9608      	strlt	r6, [sp, #32]
 8003306:	189b      	addlt	r3, r3, r2
 8003308:	930c      	strlt	r3, [sp, #48]	; 0x30
 800330a:	2600      	movlt	r6, #0
 800330c:	f1b8 0f00 	cmp.w	r8, #0
 8003310:	bfb9      	ittee	lt
 8003312:	eba9 0508 	sublt.w	r5, r9, r8
 8003316:	2300      	movlt	r3, #0
 8003318:	464d      	movge	r5, r9
 800331a:	4643      	movge	r3, r8
 800331c:	e781      	b.n	8003222 <_dtoa_r+0x70a>
 800331e:	9e08      	ldr	r6, [sp, #32]
 8003320:	464d      	mov	r5, r9
 8003322:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8003324:	e786      	b.n	8003234 <_dtoa_r+0x71c>
 8003326:	9a08      	ldr	r2, [sp, #32]
 8003328:	e7ad      	b.n	8003286 <_dtoa_r+0x76e>
 800332a:	2300      	movs	r3, #0
 800332c:	e7d6      	b.n	80032dc <_dtoa_r+0x7c4>
 800332e:	9b02      	ldr	r3, [sp, #8]
 8003330:	e7d4      	b.n	80032dc <_dtoa_r+0x7c4>
 8003332:	2300      	movs	r3, #0
 8003334:	9308      	str	r3, [sp, #32]
 8003336:	6933      	ldr	r3, [r6, #16]
 8003338:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800333c:	6918      	ldr	r0, [r3, #16]
 800333e:	f000 fa54 	bl	80037ea <__hi0bits>
 8003342:	f1c0 0020 	rsb	r0, r0, #32
 8003346:	9b07      	ldr	r3, [sp, #28]
 8003348:	4418      	add	r0, r3
 800334a:	f010 001f 	ands.w	r0, r0, #31
 800334e:	d047      	beq.n	80033e0 <_dtoa_r+0x8c8>
 8003350:	f1c0 0320 	rsb	r3, r0, #32
 8003354:	2b04      	cmp	r3, #4
 8003356:	dd3b      	ble.n	80033d0 <_dtoa_r+0x8b8>
 8003358:	9b07      	ldr	r3, [sp, #28]
 800335a:	f1c0 001c 	rsb	r0, r0, #28
 800335e:	4481      	add	r9, r0
 8003360:	4405      	add	r5, r0
 8003362:	4403      	add	r3, r0
 8003364:	9307      	str	r3, [sp, #28]
 8003366:	f1b9 0f00 	cmp.w	r9, #0
 800336a:	dd05      	ble.n	8003378 <_dtoa_r+0x860>
 800336c:	4659      	mov	r1, fp
 800336e:	464a      	mov	r2, r9
 8003370:	4620      	mov	r0, r4
 8003372:	f000 fb75 	bl	8003a60 <__lshift>
 8003376:	4683      	mov	fp, r0
 8003378:	9b07      	ldr	r3, [sp, #28]
 800337a:	2b00      	cmp	r3, #0
 800337c:	dd05      	ble.n	800338a <_dtoa_r+0x872>
 800337e:	4631      	mov	r1, r6
 8003380:	461a      	mov	r2, r3
 8003382:	4620      	mov	r0, r4
 8003384:	f000 fb6c 	bl	8003a60 <__lshift>
 8003388:	4606      	mov	r6, r0
 800338a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800338c:	b353      	cbz	r3, 80033e4 <_dtoa_r+0x8cc>
 800338e:	4631      	mov	r1, r6
 8003390:	4658      	mov	r0, fp
 8003392:	f000 fbb9 	bl	8003b08 <__mcmp>
 8003396:	2800      	cmp	r0, #0
 8003398:	da24      	bge.n	80033e4 <_dtoa_r+0x8cc>
 800339a:	2300      	movs	r3, #0
 800339c:	4659      	mov	r1, fp
 800339e:	220a      	movs	r2, #10
 80033a0:	4620      	mov	r0, r4
 80033a2:	f000 f9e7 	bl	8003774 <__multadd>
 80033a6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80033a8:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 80033ac:	4683      	mov	fp, r0
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	f000 8144 	beq.w	800363c <_dtoa_r+0xb24>
 80033b4:	2300      	movs	r3, #0
 80033b6:	4639      	mov	r1, r7
 80033b8:	220a      	movs	r2, #10
 80033ba:	4620      	mov	r0, r4
 80033bc:	f000 f9da 	bl	8003774 <__multadd>
 80033c0:	9b04      	ldr	r3, [sp, #16]
 80033c2:	4607      	mov	r7, r0
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	dc4d      	bgt.n	8003464 <_dtoa_r+0x94c>
 80033c8:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80033ca:	2b02      	cmp	r3, #2
 80033cc:	dd4a      	ble.n	8003464 <_dtoa_r+0x94c>
 80033ce:	e011      	b.n	80033f4 <_dtoa_r+0x8dc>
 80033d0:	d0c9      	beq.n	8003366 <_dtoa_r+0x84e>
 80033d2:	9a07      	ldr	r2, [sp, #28]
 80033d4:	331c      	adds	r3, #28
 80033d6:	441a      	add	r2, r3
 80033d8:	4499      	add	r9, r3
 80033da:	441d      	add	r5, r3
 80033dc:	4613      	mov	r3, r2
 80033de:	e7c1      	b.n	8003364 <_dtoa_r+0x84c>
 80033e0:	4603      	mov	r3, r0
 80033e2:	e7f6      	b.n	80033d2 <_dtoa_r+0x8ba>
 80033e4:	f1b8 0f00 	cmp.w	r8, #0
 80033e8:	dc36      	bgt.n	8003458 <_dtoa_r+0x940>
 80033ea:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80033ec:	2b02      	cmp	r3, #2
 80033ee:	dd33      	ble.n	8003458 <_dtoa_r+0x940>
 80033f0:	f8cd 8010 	str.w	r8, [sp, #16]
 80033f4:	9b04      	ldr	r3, [sp, #16]
 80033f6:	b963      	cbnz	r3, 8003412 <_dtoa_r+0x8fa>
 80033f8:	4631      	mov	r1, r6
 80033fa:	2205      	movs	r2, #5
 80033fc:	4620      	mov	r0, r4
 80033fe:	f000 f9b9 	bl	8003774 <__multadd>
 8003402:	4601      	mov	r1, r0
 8003404:	4606      	mov	r6, r0
 8003406:	4658      	mov	r0, fp
 8003408:	f000 fb7e 	bl	8003b08 <__mcmp>
 800340c:	2800      	cmp	r0, #0
 800340e:	f73f add3 	bgt.w	8002fb8 <_dtoa_r+0x4a0>
 8003412:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8003414:	9d06      	ldr	r5, [sp, #24]
 8003416:	ea6f 0a03 	mvn.w	sl, r3
 800341a:	f04f 0900 	mov.w	r9, #0
 800341e:	4631      	mov	r1, r6
 8003420:	4620      	mov	r0, r4
 8003422:	f000 f990 	bl	8003746 <_Bfree>
 8003426:	2f00      	cmp	r7, #0
 8003428:	f43f aebd 	beq.w	80031a6 <_dtoa_r+0x68e>
 800342c:	f1b9 0f00 	cmp.w	r9, #0
 8003430:	d005      	beq.n	800343e <_dtoa_r+0x926>
 8003432:	45b9      	cmp	r9, r7
 8003434:	d003      	beq.n	800343e <_dtoa_r+0x926>
 8003436:	4649      	mov	r1, r9
 8003438:	4620      	mov	r0, r4
 800343a:	f000 f984 	bl	8003746 <_Bfree>
 800343e:	4639      	mov	r1, r7
 8003440:	4620      	mov	r0, r4
 8003442:	f000 f980 	bl	8003746 <_Bfree>
 8003446:	e6ae      	b.n	80031a6 <_dtoa_r+0x68e>
 8003448:	2600      	movs	r6, #0
 800344a:	4637      	mov	r7, r6
 800344c:	e7e1      	b.n	8003412 <_dtoa_r+0x8fa>
 800344e:	46ba      	mov	sl, r7
 8003450:	4637      	mov	r7, r6
 8003452:	e5b1      	b.n	8002fb8 <_dtoa_r+0x4a0>
 8003454:	40240000 	.word	0x40240000
 8003458:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800345a:	f8cd 8010 	str.w	r8, [sp, #16]
 800345e:	2b00      	cmp	r3, #0
 8003460:	f000 80f3 	beq.w	800364a <_dtoa_r+0xb32>
 8003464:	2d00      	cmp	r5, #0
 8003466:	dd05      	ble.n	8003474 <_dtoa_r+0x95c>
 8003468:	4639      	mov	r1, r7
 800346a:	462a      	mov	r2, r5
 800346c:	4620      	mov	r0, r4
 800346e:	f000 faf7 	bl	8003a60 <__lshift>
 8003472:	4607      	mov	r7, r0
 8003474:	9b08      	ldr	r3, [sp, #32]
 8003476:	2b00      	cmp	r3, #0
 8003478:	d04c      	beq.n	8003514 <_dtoa_r+0x9fc>
 800347a:	6879      	ldr	r1, [r7, #4]
 800347c:	4620      	mov	r0, r4
 800347e:	f000 f92e 	bl	80036de <_Balloc>
 8003482:	4605      	mov	r5, r0
 8003484:	693a      	ldr	r2, [r7, #16]
 8003486:	f107 010c 	add.w	r1, r7, #12
 800348a:	3202      	adds	r2, #2
 800348c:	0092      	lsls	r2, r2, #2
 800348e:	300c      	adds	r0, #12
 8003490:	f000 f91a 	bl	80036c8 <memcpy>
 8003494:	2201      	movs	r2, #1
 8003496:	4629      	mov	r1, r5
 8003498:	4620      	mov	r0, r4
 800349a:	f000 fae1 	bl	8003a60 <__lshift>
 800349e:	46b9      	mov	r9, r7
 80034a0:	4607      	mov	r7, r0
 80034a2:	9b06      	ldr	r3, [sp, #24]
 80034a4:	9307      	str	r3, [sp, #28]
 80034a6:	9b02      	ldr	r3, [sp, #8]
 80034a8:	f003 0301 	and.w	r3, r3, #1
 80034ac:	9308      	str	r3, [sp, #32]
 80034ae:	4631      	mov	r1, r6
 80034b0:	4658      	mov	r0, fp
 80034b2:	f7ff faa1 	bl	80029f8 <quorem>
 80034b6:	4649      	mov	r1, r9
 80034b8:	4605      	mov	r5, r0
 80034ba:	f100 0830 	add.w	r8, r0, #48	; 0x30
 80034be:	4658      	mov	r0, fp
 80034c0:	f000 fb22 	bl	8003b08 <__mcmp>
 80034c4:	463a      	mov	r2, r7
 80034c6:	9002      	str	r0, [sp, #8]
 80034c8:	4631      	mov	r1, r6
 80034ca:	4620      	mov	r0, r4
 80034cc:	f000 fb36 	bl	8003b3c <__mdiff>
 80034d0:	68c3      	ldr	r3, [r0, #12]
 80034d2:	4602      	mov	r2, r0
 80034d4:	bb03      	cbnz	r3, 8003518 <_dtoa_r+0xa00>
 80034d6:	4601      	mov	r1, r0
 80034d8:	9009      	str	r0, [sp, #36]	; 0x24
 80034da:	4658      	mov	r0, fp
 80034dc:	f000 fb14 	bl	8003b08 <__mcmp>
 80034e0:	4603      	mov	r3, r0
 80034e2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80034e4:	4611      	mov	r1, r2
 80034e6:	4620      	mov	r0, r4
 80034e8:	9309      	str	r3, [sp, #36]	; 0x24
 80034ea:	f000 f92c 	bl	8003746 <_Bfree>
 80034ee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80034f0:	b9a3      	cbnz	r3, 800351c <_dtoa_r+0xa04>
 80034f2:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 80034f4:	b992      	cbnz	r2, 800351c <_dtoa_r+0xa04>
 80034f6:	9a08      	ldr	r2, [sp, #32]
 80034f8:	b982      	cbnz	r2, 800351c <_dtoa_r+0xa04>
 80034fa:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 80034fe:	d029      	beq.n	8003554 <_dtoa_r+0xa3c>
 8003500:	9b02      	ldr	r3, [sp, #8]
 8003502:	2b00      	cmp	r3, #0
 8003504:	dd01      	ble.n	800350a <_dtoa_r+0x9f2>
 8003506:	f105 0831 	add.w	r8, r5, #49	; 0x31
 800350a:	9b07      	ldr	r3, [sp, #28]
 800350c:	1c5d      	adds	r5, r3, #1
 800350e:	f883 8000 	strb.w	r8, [r3]
 8003512:	e784      	b.n	800341e <_dtoa_r+0x906>
 8003514:	4638      	mov	r0, r7
 8003516:	e7c2      	b.n	800349e <_dtoa_r+0x986>
 8003518:	2301      	movs	r3, #1
 800351a:	e7e3      	b.n	80034e4 <_dtoa_r+0x9cc>
 800351c:	9a02      	ldr	r2, [sp, #8]
 800351e:	2a00      	cmp	r2, #0
 8003520:	db04      	blt.n	800352c <_dtoa_r+0xa14>
 8003522:	d123      	bne.n	800356c <_dtoa_r+0xa54>
 8003524:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8003526:	bb0a      	cbnz	r2, 800356c <_dtoa_r+0xa54>
 8003528:	9a08      	ldr	r2, [sp, #32]
 800352a:	b9fa      	cbnz	r2, 800356c <_dtoa_r+0xa54>
 800352c:	2b00      	cmp	r3, #0
 800352e:	ddec      	ble.n	800350a <_dtoa_r+0x9f2>
 8003530:	4659      	mov	r1, fp
 8003532:	2201      	movs	r2, #1
 8003534:	4620      	mov	r0, r4
 8003536:	f000 fa93 	bl	8003a60 <__lshift>
 800353a:	4631      	mov	r1, r6
 800353c:	4683      	mov	fp, r0
 800353e:	f000 fae3 	bl	8003b08 <__mcmp>
 8003542:	2800      	cmp	r0, #0
 8003544:	dc03      	bgt.n	800354e <_dtoa_r+0xa36>
 8003546:	d1e0      	bne.n	800350a <_dtoa_r+0x9f2>
 8003548:	f018 0f01 	tst.w	r8, #1
 800354c:	d0dd      	beq.n	800350a <_dtoa_r+0x9f2>
 800354e:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8003552:	d1d8      	bne.n	8003506 <_dtoa_r+0x9ee>
 8003554:	9b07      	ldr	r3, [sp, #28]
 8003556:	9a07      	ldr	r2, [sp, #28]
 8003558:	1c5d      	adds	r5, r3, #1
 800355a:	2339      	movs	r3, #57	; 0x39
 800355c:	7013      	strb	r3, [r2, #0]
 800355e:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8003562:	1e6a      	subs	r2, r5, #1
 8003564:	2b39      	cmp	r3, #57	; 0x39
 8003566:	d04d      	beq.n	8003604 <_dtoa_r+0xaec>
 8003568:	3301      	adds	r3, #1
 800356a:	e052      	b.n	8003612 <_dtoa_r+0xafa>
 800356c:	9a07      	ldr	r2, [sp, #28]
 800356e:	2b00      	cmp	r3, #0
 8003570:	f102 0501 	add.w	r5, r2, #1
 8003574:	dd06      	ble.n	8003584 <_dtoa_r+0xa6c>
 8003576:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800357a:	d0eb      	beq.n	8003554 <_dtoa_r+0xa3c>
 800357c:	f108 0801 	add.w	r8, r8, #1
 8003580:	9b07      	ldr	r3, [sp, #28]
 8003582:	e7c4      	b.n	800350e <_dtoa_r+0x9f6>
 8003584:	9b06      	ldr	r3, [sp, #24]
 8003586:	9a04      	ldr	r2, [sp, #16]
 8003588:	1aeb      	subs	r3, r5, r3
 800358a:	4293      	cmp	r3, r2
 800358c:	f805 8c01 	strb.w	r8, [r5, #-1]
 8003590:	d021      	beq.n	80035d6 <_dtoa_r+0xabe>
 8003592:	4659      	mov	r1, fp
 8003594:	2300      	movs	r3, #0
 8003596:	220a      	movs	r2, #10
 8003598:	4620      	mov	r0, r4
 800359a:	f000 f8eb 	bl	8003774 <__multadd>
 800359e:	45b9      	cmp	r9, r7
 80035a0:	4683      	mov	fp, r0
 80035a2:	f04f 0300 	mov.w	r3, #0
 80035a6:	f04f 020a 	mov.w	r2, #10
 80035aa:	4649      	mov	r1, r9
 80035ac:	4620      	mov	r0, r4
 80035ae:	d105      	bne.n	80035bc <_dtoa_r+0xaa4>
 80035b0:	f000 f8e0 	bl	8003774 <__multadd>
 80035b4:	4681      	mov	r9, r0
 80035b6:	4607      	mov	r7, r0
 80035b8:	9507      	str	r5, [sp, #28]
 80035ba:	e778      	b.n	80034ae <_dtoa_r+0x996>
 80035bc:	f000 f8da 	bl	8003774 <__multadd>
 80035c0:	4639      	mov	r1, r7
 80035c2:	4681      	mov	r9, r0
 80035c4:	2300      	movs	r3, #0
 80035c6:	220a      	movs	r2, #10
 80035c8:	4620      	mov	r0, r4
 80035ca:	f000 f8d3 	bl	8003774 <__multadd>
 80035ce:	4607      	mov	r7, r0
 80035d0:	e7f2      	b.n	80035b8 <_dtoa_r+0xaa0>
 80035d2:	f04f 0900 	mov.w	r9, #0
 80035d6:	4659      	mov	r1, fp
 80035d8:	2201      	movs	r2, #1
 80035da:	4620      	mov	r0, r4
 80035dc:	f000 fa40 	bl	8003a60 <__lshift>
 80035e0:	4631      	mov	r1, r6
 80035e2:	4683      	mov	fp, r0
 80035e4:	f000 fa90 	bl	8003b08 <__mcmp>
 80035e8:	2800      	cmp	r0, #0
 80035ea:	dcb8      	bgt.n	800355e <_dtoa_r+0xa46>
 80035ec:	d102      	bne.n	80035f4 <_dtoa_r+0xadc>
 80035ee:	f018 0f01 	tst.w	r8, #1
 80035f2:	d1b4      	bne.n	800355e <_dtoa_r+0xa46>
 80035f4:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80035f8:	1e6a      	subs	r2, r5, #1
 80035fa:	2b30      	cmp	r3, #48	; 0x30
 80035fc:	f47f af0f 	bne.w	800341e <_dtoa_r+0x906>
 8003600:	4615      	mov	r5, r2
 8003602:	e7f7      	b.n	80035f4 <_dtoa_r+0xadc>
 8003604:	9b06      	ldr	r3, [sp, #24]
 8003606:	4293      	cmp	r3, r2
 8003608:	d105      	bne.n	8003616 <_dtoa_r+0xafe>
 800360a:	2331      	movs	r3, #49	; 0x31
 800360c:	9a06      	ldr	r2, [sp, #24]
 800360e:	f10a 0a01 	add.w	sl, sl, #1
 8003612:	7013      	strb	r3, [r2, #0]
 8003614:	e703      	b.n	800341e <_dtoa_r+0x906>
 8003616:	4615      	mov	r5, r2
 8003618:	e7a1      	b.n	800355e <_dtoa_r+0xa46>
 800361a:	4b17      	ldr	r3, [pc, #92]	; (8003678 <_dtoa_r+0xb60>)
 800361c:	f7ff bae1 	b.w	8002be2 <_dtoa_r+0xca>
 8003620:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8003622:	2b00      	cmp	r3, #0
 8003624:	f47f aabb 	bne.w	8002b9e <_dtoa_r+0x86>
 8003628:	4b14      	ldr	r3, [pc, #80]	; (800367c <_dtoa_r+0xb64>)
 800362a:	f7ff bada 	b.w	8002be2 <_dtoa_r+0xca>
 800362e:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8003630:	2b01      	cmp	r3, #1
 8003632:	f77f ae3f 	ble.w	80032b4 <_dtoa_r+0x79c>
 8003636:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8003638:	9308      	str	r3, [sp, #32]
 800363a:	e653      	b.n	80032e4 <_dtoa_r+0x7cc>
 800363c:	9b04      	ldr	r3, [sp, #16]
 800363e:	2b00      	cmp	r3, #0
 8003640:	dc03      	bgt.n	800364a <_dtoa_r+0xb32>
 8003642:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8003644:	2b02      	cmp	r3, #2
 8003646:	f73f aed5 	bgt.w	80033f4 <_dtoa_r+0x8dc>
 800364a:	9d06      	ldr	r5, [sp, #24]
 800364c:	4631      	mov	r1, r6
 800364e:	4658      	mov	r0, fp
 8003650:	f7ff f9d2 	bl	80029f8 <quorem>
 8003654:	9b06      	ldr	r3, [sp, #24]
 8003656:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800365a:	f805 8b01 	strb.w	r8, [r5], #1
 800365e:	9a04      	ldr	r2, [sp, #16]
 8003660:	1aeb      	subs	r3, r5, r3
 8003662:	429a      	cmp	r2, r3
 8003664:	ddb5      	ble.n	80035d2 <_dtoa_r+0xaba>
 8003666:	4659      	mov	r1, fp
 8003668:	2300      	movs	r3, #0
 800366a:	220a      	movs	r2, #10
 800366c:	4620      	mov	r0, r4
 800366e:	f000 f881 	bl	8003774 <__multadd>
 8003672:	4683      	mov	fp, r0
 8003674:	e7ea      	b.n	800364c <_dtoa_r+0xb34>
 8003676:	bf00      	nop
 8003678:	080041f4 	.word	0x080041f4
 800367c:	08004218 	.word	0x08004218

08003680 <_localeconv_r>:
 8003680:	4b04      	ldr	r3, [pc, #16]	; (8003694 <_localeconv_r+0x14>)
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	6a18      	ldr	r0, [r3, #32]
 8003686:	4b04      	ldr	r3, [pc, #16]	; (8003698 <_localeconv_r+0x18>)
 8003688:	2800      	cmp	r0, #0
 800368a:	bf08      	it	eq
 800368c:	4618      	moveq	r0, r3
 800368e:	30f0      	adds	r0, #240	; 0xf0
 8003690:	4770      	bx	lr
 8003692:	bf00      	nop
 8003694:	20000014 	.word	0x20000014
 8003698:	20000078 	.word	0x20000078

0800369c <malloc>:
 800369c:	4b02      	ldr	r3, [pc, #8]	; (80036a8 <malloc+0xc>)
 800369e:	4601      	mov	r1, r0
 80036a0:	6818      	ldr	r0, [r3, #0]
 80036a2:	f000 bb53 	b.w	8003d4c <_malloc_r>
 80036a6:	bf00      	nop
 80036a8:	20000014 	.word	0x20000014

080036ac <memchr>:
 80036ac:	b510      	push	{r4, lr}
 80036ae:	b2c9      	uxtb	r1, r1
 80036b0:	4402      	add	r2, r0
 80036b2:	4290      	cmp	r0, r2
 80036b4:	4603      	mov	r3, r0
 80036b6:	d101      	bne.n	80036bc <memchr+0x10>
 80036b8:	2300      	movs	r3, #0
 80036ba:	e003      	b.n	80036c4 <memchr+0x18>
 80036bc:	781c      	ldrb	r4, [r3, #0]
 80036be:	3001      	adds	r0, #1
 80036c0:	428c      	cmp	r4, r1
 80036c2:	d1f6      	bne.n	80036b2 <memchr+0x6>
 80036c4:	4618      	mov	r0, r3
 80036c6:	bd10      	pop	{r4, pc}

080036c8 <memcpy>:
 80036c8:	b510      	push	{r4, lr}
 80036ca:	1e43      	subs	r3, r0, #1
 80036cc:	440a      	add	r2, r1
 80036ce:	4291      	cmp	r1, r2
 80036d0:	d100      	bne.n	80036d4 <memcpy+0xc>
 80036d2:	bd10      	pop	{r4, pc}
 80036d4:	f811 4b01 	ldrb.w	r4, [r1], #1
 80036d8:	f803 4f01 	strb.w	r4, [r3, #1]!
 80036dc:	e7f7      	b.n	80036ce <memcpy+0x6>

080036de <_Balloc>:
 80036de:	b570      	push	{r4, r5, r6, lr}
 80036e0:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80036e2:	4604      	mov	r4, r0
 80036e4:	460e      	mov	r6, r1
 80036e6:	b93d      	cbnz	r5, 80036f8 <_Balloc+0x1a>
 80036e8:	2010      	movs	r0, #16
 80036ea:	f7ff ffd7 	bl	800369c <malloc>
 80036ee:	6260      	str	r0, [r4, #36]	; 0x24
 80036f0:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80036f4:	6005      	str	r5, [r0, #0]
 80036f6:	60c5      	str	r5, [r0, #12]
 80036f8:	6a65      	ldr	r5, [r4, #36]	; 0x24
 80036fa:	68eb      	ldr	r3, [r5, #12]
 80036fc:	b183      	cbz	r3, 8003720 <_Balloc+0x42>
 80036fe:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003700:	68db      	ldr	r3, [r3, #12]
 8003702:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8003706:	b9b8      	cbnz	r0, 8003738 <_Balloc+0x5a>
 8003708:	2101      	movs	r1, #1
 800370a:	fa01 f506 	lsl.w	r5, r1, r6
 800370e:	1d6a      	adds	r2, r5, #5
 8003710:	0092      	lsls	r2, r2, #2
 8003712:	4620      	mov	r0, r4
 8003714:	f000 fabf 	bl	8003c96 <_calloc_r>
 8003718:	b160      	cbz	r0, 8003734 <_Balloc+0x56>
 800371a:	e9c0 6501 	strd	r6, r5, [r0, #4]
 800371e:	e00e      	b.n	800373e <_Balloc+0x60>
 8003720:	2221      	movs	r2, #33	; 0x21
 8003722:	2104      	movs	r1, #4
 8003724:	4620      	mov	r0, r4
 8003726:	f000 fab6 	bl	8003c96 <_calloc_r>
 800372a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800372c:	60e8      	str	r0, [r5, #12]
 800372e:	68db      	ldr	r3, [r3, #12]
 8003730:	2b00      	cmp	r3, #0
 8003732:	d1e4      	bne.n	80036fe <_Balloc+0x20>
 8003734:	2000      	movs	r0, #0
 8003736:	bd70      	pop	{r4, r5, r6, pc}
 8003738:	6802      	ldr	r2, [r0, #0]
 800373a:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 800373e:	2300      	movs	r3, #0
 8003740:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8003744:	e7f7      	b.n	8003736 <_Balloc+0x58>

08003746 <_Bfree>:
 8003746:	b570      	push	{r4, r5, r6, lr}
 8003748:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800374a:	4606      	mov	r6, r0
 800374c:	460d      	mov	r5, r1
 800374e:	b93c      	cbnz	r4, 8003760 <_Bfree+0x1a>
 8003750:	2010      	movs	r0, #16
 8003752:	f7ff ffa3 	bl	800369c <malloc>
 8003756:	6270      	str	r0, [r6, #36]	; 0x24
 8003758:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800375c:	6004      	str	r4, [r0, #0]
 800375e:	60c4      	str	r4, [r0, #12]
 8003760:	b13d      	cbz	r5, 8003772 <_Bfree+0x2c>
 8003762:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8003764:	686a      	ldr	r2, [r5, #4]
 8003766:	68db      	ldr	r3, [r3, #12]
 8003768:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800376c:	6029      	str	r1, [r5, #0]
 800376e:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 8003772:	bd70      	pop	{r4, r5, r6, pc}

08003774 <__multadd>:
 8003774:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003778:	461f      	mov	r7, r3
 800377a:	4606      	mov	r6, r0
 800377c:	460c      	mov	r4, r1
 800377e:	2300      	movs	r3, #0
 8003780:	690d      	ldr	r5, [r1, #16]
 8003782:	f101 0c14 	add.w	ip, r1, #20
 8003786:	f8dc 0000 	ldr.w	r0, [ip]
 800378a:	3301      	adds	r3, #1
 800378c:	b281      	uxth	r1, r0
 800378e:	fb02 7101 	mla	r1, r2, r1, r7
 8003792:	0c00      	lsrs	r0, r0, #16
 8003794:	0c0f      	lsrs	r7, r1, #16
 8003796:	fb02 7000 	mla	r0, r2, r0, r7
 800379a:	b289      	uxth	r1, r1
 800379c:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 80037a0:	429d      	cmp	r5, r3
 80037a2:	ea4f 4710 	mov.w	r7, r0, lsr #16
 80037a6:	f84c 1b04 	str.w	r1, [ip], #4
 80037aa:	dcec      	bgt.n	8003786 <__multadd+0x12>
 80037ac:	b1d7      	cbz	r7, 80037e4 <__multadd+0x70>
 80037ae:	68a3      	ldr	r3, [r4, #8]
 80037b0:	42ab      	cmp	r3, r5
 80037b2:	dc12      	bgt.n	80037da <__multadd+0x66>
 80037b4:	6861      	ldr	r1, [r4, #4]
 80037b6:	4630      	mov	r0, r6
 80037b8:	3101      	adds	r1, #1
 80037ba:	f7ff ff90 	bl	80036de <_Balloc>
 80037be:	4680      	mov	r8, r0
 80037c0:	6922      	ldr	r2, [r4, #16]
 80037c2:	f104 010c 	add.w	r1, r4, #12
 80037c6:	3202      	adds	r2, #2
 80037c8:	0092      	lsls	r2, r2, #2
 80037ca:	300c      	adds	r0, #12
 80037cc:	f7ff ff7c 	bl	80036c8 <memcpy>
 80037d0:	4621      	mov	r1, r4
 80037d2:	4630      	mov	r0, r6
 80037d4:	f7ff ffb7 	bl	8003746 <_Bfree>
 80037d8:	4644      	mov	r4, r8
 80037da:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80037de:	3501      	adds	r5, #1
 80037e0:	615f      	str	r7, [r3, #20]
 80037e2:	6125      	str	r5, [r4, #16]
 80037e4:	4620      	mov	r0, r4
 80037e6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080037ea <__hi0bits>:
 80037ea:	0c02      	lsrs	r2, r0, #16
 80037ec:	0412      	lsls	r2, r2, #16
 80037ee:	4603      	mov	r3, r0
 80037f0:	b9b2      	cbnz	r2, 8003820 <__hi0bits+0x36>
 80037f2:	0403      	lsls	r3, r0, #16
 80037f4:	2010      	movs	r0, #16
 80037f6:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 80037fa:	bf04      	itt	eq
 80037fc:	021b      	lsleq	r3, r3, #8
 80037fe:	3008      	addeq	r0, #8
 8003800:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8003804:	bf04      	itt	eq
 8003806:	011b      	lsleq	r3, r3, #4
 8003808:	3004      	addeq	r0, #4
 800380a:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800380e:	bf04      	itt	eq
 8003810:	009b      	lsleq	r3, r3, #2
 8003812:	3002      	addeq	r0, #2
 8003814:	2b00      	cmp	r3, #0
 8003816:	db06      	blt.n	8003826 <__hi0bits+0x3c>
 8003818:	005b      	lsls	r3, r3, #1
 800381a:	d503      	bpl.n	8003824 <__hi0bits+0x3a>
 800381c:	3001      	adds	r0, #1
 800381e:	4770      	bx	lr
 8003820:	2000      	movs	r0, #0
 8003822:	e7e8      	b.n	80037f6 <__hi0bits+0xc>
 8003824:	2020      	movs	r0, #32
 8003826:	4770      	bx	lr

08003828 <__lo0bits>:
 8003828:	6803      	ldr	r3, [r0, #0]
 800382a:	4601      	mov	r1, r0
 800382c:	f013 0207 	ands.w	r2, r3, #7
 8003830:	d00b      	beq.n	800384a <__lo0bits+0x22>
 8003832:	07da      	lsls	r2, r3, #31
 8003834:	d423      	bmi.n	800387e <__lo0bits+0x56>
 8003836:	0798      	lsls	r0, r3, #30
 8003838:	bf49      	itett	mi
 800383a:	085b      	lsrmi	r3, r3, #1
 800383c:	089b      	lsrpl	r3, r3, #2
 800383e:	2001      	movmi	r0, #1
 8003840:	600b      	strmi	r3, [r1, #0]
 8003842:	bf5c      	itt	pl
 8003844:	600b      	strpl	r3, [r1, #0]
 8003846:	2002      	movpl	r0, #2
 8003848:	4770      	bx	lr
 800384a:	b298      	uxth	r0, r3
 800384c:	b9a8      	cbnz	r0, 800387a <__lo0bits+0x52>
 800384e:	2010      	movs	r0, #16
 8003850:	0c1b      	lsrs	r3, r3, #16
 8003852:	f013 0fff 	tst.w	r3, #255	; 0xff
 8003856:	bf04      	itt	eq
 8003858:	0a1b      	lsreq	r3, r3, #8
 800385a:	3008      	addeq	r0, #8
 800385c:	071a      	lsls	r2, r3, #28
 800385e:	bf04      	itt	eq
 8003860:	091b      	lsreq	r3, r3, #4
 8003862:	3004      	addeq	r0, #4
 8003864:	079a      	lsls	r2, r3, #30
 8003866:	bf04      	itt	eq
 8003868:	089b      	lsreq	r3, r3, #2
 800386a:	3002      	addeq	r0, #2
 800386c:	07da      	lsls	r2, r3, #31
 800386e:	d402      	bmi.n	8003876 <__lo0bits+0x4e>
 8003870:	085b      	lsrs	r3, r3, #1
 8003872:	d006      	beq.n	8003882 <__lo0bits+0x5a>
 8003874:	3001      	adds	r0, #1
 8003876:	600b      	str	r3, [r1, #0]
 8003878:	4770      	bx	lr
 800387a:	4610      	mov	r0, r2
 800387c:	e7e9      	b.n	8003852 <__lo0bits+0x2a>
 800387e:	2000      	movs	r0, #0
 8003880:	4770      	bx	lr
 8003882:	2020      	movs	r0, #32
 8003884:	4770      	bx	lr

08003886 <__i2b>:
 8003886:	b510      	push	{r4, lr}
 8003888:	460c      	mov	r4, r1
 800388a:	2101      	movs	r1, #1
 800388c:	f7ff ff27 	bl	80036de <_Balloc>
 8003890:	2201      	movs	r2, #1
 8003892:	6144      	str	r4, [r0, #20]
 8003894:	6102      	str	r2, [r0, #16]
 8003896:	bd10      	pop	{r4, pc}

08003898 <__multiply>:
 8003898:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800389c:	4614      	mov	r4, r2
 800389e:	690a      	ldr	r2, [r1, #16]
 80038a0:	6923      	ldr	r3, [r4, #16]
 80038a2:	4688      	mov	r8, r1
 80038a4:	429a      	cmp	r2, r3
 80038a6:	bfbe      	ittt	lt
 80038a8:	460b      	movlt	r3, r1
 80038aa:	46a0      	movlt	r8, r4
 80038ac:	461c      	movlt	r4, r3
 80038ae:	f8d8 7010 	ldr.w	r7, [r8, #16]
 80038b2:	f8d4 9010 	ldr.w	r9, [r4, #16]
 80038b6:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80038ba:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80038be:	eb07 0609 	add.w	r6, r7, r9
 80038c2:	42b3      	cmp	r3, r6
 80038c4:	bfb8      	it	lt
 80038c6:	3101      	addlt	r1, #1
 80038c8:	f7ff ff09 	bl	80036de <_Balloc>
 80038cc:	f100 0514 	add.w	r5, r0, #20
 80038d0:	462b      	mov	r3, r5
 80038d2:	2200      	movs	r2, #0
 80038d4:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 80038d8:	4573      	cmp	r3, lr
 80038da:	d316      	bcc.n	800390a <__multiply+0x72>
 80038dc:	f104 0214 	add.w	r2, r4, #20
 80038e0:	f108 0114 	add.w	r1, r8, #20
 80038e4:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 80038e8:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 80038ec:	9300      	str	r3, [sp, #0]
 80038ee:	9b00      	ldr	r3, [sp, #0]
 80038f0:	9201      	str	r2, [sp, #4]
 80038f2:	4293      	cmp	r3, r2
 80038f4:	d80c      	bhi.n	8003910 <__multiply+0x78>
 80038f6:	2e00      	cmp	r6, #0
 80038f8:	dd03      	ble.n	8003902 <__multiply+0x6a>
 80038fa:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d05d      	beq.n	80039be <__multiply+0x126>
 8003902:	6106      	str	r6, [r0, #16]
 8003904:	b003      	add	sp, #12
 8003906:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800390a:	f843 2b04 	str.w	r2, [r3], #4
 800390e:	e7e3      	b.n	80038d8 <__multiply+0x40>
 8003910:	f8b2 b000 	ldrh.w	fp, [r2]
 8003914:	f1bb 0f00 	cmp.w	fp, #0
 8003918:	d023      	beq.n	8003962 <__multiply+0xca>
 800391a:	4689      	mov	r9, r1
 800391c:	46ac      	mov	ip, r5
 800391e:	f04f 0800 	mov.w	r8, #0
 8003922:	f859 4b04 	ldr.w	r4, [r9], #4
 8003926:	f8dc a000 	ldr.w	sl, [ip]
 800392a:	b2a3      	uxth	r3, r4
 800392c:	fa1f fa8a 	uxth.w	sl, sl
 8003930:	fb0b a303 	mla	r3, fp, r3, sl
 8003934:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8003938:	f8dc 4000 	ldr.w	r4, [ip]
 800393c:	4443      	add	r3, r8
 800393e:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8003942:	fb0b 840a 	mla	r4, fp, sl, r8
 8003946:	46e2      	mov	sl, ip
 8003948:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 800394c:	b29b      	uxth	r3, r3
 800394e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8003952:	454f      	cmp	r7, r9
 8003954:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8003958:	f84a 3b04 	str.w	r3, [sl], #4
 800395c:	d82b      	bhi.n	80039b6 <__multiply+0x11e>
 800395e:	f8cc 8004 	str.w	r8, [ip, #4]
 8003962:	9b01      	ldr	r3, [sp, #4]
 8003964:	3204      	adds	r2, #4
 8003966:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 800396a:	f1ba 0f00 	cmp.w	sl, #0
 800396e:	d020      	beq.n	80039b2 <__multiply+0x11a>
 8003970:	4689      	mov	r9, r1
 8003972:	46a8      	mov	r8, r5
 8003974:	f04f 0b00 	mov.w	fp, #0
 8003978:	682b      	ldr	r3, [r5, #0]
 800397a:	f8b9 c000 	ldrh.w	ip, [r9]
 800397e:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 8003982:	b29b      	uxth	r3, r3
 8003984:	fb0a 440c 	mla	r4, sl, ip, r4
 8003988:	46c4      	mov	ip, r8
 800398a:	445c      	add	r4, fp
 800398c:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8003990:	f84c 3b04 	str.w	r3, [ip], #4
 8003994:	f859 3b04 	ldr.w	r3, [r9], #4
 8003998:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 800399c:	0c1b      	lsrs	r3, r3, #16
 800399e:	fb0a b303 	mla	r3, sl, r3, fp
 80039a2:	454f      	cmp	r7, r9
 80039a4:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 80039a8:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 80039ac:	d805      	bhi.n	80039ba <__multiply+0x122>
 80039ae:	f8c8 3004 	str.w	r3, [r8, #4]
 80039b2:	3504      	adds	r5, #4
 80039b4:	e79b      	b.n	80038ee <__multiply+0x56>
 80039b6:	46d4      	mov	ip, sl
 80039b8:	e7b3      	b.n	8003922 <__multiply+0x8a>
 80039ba:	46e0      	mov	r8, ip
 80039bc:	e7dd      	b.n	800397a <__multiply+0xe2>
 80039be:	3e01      	subs	r6, #1
 80039c0:	e799      	b.n	80038f6 <__multiply+0x5e>
	...

080039c4 <__pow5mult>:
 80039c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80039c8:	4615      	mov	r5, r2
 80039ca:	f012 0203 	ands.w	r2, r2, #3
 80039ce:	4606      	mov	r6, r0
 80039d0:	460f      	mov	r7, r1
 80039d2:	d007      	beq.n	80039e4 <__pow5mult+0x20>
 80039d4:	4c21      	ldr	r4, [pc, #132]	; (8003a5c <__pow5mult+0x98>)
 80039d6:	3a01      	subs	r2, #1
 80039d8:	2300      	movs	r3, #0
 80039da:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80039de:	f7ff fec9 	bl	8003774 <__multadd>
 80039e2:	4607      	mov	r7, r0
 80039e4:	10ad      	asrs	r5, r5, #2
 80039e6:	d035      	beq.n	8003a54 <__pow5mult+0x90>
 80039e8:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80039ea:	b93c      	cbnz	r4, 80039fc <__pow5mult+0x38>
 80039ec:	2010      	movs	r0, #16
 80039ee:	f7ff fe55 	bl	800369c <malloc>
 80039f2:	6270      	str	r0, [r6, #36]	; 0x24
 80039f4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80039f8:	6004      	str	r4, [r0, #0]
 80039fa:	60c4      	str	r4, [r0, #12]
 80039fc:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8003a00:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8003a04:	b94c      	cbnz	r4, 8003a1a <__pow5mult+0x56>
 8003a06:	f240 2171 	movw	r1, #625	; 0x271
 8003a0a:	4630      	mov	r0, r6
 8003a0c:	f7ff ff3b 	bl	8003886 <__i2b>
 8003a10:	2300      	movs	r3, #0
 8003a12:	4604      	mov	r4, r0
 8003a14:	f8c8 0008 	str.w	r0, [r8, #8]
 8003a18:	6003      	str	r3, [r0, #0]
 8003a1a:	f04f 0800 	mov.w	r8, #0
 8003a1e:	07eb      	lsls	r3, r5, #31
 8003a20:	d50a      	bpl.n	8003a38 <__pow5mult+0x74>
 8003a22:	4639      	mov	r1, r7
 8003a24:	4622      	mov	r2, r4
 8003a26:	4630      	mov	r0, r6
 8003a28:	f7ff ff36 	bl	8003898 <__multiply>
 8003a2c:	4681      	mov	r9, r0
 8003a2e:	4639      	mov	r1, r7
 8003a30:	4630      	mov	r0, r6
 8003a32:	f7ff fe88 	bl	8003746 <_Bfree>
 8003a36:	464f      	mov	r7, r9
 8003a38:	106d      	asrs	r5, r5, #1
 8003a3a:	d00b      	beq.n	8003a54 <__pow5mult+0x90>
 8003a3c:	6820      	ldr	r0, [r4, #0]
 8003a3e:	b938      	cbnz	r0, 8003a50 <__pow5mult+0x8c>
 8003a40:	4622      	mov	r2, r4
 8003a42:	4621      	mov	r1, r4
 8003a44:	4630      	mov	r0, r6
 8003a46:	f7ff ff27 	bl	8003898 <__multiply>
 8003a4a:	6020      	str	r0, [r4, #0]
 8003a4c:	f8c0 8000 	str.w	r8, [r0]
 8003a50:	4604      	mov	r4, r0
 8003a52:	e7e4      	b.n	8003a1e <__pow5mult+0x5a>
 8003a54:	4638      	mov	r0, r7
 8003a56:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003a5a:	bf00      	nop
 8003a5c:	08004318 	.word	0x08004318

08003a60 <__lshift>:
 8003a60:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003a64:	460c      	mov	r4, r1
 8003a66:	4607      	mov	r7, r0
 8003a68:	4616      	mov	r6, r2
 8003a6a:	6923      	ldr	r3, [r4, #16]
 8003a6c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8003a70:	eb0a 0903 	add.w	r9, sl, r3
 8003a74:	6849      	ldr	r1, [r1, #4]
 8003a76:	68a3      	ldr	r3, [r4, #8]
 8003a78:	f109 0501 	add.w	r5, r9, #1
 8003a7c:	42ab      	cmp	r3, r5
 8003a7e:	db32      	blt.n	8003ae6 <__lshift+0x86>
 8003a80:	4638      	mov	r0, r7
 8003a82:	f7ff fe2c 	bl	80036de <_Balloc>
 8003a86:	2300      	movs	r3, #0
 8003a88:	4680      	mov	r8, r0
 8003a8a:	461a      	mov	r2, r3
 8003a8c:	f100 0114 	add.w	r1, r0, #20
 8003a90:	4553      	cmp	r3, sl
 8003a92:	db2b      	blt.n	8003aec <__lshift+0x8c>
 8003a94:	6920      	ldr	r0, [r4, #16]
 8003a96:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8003a9a:	f104 0314 	add.w	r3, r4, #20
 8003a9e:	f016 021f 	ands.w	r2, r6, #31
 8003aa2:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8003aa6:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8003aaa:	d025      	beq.n	8003af8 <__lshift+0x98>
 8003aac:	2000      	movs	r0, #0
 8003aae:	f1c2 0e20 	rsb	lr, r2, #32
 8003ab2:	468a      	mov	sl, r1
 8003ab4:	681e      	ldr	r6, [r3, #0]
 8003ab6:	4096      	lsls	r6, r2
 8003ab8:	4330      	orrs	r0, r6
 8003aba:	f84a 0b04 	str.w	r0, [sl], #4
 8003abe:	f853 0b04 	ldr.w	r0, [r3], #4
 8003ac2:	459c      	cmp	ip, r3
 8003ac4:	fa20 f00e 	lsr.w	r0, r0, lr
 8003ac8:	d814      	bhi.n	8003af4 <__lshift+0x94>
 8003aca:	6048      	str	r0, [r1, #4]
 8003acc:	b108      	cbz	r0, 8003ad2 <__lshift+0x72>
 8003ace:	f109 0502 	add.w	r5, r9, #2
 8003ad2:	3d01      	subs	r5, #1
 8003ad4:	4638      	mov	r0, r7
 8003ad6:	f8c8 5010 	str.w	r5, [r8, #16]
 8003ada:	4621      	mov	r1, r4
 8003adc:	f7ff fe33 	bl	8003746 <_Bfree>
 8003ae0:	4640      	mov	r0, r8
 8003ae2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003ae6:	3101      	adds	r1, #1
 8003ae8:	005b      	lsls	r3, r3, #1
 8003aea:	e7c7      	b.n	8003a7c <__lshift+0x1c>
 8003aec:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8003af0:	3301      	adds	r3, #1
 8003af2:	e7cd      	b.n	8003a90 <__lshift+0x30>
 8003af4:	4651      	mov	r1, sl
 8003af6:	e7dc      	b.n	8003ab2 <__lshift+0x52>
 8003af8:	3904      	subs	r1, #4
 8003afa:	f853 2b04 	ldr.w	r2, [r3], #4
 8003afe:	459c      	cmp	ip, r3
 8003b00:	f841 2f04 	str.w	r2, [r1, #4]!
 8003b04:	d8f9      	bhi.n	8003afa <__lshift+0x9a>
 8003b06:	e7e4      	b.n	8003ad2 <__lshift+0x72>

08003b08 <__mcmp>:
 8003b08:	6903      	ldr	r3, [r0, #16]
 8003b0a:	690a      	ldr	r2, [r1, #16]
 8003b0c:	b530      	push	{r4, r5, lr}
 8003b0e:	1a9b      	subs	r3, r3, r2
 8003b10:	d10c      	bne.n	8003b2c <__mcmp+0x24>
 8003b12:	0092      	lsls	r2, r2, #2
 8003b14:	3014      	adds	r0, #20
 8003b16:	3114      	adds	r1, #20
 8003b18:	1884      	adds	r4, r0, r2
 8003b1a:	4411      	add	r1, r2
 8003b1c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8003b20:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8003b24:	4295      	cmp	r5, r2
 8003b26:	d003      	beq.n	8003b30 <__mcmp+0x28>
 8003b28:	d305      	bcc.n	8003b36 <__mcmp+0x2e>
 8003b2a:	2301      	movs	r3, #1
 8003b2c:	4618      	mov	r0, r3
 8003b2e:	bd30      	pop	{r4, r5, pc}
 8003b30:	42a0      	cmp	r0, r4
 8003b32:	d3f3      	bcc.n	8003b1c <__mcmp+0x14>
 8003b34:	e7fa      	b.n	8003b2c <__mcmp+0x24>
 8003b36:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003b3a:	e7f7      	b.n	8003b2c <__mcmp+0x24>

08003b3c <__mdiff>:
 8003b3c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003b40:	460d      	mov	r5, r1
 8003b42:	4607      	mov	r7, r0
 8003b44:	4611      	mov	r1, r2
 8003b46:	4628      	mov	r0, r5
 8003b48:	4614      	mov	r4, r2
 8003b4a:	f7ff ffdd 	bl	8003b08 <__mcmp>
 8003b4e:	1e06      	subs	r6, r0, #0
 8003b50:	d108      	bne.n	8003b64 <__mdiff+0x28>
 8003b52:	4631      	mov	r1, r6
 8003b54:	4638      	mov	r0, r7
 8003b56:	f7ff fdc2 	bl	80036de <_Balloc>
 8003b5a:	2301      	movs	r3, #1
 8003b5c:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8003b60:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003b64:	bfa4      	itt	ge
 8003b66:	4623      	movge	r3, r4
 8003b68:	462c      	movge	r4, r5
 8003b6a:	4638      	mov	r0, r7
 8003b6c:	6861      	ldr	r1, [r4, #4]
 8003b6e:	bfa6      	itte	ge
 8003b70:	461d      	movge	r5, r3
 8003b72:	2600      	movge	r6, #0
 8003b74:	2601      	movlt	r6, #1
 8003b76:	f7ff fdb2 	bl	80036de <_Balloc>
 8003b7a:	f04f 0e00 	mov.w	lr, #0
 8003b7e:	60c6      	str	r6, [r0, #12]
 8003b80:	692b      	ldr	r3, [r5, #16]
 8003b82:	6926      	ldr	r6, [r4, #16]
 8003b84:	f104 0214 	add.w	r2, r4, #20
 8003b88:	f105 0914 	add.w	r9, r5, #20
 8003b8c:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 8003b90:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 8003b94:	f100 0114 	add.w	r1, r0, #20
 8003b98:	f852 ab04 	ldr.w	sl, [r2], #4
 8003b9c:	f859 5b04 	ldr.w	r5, [r9], #4
 8003ba0:	fa1f f38a 	uxth.w	r3, sl
 8003ba4:	4473      	add	r3, lr
 8003ba6:	b2ac      	uxth	r4, r5
 8003ba8:	1b1b      	subs	r3, r3, r4
 8003baa:	0c2c      	lsrs	r4, r5, #16
 8003bac:	ebc4 441a 	rsb	r4, r4, sl, lsr #16
 8003bb0:	eb04 4423 	add.w	r4, r4, r3, asr #16
 8003bb4:	b29b      	uxth	r3, r3
 8003bb6:	ea4f 4e24 	mov.w	lr, r4, asr #16
 8003bba:	45c8      	cmp	r8, r9
 8003bbc:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8003bc0:	4694      	mov	ip, r2
 8003bc2:	f841 4b04 	str.w	r4, [r1], #4
 8003bc6:	d8e7      	bhi.n	8003b98 <__mdiff+0x5c>
 8003bc8:	45bc      	cmp	ip, r7
 8003bca:	d304      	bcc.n	8003bd6 <__mdiff+0x9a>
 8003bcc:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 8003bd0:	b183      	cbz	r3, 8003bf4 <__mdiff+0xb8>
 8003bd2:	6106      	str	r6, [r0, #16]
 8003bd4:	e7c4      	b.n	8003b60 <__mdiff+0x24>
 8003bd6:	f85c 4b04 	ldr.w	r4, [ip], #4
 8003bda:	b2a2      	uxth	r2, r4
 8003bdc:	4472      	add	r2, lr
 8003bde:	1413      	asrs	r3, r2, #16
 8003be0:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8003be4:	b292      	uxth	r2, r2
 8003be6:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8003bea:	ea4f 4e23 	mov.w	lr, r3, asr #16
 8003bee:	f841 2b04 	str.w	r2, [r1], #4
 8003bf2:	e7e9      	b.n	8003bc8 <__mdiff+0x8c>
 8003bf4:	3e01      	subs	r6, #1
 8003bf6:	e7e9      	b.n	8003bcc <__mdiff+0x90>

08003bf8 <__d2b>:
 8003bf8:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8003bfc:	461c      	mov	r4, r3
 8003bfe:	e9dd 6508 	ldrd	r6, r5, [sp, #32]
 8003c02:	2101      	movs	r1, #1
 8003c04:	4690      	mov	r8, r2
 8003c06:	f7ff fd6a 	bl	80036de <_Balloc>
 8003c0a:	f3c4 0213 	ubfx	r2, r4, #0, #20
 8003c0e:	f3c4 540a 	ubfx	r4, r4, #20, #11
 8003c12:	4607      	mov	r7, r0
 8003c14:	bb34      	cbnz	r4, 8003c64 <__d2b+0x6c>
 8003c16:	9201      	str	r2, [sp, #4]
 8003c18:	f1b8 0200 	subs.w	r2, r8, #0
 8003c1c:	d027      	beq.n	8003c6e <__d2b+0x76>
 8003c1e:	a802      	add	r0, sp, #8
 8003c20:	f840 2d08 	str.w	r2, [r0, #-8]!
 8003c24:	f7ff fe00 	bl	8003828 <__lo0bits>
 8003c28:	9900      	ldr	r1, [sp, #0]
 8003c2a:	b1f0      	cbz	r0, 8003c6a <__d2b+0x72>
 8003c2c:	9a01      	ldr	r2, [sp, #4]
 8003c2e:	f1c0 0320 	rsb	r3, r0, #32
 8003c32:	fa02 f303 	lsl.w	r3, r2, r3
 8003c36:	430b      	orrs	r3, r1
 8003c38:	40c2      	lsrs	r2, r0
 8003c3a:	617b      	str	r3, [r7, #20]
 8003c3c:	9201      	str	r2, [sp, #4]
 8003c3e:	9b01      	ldr	r3, [sp, #4]
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	bf14      	ite	ne
 8003c44:	2102      	movne	r1, #2
 8003c46:	2101      	moveq	r1, #1
 8003c48:	61bb      	str	r3, [r7, #24]
 8003c4a:	6139      	str	r1, [r7, #16]
 8003c4c:	b1c4      	cbz	r4, 8003c80 <__d2b+0x88>
 8003c4e:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8003c52:	4404      	add	r4, r0
 8003c54:	6034      	str	r4, [r6, #0]
 8003c56:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8003c5a:	6028      	str	r0, [r5, #0]
 8003c5c:	4638      	mov	r0, r7
 8003c5e:	b002      	add	sp, #8
 8003c60:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003c64:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8003c68:	e7d5      	b.n	8003c16 <__d2b+0x1e>
 8003c6a:	6179      	str	r1, [r7, #20]
 8003c6c:	e7e7      	b.n	8003c3e <__d2b+0x46>
 8003c6e:	a801      	add	r0, sp, #4
 8003c70:	f7ff fdda 	bl	8003828 <__lo0bits>
 8003c74:	2101      	movs	r1, #1
 8003c76:	9b01      	ldr	r3, [sp, #4]
 8003c78:	6139      	str	r1, [r7, #16]
 8003c7a:	617b      	str	r3, [r7, #20]
 8003c7c:	3020      	adds	r0, #32
 8003c7e:	e7e5      	b.n	8003c4c <__d2b+0x54>
 8003c80:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8003c84:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 8003c88:	6030      	str	r0, [r6, #0]
 8003c8a:	6918      	ldr	r0, [r3, #16]
 8003c8c:	f7ff fdad 	bl	80037ea <__hi0bits>
 8003c90:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8003c94:	e7e1      	b.n	8003c5a <__d2b+0x62>

08003c96 <_calloc_r>:
 8003c96:	b538      	push	{r3, r4, r5, lr}
 8003c98:	fb02 f401 	mul.w	r4, r2, r1
 8003c9c:	4621      	mov	r1, r4
 8003c9e:	f000 f855 	bl	8003d4c <_malloc_r>
 8003ca2:	4605      	mov	r5, r0
 8003ca4:	b118      	cbz	r0, 8003cae <_calloc_r+0x18>
 8003ca6:	4622      	mov	r2, r4
 8003ca8:	2100      	movs	r1, #0
 8003caa:	f7fe fa2d 	bl	8002108 <memset>
 8003cae:	4628      	mov	r0, r5
 8003cb0:	bd38      	pop	{r3, r4, r5, pc}
	...

08003cb4 <_free_r>:
 8003cb4:	b538      	push	{r3, r4, r5, lr}
 8003cb6:	4605      	mov	r5, r0
 8003cb8:	2900      	cmp	r1, #0
 8003cba:	d043      	beq.n	8003d44 <_free_r+0x90>
 8003cbc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003cc0:	1f0c      	subs	r4, r1, #4
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	bfb8      	it	lt
 8003cc6:	18e4      	addlt	r4, r4, r3
 8003cc8:	f000 fa27 	bl	800411a <__malloc_lock>
 8003ccc:	4a1e      	ldr	r2, [pc, #120]	; (8003d48 <_free_r+0x94>)
 8003cce:	6813      	ldr	r3, [r2, #0]
 8003cd0:	4610      	mov	r0, r2
 8003cd2:	b933      	cbnz	r3, 8003ce2 <_free_r+0x2e>
 8003cd4:	6063      	str	r3, [r4, #4]
 8003cd6:	6014      	str	r4, [r2, #0]
 8003cd8:	4628      	mov	r0, r5
 8003cda:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003cde:	f000 ba1d 	b.w	800411c <__malloc_unlock>
 8003ce2:	42a3      	cmp	r3, r4
 8003ce4:	d90b      	bls.n	8003cfe <_free_r+0x4a>
 8003ce6:	6821      	ldr	r1, [r4, #0]
 8003ce8:	1862      	adds	r2, r4, r1
 8003cea:	4293      	cmp	r3, r2
 8003cec:	bf01      	itttt	eq
 8003cee:	681a      	ldreq	r2, [r3, #0]
 8003cf0:	685b      	ldreq	r3, [r3, #4]
 8003cf2:	1852      	addeq	r2, r2, r1
 8003cf4:	6022      	streq	r2, [r4, #0]
 8003cf6:	6063      	str	r3, [r4, #4]
 8003cf8:	6004      	str	r4, [r0, #0]
 8003cfa:	e7ed      	b.n	8003cd8 <_free_r+0x24>
 8003cfc:	4613      	mov	r3, r2
 8003cfe:	685a      	ldr	r2, [r3, #4]
 8003d00:	b10a      	cbz	r2, 8003d06 <_free_r+0x52>
 8003d02:	42a2      	cmp	r2, r4
 8003d04:	d9fa      	bls.n	8003cfc <_free_r+0x48>
 8003d06:	6819      	ldr	r1, [r3, #0]
 8003d08:	1858      	adds	r0, r3, r1
 8003d0a:	42a0      	cmp	r0, r4
 8003d0c:	d10b      	bne.n	8003d26 <_free_r+0x72>
 8003d0e:	6820      	ldr	r0, [r4, #0]
 8003d10:	4401      	add	r1, r0
 8003d12:	1858      	adds	r0, r3, r1
 8003d14:	4282      	cmp	r2, r0
 8003d16:	6019      	str	r1, [r3, #0]
 8003d18:	d1de      	bne.n	8003cd8 <_free_r+0x24>
 8003d1a:	6810      	ldr	r0, [r2, #0]
 8003d1c:	6852      	ldr	r2, [r2, #4]
 8003d1e:	4401      	add	r1, r0
 8003d20:	6019      	str	r1, [r3, #0]
 8003d22:	605a      	str	r2, [r3, #4]
 8003d24:	e7d8      	b.n	8003cd8 <_free_r+0x24>
 8003d26:	d902      	bls.n	8003d2e <_free_r+0x7a>
 8003d28:	230c      	movs	r3, #12
 8003d2a:	602b      	str	r3, [r5, #0]
 8003d2c:	e7d4      	b.n	8003cd8 <_free_r+0x24>
 8003d2e:	6820      	ldr	r0, [r4, #0]
 8003d30:	1821      	adds	r1, r4, r0
 8003d32:	428a      	cmp	r2, r1
 8003d34:	bf01      	itttt	eq
 8003d36:	6811      	ldreq	r1, [r2, #0]
 8003d38:	6852      	ldreq	r2, [r2, #4]
 8003d3a:	1809      	addeq	r1, r1, r0
 8003d3c:	6021      	streq	r1, [r4, #0]
 8003d3e:	6062      	str	r2, [r4, #4]
 8003d40:	605c      	str	r4, [r3, #4]
 8003d42:	e7c9      	b.n	8003cd8 <_free_r+0x24>
 8003d44:	bd38      	pop	{r3, r4, r5, pc}
 8003d46:	bf00      	nop
 8003d48:	20000218 	.word	0x20000218

08003d4c <_malloc_r>:
 8003d4c:	b570      	push	{r4, r5, r6, lr}
 8003d4e:	1ccd      	adds	r5, r1, #3
 8003d50:	f025 0503 	bic.w	r5, r5, #3
 8003d54:	3508      	adds	r5, #8
 8003d56:	2d0c      	cmp	r5, #12
 8003d58:	bf38      	it	cc
 8003d5a:	250c      	movcc	r5, #12
 8003d5c:	2d00      	cmp	r5, #0
 8003d5e:	4606      	mov	r6, r0
 8003d60:	db01      	blt.n	8003d66 <_malloc_r+0x1a>
 8003d62:	42a9      	cmp	r1, r5
 8003d64:	d903      	bls.n	8003d6e <_malloc_r+0x22>
 8003d66:	230c      	movs	r3, #12
 8003d68:	6033      	str	r3, [r6, #0]
 8003d6a:	2000      	movs	r0, #0
 8003d6c:	bd70      	pop	{r4, r5, r6, pc}
 8003d6e:	f000 f9d4 	bl	800411a <__malloc_lock>
 8003d72:	4a21      	ldr	r2, [pc, #132]	; (8003df8 <_malloc_r+0xac>)
 8003d74:	6814      	ldr	r4, [r2, #0]
 8003d76:	4621      	mov	r1, r4
 8003d78:	b991      	cbnz	r1, 8003da0 <_malloc_r+0x54>
 8003d7a:	4c20      	ldr	r4, [pc, #128]	; (8003dfc <_malloc_r+0xb0>)
 8003d7c:	6823      	ldr	r3, [r4, #0]
 8003d7e:	b91b      	cbnz	r3, 8003d88 <_malloc_r+0x3c>
 8003d80:	4630      	mov	r0, r6
 8003d82:	f000 f98f 	bl	80040a4 <_sbrk_r>
 8003d86:	6020      	str	r0, [r4, #0]
 8003d88:	4629      	mov	r1, r5
 8003d8a:	4630      	mov	r0, r6
 8003d8c:	f000 f98a 	bl	80040a4 <_sbrk_r>
 8003d90:	1c43      	adds	r3, r0, #1
 8003d92:	d124      	bne.n	8003dde <_malloc_r+0x92>
 8003d94:	230c      	movs	r3, #12
 8003d96:	4630      	mov	r0, r6
 8003d98:	6033      	str	r3, [r6, #0]
 8003d9a:	f000 f9bf 	bl	800411c <__malloc_unlock>
 8003d9e:	e7e4      	b.n	8003d6a <_malloc_r+0x1e>
 8003da0:	680b      	ldr	r3, [r1, #0]
 8003da2:	1b5b      	subs	r3, r3, r5
 8003da4:	d418      	bmi.n	8003dd8 <_malloc_r+0x8c>
 8003da6:	2b0b      	cmp	r3, #11
 8003da8:	d90f      	bls.n	8003dca <_malloc_r+0x7e>
 8003daa:	600b      	str	r3, [r1, #0]
 8003dac:	18cc      	adds	r4, r1, r3
 8003dae:	50cd      	str	r5, [r1, r3]
 8003db0:	4630      	mov	r0, r6
 8003db2:	f000 f9b3 	bl	800411c <__malloc_unlock>
 8003db6:	f104 000b 	add.w	r0, r4, #11
 8003dba:	1d23      	adds	r3, r4, #4
 8003dbc:	f020 0007 	bic.w	r0, r0, #7
 8003dc0:	1ac3      	subs	r3, r0, r3
 8003dc2:	d0d3      	beq.n	8003d6c <_malloc_r+0x20>
 8003dc4:	425a      	negs	r2, r3
 8003dc6:	50e2      	str	r2, [r4, r3]
 8003dc8:	e7d0      	b.n	8003d6c <_malloc_r+0x20>
 8003dca:	684b      	ldr	r3, [r1, #4]
 8003dcc:	428c      	cmp	r4, r1
 8003dce:	bf16      	itet	ne
 8003dd0:	6063      	strne	r3, [r4, #4]
 8003dd2:	6013      	streq	r3, [r2, #0]
 8003dd4:	460c      	movne	r4, r1
 8003dd6:	e7eb      	b.n	8003db0 <_malloc_r+0x64>
 8003dd8:	460c      	mov	r4, r1
 8003dda:	6849      	ldr	r1, [r1, #4]
 8003ddc:	e7cc      	b.n	8003d78 <_malloc_r+0x2c>
 8003dde:	1cc4      	adds	r4, r0, #3
 8003de0:	f024 0403 	bic.w	r4, r4, #3
 8003de4:	42a0      	cmp	r0, r4
 8003de6:	d005      	beq.n	8003df4 <_malloc_r+0xa8>
 8003de8:	1a21      	subs	r1, r4, r0
 8003dea:	4630      	mov	r0, r6
 8003dec:	f000 f95a 	bl	80040a4 <_sbrk_r>
 8003df0:	3001      	adds	r0, #1
 8003df2:	d0cf      	beq.n	8003d94 <_malloc_r+0x48>
 8003df4:	6025      	str	r5, [r4, #0]
 8003df6:	e7db      	b.n	8003db0 <_malloc_r+0x64>
 8003df8:	20000218 	.word	0x20000218
 8003dfc:	2000021c 	.word	0x2000021c

08003e00 <__ssputs_r>:
 8003e00:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003e04:	688e      	ldr	r6, [r1, #8]
 8003e06:	4682      	mov	sl, r0
 8003e08:	429e      	cmp	r6, r3
 8003e0a:	460c      	mov	r4, r1
 8003e0c:	4690      	mov	r8, r2
 8003e0e:	4699      	mov	r9, r3
 8003e10:	d837      	bhi.n	8003e82 <__ssputs_r+0x82>
 8003e12:	898a      	ldrh	r2, [r1, #12]
 8003e14:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8003e18:	d031      	beq.n	8003e7e <__ssputs_r+0x7e>
 8003e1a:	2302      	movs	r3, #2
 8003e1c:	6825      	ldr	r5, [r4, #0]
 8003e1e:	6909      	ldr	r1, [r1, #16]
 8003e20:	1a6f      	subs	r7, r5, r1
 8003e22:	6965      	ldr	r5, [r4, #20]
 8003e24:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003e28:	fb95 f5f3 	sdiv	r5, r5, r3
 8003e2c:	f109 0301 	add.w	r3, r9, #1
 8003e30:	443b      	add	r3, r7
 8003e32:	429d      	cmp	r5, r3
 8003e34:	bf38      	it	cc
 8003e36:	461d      	movcc	r5, r3
 8003e38:	0553      	lsls	r3, r2, #21
 8003e3a:	d530      	bpl.n	8003e9e <__ssputs_r+0x9e>
 8003e3c:	4629      	mov	r1, r5
 8003e3e:	f7ff ff85 	bl	8003d4c <_malloc_r>
 8003e42:	4606      	mov	r6, r0
 8003e44:	b950      	cbnz	r0, 8003e5c <__ssputs_r+0x5c>
 8003e46:	230c      	movs	r3, #12
 8003e48:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003e4c:	f8ca 3000 	str.w	r3, [sl]
 8003e50:	89a3      	ldrh	r3, [r4, #12]
 8003e52:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003e56:	81a3      	strh	r3, [r4, #12]
 8003e58:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003e5c:	463a      	mov	r2, r7
 8003e5e:	6921      	ldr	r1, [r4, #16]
 8003e60:	f7ff fc32 	bl	80036c8 <memcpy>
 8003e64:	89a3      	ldrh	r3, [r4, #12]
 8003e66:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8003e6a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003e6e:	81a3      	strh	r3, [r4, #12]
 8003e70:	6126      	str	r6, [r4, #16]
 8003e72:	443e      	add	r6, r7
 8003e74:	6026      	str	r6, [r4, #0]
 8003e76:	464e      	mov	r6, r9
 8003e78:	6165      	str	r5, [r4, #20]
 8003e7a:	1bed      	subs	r5, r5, r7
 8003e7c:	60a5      	str	r5, [r4, #8]
 8003e7e:	454e      	cmp	r6, r9
 8003e80:	d900      	bls.n	8003e84 <__ssputs_r+0x84>
 8003e82:	464e      	mov	r6, r9
 8003e84:	4632      	mov	r2, r6
 8003e86:	4641      	mov	r1, r8
 8003e88:	6820      	ldr	r0, [r4, #0]
 8003e8a:	f000 f92d 	bl	80040e8 <memmove>
 8003e8e:	68a3      	ldr	r3, [r4, #8]
 8003e90:	2000      	movs	r0, #0
 8003e92:	1b9b      	subs	r3, r3, r6
 8003e94:	60a3      	str	r3, [r4, #8]
 8003e96:	6823      	ldr	r3, [r4, #0]
 8003e98:	441e      	add	r6, r3
 8003e9a:	6026      	str	r6, [r4, #0]
 8003e9c:	e7dc      	b.n	8003e58 <__ssputs_r+0x58>
 8003e9e:	462a      	mov	r2, r5
 8003ea0:	f000 f93d 	bl	800411e <_realloc_r>
 8003ea4:	4606      	mov	r6, r0
 8003ea6:	2800      	cmp	r0, #0
 8003ea8:	d1e2      	bne.n	8003e70 <__ssputs_r+0x70>
 8003eaa:	6921      	ldr	r1, [r4, #16]
 8003eac:	4650      	mov	r0, sl
 8003eae:	f7ff ff01 	bl	8003cb4 <_free_r>
 8003eb2:	e7c8      	b.n	8003e46 <__ssputs_r+0x46>

08003eb4 <_svfiprintf_r>:
 8003eb4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003eb8:	461d      	mov	r5, r3
 8003eba:	898b      	ldrh	r3, [r1, #12]
 8003ebc:	b09d      	sub	sp, #116	; 0x74
 8003ebe:	061f      	lsls	r7, r3, #24
 8003ec0:	4680      	mov	r8, r0
 8003ec2:	460c      	mov	r4, r1
 8003ec4:	4616      	mov	r6, r2
 8003ec6:	d50f      	bpl.n	8003ee8 <_svfiprintf_r+0x34>
 8003ec8:	690b      	ldr	r3, [r1, #16]
 8003eca:	b96b      	cbnz	r3, 8003ee8 <_svfiprintf_r+0x34>
 8003ecc:	2140      	movs	r1, #64	; 0x40
 8003ece:	f7ff ff3d 	bl	8003d4c <_malloc_r>
 8003ed2:	6020      	str	r0, [r4, #0]
 8003ed4:	6120      	str	r0, [r4, #16]
 8003ed6:	b928      	cbnz	r0, 8003ee4 <_svfiprintf_r+0x30>
 8003ed8:	230c      	movs	r3, #12
 8003eda:	f8c8 3000 	str.w	r3, [r8]
 8003ede:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003ee2:	e0c8      	b.n	8004076 <_svfiprintf_r+0x1c2>
 8003ee4:	2340      	movs	r3, #64	; 0x40
 8003ee6:	6163      	str	r3, [r4, #20]
 8003ee8:	2300      	movs	r3, #0
 8003eea:	9309      	str	r3, [sp, #36]	; 0x24
 8003eec:	2320      	movs	r3, #32
 8003eee:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003ef2:	2330      	movs	r3, #48	; 0x30
 8003ef4:	f04f 0b01 	mov.w	fp, #1
 8003ef8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003efc:	9503      	str	r5, [sp, #12]
 8003efe:	4637      	mov	r7, r6
 8003f00:	463d      	mov	r5, r7
 8003f02:	f815 3b01 	ldrb.w	r3, [r5], #1
 8003f06:	b10b      	cbz	r3, 8003f0c <_svfiprintf_r+0x58>
 8003f08:	2b25      	cmp	r3, #37	; 0x25
 8003f0a:	d13e      	bne.n	8003f8a <_svfiprintf_r+0xd6>
 8003f0c:	ebb7 0a06 	subs.w	sl, r7, r6
 8003f10:	d00b      	beq.n	8003f2a <_svfiprintf_r+0x76>
 8003f12:	4653      	mov	r3, sl
 8003f14:	4632      	mov	r2, r6
 8003f16:	4621      	mov	r1, r4
 8003f18:	4640      	mov	r0, r8
 8003f1a:	f7ff ff71 	bl	8003e00 <__ssputs_r>
 8003f1e:	3001      	adds	r0, #1
 8003f20:	f000 80a4 	beq.w	800406c <_svfiprintf_r+0x1b8>
 8003f24:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003f26:	4453      	add	r3, sl
 8003f28:	9309      	str	r3, [sp, #36]	; 0x24
 8003f2a:	783b      	ldrb	r3, [r7, #0]
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	f000 809d 	beq.w	800406c <_svfiprintf_r+0x1b8>
 8003f32:	2300      	movs	r3, #0
 8003f34:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003f38:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003f3c:	9304      	str	r3, [sp, #16]
 8003f3e:	9307      	str	r3, [sp, #28]
 8003f40:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003f44:	931a      	str	r3, [sp, #104]	; 0x68
 8003f46:	462f      	mov	r7, r5
 8003f48:	2205      	movs	r2, #5
 8003f4a:	f817 1b01 	ldrb.w	r1, [r7], #1
 8003f4e:	4850      	ldr	r0, [pc, #320]	; (8004090 <_svfiprintf_r+0x1dc>)
 8003f50:	f7ff fbac 	bl	80036ac <memchr>
 8003f54:	9b04      	ldr	r3, [sp, #16]
 8003f56:	b9d0      	cbnz	r0, 8003f8e <_svfiprintf_r+0xda>
 8003f58:	06d9      	lsls	r1, r3, #27
 8003f5a:	bf44      	itt	mi
 8003f5c:	2220      	movmi	r2, #32
 8003f5e:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8003f62:	071a      	lsls	r2, r3, #28
 8003f64:	bf44      	itt	mi
 8003f66:	222b      	movmi	r2, #43	; 0x2b
 8003f68:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8003f6c:	782a      	ldrb	r2, [r5, #0]
 8003f6e:	2a2a      	cmp	r2, #42	; 0x2a
 8003f70:	d015      	beq.n	8003f9e <_svfiprintf_r+0xea>
 8003f72:	462f      	mov	r7, r5
 8003f74:	2000      	movs	r0, #0
 8003f76:	250a      	movs	r5, #10
 8003f78:	9a07      	ldr	r2, [sp, #28]
 8003f7a:	4639      	mov	r1, r7
 8003f7c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003f80:	3b30      	subs	r3, #48	; 0x30
 8003f82:	2b09      	cmp	r3, #9
 8003f84:	d94d      	bls.n	8004022 <_svfiprintf_r+0x16e>
 8003f86:	b1b8      	cbz	r0, 8003fb8 <_svfiprintf_r+0x104>
 8003f88:	e00f      	b.n	8003faa <_svfiprintf_r+0xf6>
 8003f8a:	462f      	mov	r7, r5
 8003f8c:	e7b8      	b.n	8003f00 <_svfiprintf_r+0x4c>
 8003f8e:	4a40      	ldr	r2, [pc, #256]	; (8004090 <_svfiprintf_r+0x1dc>)
 8003f90:	463d      	mov	r5, r7
 8003f92:	1a80      	subs	r0, r0, r2
 8003f94:	fa0b f000 	lsl.w	r0, fp, r0
 8003f98:	4318      	orrs	r0, r3
 8003f9a:	9004      	str	r0, [sp, #16]
 8003f9c:	e7d3      	b.n	8003f46 <_svfiprintf_r+0x92>
 8003f9e:	9a03      	ldr	r2, [sp, #12]
 8003fa0:	1d11      	adds	r1, r2, #4
 8003fa2:	6812      	ldr	r2, [r2, #0]
 8003fa4:	9103      	str	r1, [sp, #12]
 8003fa6:	2a00      	cmp	r2, #0
 8003fa8:	db01      	blt.n	8003fae <_svfiprintf_r+0xfa>
 8003faa:	9207      	str	r2, [sp, #28]
 8003fac:	e004      	b.n	8003fb8 <_svfiprintf_r+0x104>
 8003fae:	4252      	negs	r2, r2
 8003fb0:	f043 0302 	orr.w	r3, r3, #2
 8003fb4:	9207      	str	r2, [sp, #28]
 8003fb6:	9304      	str	r3, [sp, #16]
 8003fb8:	783b      	ldrb	r3, [r7, #0]
 8003fba:	2b2e      	cmp	r3, #46	; 0x2e
 8003fbc:	d10c      	bne.n	8003fd8 <_svfiprintf_r+0x124>
 8003fbe:	787b      	ldrb	r3, [r7, #1]
 8003fc0:	2b2a      	cmp	r3, #42	; 0x2a
 8003fc2:	d133      	bne.n	800402c <_svfiprintf_r+0x178>
 8003fc4:	9b03      	ldr	r3, [sp, #12]
 8003fc6:	3702      	adds	r7, #2
 8003fc8:	1d1a      	adds	r2, r3, #4
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	9203      	str	r2, [sp, #12]
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	bfb8      	it	lt
 8003fd2:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8003fd6:	9305      	str	r3, [sp, #20]
 8003fd8:	4d2e      	ldr	r5, [pc, #184]	; (8004094 <_svfiprintf_r+0x1e0>)
 8003fda:	2203      	movs	r2, #3
 8003fdc:	7839      	ldrb	r1, [r7, #0]
 8003fde:	4628      	mov	r0, r5
 8003fe0:	f7ff fb64 	bl	80036ac <memchr>
 8003fe4:	b138      	cbz	r0, 8003ff6 <_svfiprintf_r+0x142>
 8003fe6:	2340      	movs	r3, #64	; 0x40
 8003fe8:	1b40      	subs	r0, r0, r5
 8003fea:	fa03 f000 	lsl.w	r0, r3, r0
 8003fee:	9b04      	ldr	r3, [sp, #16]
 8003ff0:	3701      	adds	r7, #1
 8003ff2:	4303      	orrs	r3, r0
 8003ff4:	9304      	str	r3, [sp, #16]
 8003ff6:	7839      	ldrb	r1, [r7, #0]
 8003ff8:	2206      	movs	r2, #6
 8003ffa:	4827      	ldr	r0, [pc, #156]	; (8004098 <_svfiprintf_r+0x1e4>)
 8003ffc:	1c7e      	adds	r6, r7, #1
 8003ffe:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004002:	f7ff fb53 	bl	80036ac <memchr>
 8004006:	2800      	cmp	r0, #0
 8004008:	d038      	beq.n	800407c <_svfiprintf_r+0x1c8>
 800400a:	4b24      	ldr	r3, [pc, #144]	; (800409c <_svfiprintf_r+0x1e8>)
 800400c:	bb13      	cbnz	r3, 8004054 <_svfiprintf_r+0x1a0>
 800400e:	9b03      	ldr	r3, [sp, #12]
 8004010:	3307      	adds	r3, #7
 8004012:	f023 0307 	bic.w	r3, r3, #7
 8004016:	3308      	adds	r3, #8
 8004018:	9303      	str	r3, [sp, #12]
 800401a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800401c:	444b      	add	r3, r9
 800401e:	9309      	str	r3, [sp, #36]	; 0x24
 8004020:	e76d      	b.n	8003efe <_svfiprintf_r+0x4a>
 8004022:	fb05 3202 	mla	r2, r5, r2, r3
 8004026:	2001      	movs	r0, #1
 8004028:	460f      	mov	r7, r1
 800402a:	e7a6      	b.n	8003f7a <_svfiprintf_r+0xc6>
 800402c:	2300      	movs	r3, #0
 800402e:	250a      	movs	r5, #10
 8004030:	4619      	mov	r1, r3
 8004032:	3701      	adds	r7, #1
 8004034:	9305      	str	r3, [sp, #20]
 8004036:	4638      	mov	r0, r7
 8004038:	f810 2b01 	ldrb.w	r2, [r0], #1
 800403c:	3a30      	subs	r2, #48	; 0x30
 800403e:	2a09      	cmp	r2, #9
 8004040:	d903      	bls.n	800404a <_svfiprintf_r+0x196>
 8004042:	2b00      	cmp	r3, #0
 8004044:	d0c8      	beq.n	8003fd8 <_svfiprintf_r+0x124>
 8004046:	9105      	str	r1, [sp, #20]
 8004048:	e7c6      	b.n	8003fd8 <_svfiprintf_r+0x124>
 800404a:	fb05 2101 	mla	r1, r5, r1, r2
 800404e:	2301      	movs	r3, #1
 8004050:	4607      	mov	r7, r0
 8004052:	e7f0      	b.n	8004036 <_svfiprintf_r+0x182>
 8004054:	ab03      	add	r3, sp, #12
 8004056:	9300      	str	r3, [sp, #0]
 8004058:	4622      	mov	r2, r4
 800405a:	4b11      	ldr	r3, [pc, #68]	; (80040a0 <_svfiprintf_r+0x1ec>)
 800405c:	a904      	add	r1, sp, #16
 800405e:	4640      	mov	r0, r8
 8004060:	f7fe f8ec 	bl	800223c <_printf_float>
 8004064:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 8004068:	4681      	mov	r9, r0
 800406a:	d1d6      	bne.n	800401a <_svfiprintf_r+0x166>
 800406c:	89a3      	ldrh	r3, [r4, #12]
 800406e:	065b      	lsls	r3, r3, #25
 8004070:	f53f af35 	bmi.w	8003ede <_svfiprintf_r+0x2a>
 8004074:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004076:	b01d      	add	sp, #116	; 0x74
 8004078:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800407c:	ab03      	add	r3, sp, #12
 800407e:	9300      	str	r3, [sp, #0]
 8004080:	4622      	mov	r2, r4
 8004082:	4b07      	ldr	r3, [pc, #28]	; (80040a0 <_svfiprintf_r+0x1ec>)
 8004084:	a904      	add	r1, sp, #16
 8004086:	4640      	mov	r0, r8
 8004088:	f7fe fb84 	bl	8002794 <_printf_i>
 800408c:	e7ea      	b.n	8004064 <_svfiprintf_r+0x1b0>
 800408e:	bf00      	nop
 8004090:	08004324 	.word	0x08004324
 8004094:	0800432a 	.word	0x0800432a
 8004098:	0800432e 	.word	0x0800432e
 800409c:	0800223d 	.word	0x0800223d
 80040a0:	08003e01 	.word	0x08003e01

080040a4 <_sbrk_r>:
 80040a4:	b538      	push	{r3, r4, r5, lr}
 80040a6:	2300      	movs	r3, #0
 80040a8:	4c05      	ldr	r4, [pc, #20]	; (80040c0 <_sbrk_r+0x1c>)
 80040aa:	4605      	mov	r5, r0
 80040ac:	4608      	mov	r0, r1
 80040ae:	6023      	str	r3, [r4, #0]
 80040b0:	f7fc fea4 	bl	8000dfc <_sbrk>
 80040b4:	1c43      	adds	r3, r0, #1
 80040b6:	d102      	bne.n	80040be <_sbrk_r+0x1a>
 80040b8:	6823      	ldr	r3, [r4, #0]
 80040ba:	b103      	cbz	r3, 80040be <_sbrk_r+0x1a>
 80040bc:	602b      	str	r3, [r5, #0]
 80040be:	bd38      	pop	{r3, r4, r5, pc}
 80040c0:	20000264 	.word	0x20000264

080040c4 <__ascii_mbtowc>:
 80040c4:	b082      	sub	sp, #8
 80040c6:	b901      	cbnz	r1, 80040ca <__ascii_mbtowc+0x6>
 80040c8:	a901      	add	r1, sp, #4
 80040ca:	b142      	cbz	r2, 80040de <__ascii_mbtowc+0x1a>
 80040cc:	b14b      	cbz	r3, 80040e2 <__ascii_mbtowc+0x1e>
 80040ce:	7813      	ldrb	r3, [r2, #0]
 80040d0:	600b      	str	r3, [r1, #0]
 80040d2:	7812      	ldrb	r2, [r2, #0]
 80040d4:	1c10      	adds	r0, r2, #0
 80040d6:	bf18      	it	ne
 80040d8:	2001      	movne	r0, #1
 80040da:	b002      	add	sp, #8
 80040dc:	4770      	bx	lr
 80040de:	4610      	mov	r0, r2
 80040e0:	e7fb      	b.n	80040da <__ascii_mbtowc+0x16>
 80040e2:	f06f 0001 	mvn.w	r0, #1
 80040e6:	e7f8      	b.n	80040da <__ascii_mbtowc+0x16>

080040e8 <memmove>:
 80040e8:	4288      	cmp	r0, r1
 80040ea:	b510      	push	{r4, lr}
 80040ec:	eb01 0302 	add.w	r3, r1, r2
 80040f0:	d807      	bhi.n	8004102 <memmove+0x1a>
 80040f2:	1e42      	subs	r2, r0, #1
 80040f4:	4299      	cmp	r1, r3
 80040f6:	d00a      	beq.n	800410e <memmove+0x26>
 80040f8:	f811 4b01 	ldrb.w	r4, [r1], #1
 80040fc:	f802 4f01 	strb.w	r4, [r2, #1]!
 8004100:	e7f8      	b.n	80040f4 <memmove+0xc>
 8004102:	4283      	cmp	r3, r0
 8004104:	d9f5      	bls.n	80040f2 <memmove+0xa>
 8004106:	1881      	adds	r1, r0, r2
 8004108:	1ad2      	subs	r2, r2, r3
 800410a:	42d3      	cmn	r3, r2
 800410c:	d100      	bne.n	8004110 <memmove+0x28>
 800410e:	bd10      	pop	{r4, pc}
 8004110:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004114:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8004118:	e7f7      	b.n	800410a <memmove+0x22>

0800411a <__malloc_lock>:
 800411a:	4770      	bx	lr

0800411c <__malloc_unlock>:
 800411c:	4770      	bx	lr

0800411e <_realloc_r>:
 800411e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004120:	4607      	mov	r7, r0
 8004122:	4614      	mov	r4, r2
 8004124:	460e      	mov	r6, r1
 8004126:	b921      	cbnz	r1, 8004132 <_realloc_r+0x14>
 8004128:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800412c:	4611      	mov	r1, r2
 800412e:	f7ff be0d 	b.w	8003d4c <_malloc_r>
 8004132:	b922      	cbnz	r2, 800413e <_realloc_r+0x20>
 8004134:	f7ff fdbe 	bl	8003cb4 <_free_r>
 8004138:	4625      	mov	r5, r4
 800413a:	4628      	mov	r0, r5
 800413c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800413e:	f000 f821 	bl	8004184 <_malloc_usable_size_r>
 8004142:	42a0      	cmp	r0, r4
 8004144:	d20f      	bcs.n	8004166 <_realloc_r+0x48>
 8004146:	4621      	mov	r1, r4
 8004148:	4638      	mov	r0, r7
 800414a:	f7ff fdff 	bl	8003d4c <_malloc_r>
 800414e:	4605      	mov	r5, r0
 8004150:	2800      	cmp	r0, #0
 8004152:	d0f2      	beq.n	800413a <_realloc_r+0x1c>
 8004154:	4631      	mov	r1, r6
 8004156:	4622      	mov	r2, r4
 8004158:	f7ff fab6 	bl	80036c8 <memcpy>
 800415c:	4631      	mov	r1, r6
 800415e:	4638      	mov	r0, r7
 8004160:	f7ff fda8 	bl	8003cb4 <_free_r>
 8004164:	e7e9      	b.n	800413a <_realloc_r+0x1c>
 8004166:	4635      	mov	r5, r6
 8004168:	e7e7      	b.n	800413a <_realloc_r+0x1c>

0800416a <__ascii_wctomb>:
 800416a:	b149      	cbz	r1, 8004180 <__ascii_wctomb+0x16>
 800416c:	2aff      	cmp	r2, #255	; 0xff
 800416e:	bf8b      	itete	hi
 8004170:	238a      	movhi	r3, #138	; 0x8a
 8004172:	700a      	strbls	r2, [r1, #0]
 8004174:	6003      	strhi	r3, [r0, #0]
 8004176:	2001      	movls	r0, #1
 8004178:	bf88      	it	hi
 800417a:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 800417e:	4770      	bx	lr
 8004180:	4608      	mov	r0, r1
 8004182:	4770      	bx	lr

08004184 <_malloc_usable_size_r>:
 8004184:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004188:	1f18      	subs	r0, r3, #4
 800418a:	2b00      	cmp	r3, #0
 800418c:	bfbc      	itt	lt
 800418e:	580b      	ldrlt	r3, [r1, r0]
 8004190:	18c0      	addlt	r0, r0, r3
 8004192:	4770      	bx	lr

08004194 <_init>:
 8004194:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004196:	bf00      	nop
 8004198:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800419a:	bc08      	pop	{r3}
 800419c:	469e      	mov	lr, r3
 800419e:	4770      	bx	lr

080041a0 <_fini>:
 80041a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80041a2:	bf00      	nop
 80041a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80041a6:	bc08      	pop	{r3}
 80041a8:	469e      	mov	lr, r3
 80041aa:	4770      	bx	lr
