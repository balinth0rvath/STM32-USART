
STM32-USART.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004d64  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002a8  08004e78  08004e78  00014e78  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005120  08005120  000201e4  2**0
                  CONTENTS
  4 .ARM          00000000  08005120  08005120  000201e4  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005120  08005120  000201e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005120  08005120  00015120  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005124  08005124  00015124  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e4  20000000  08005128  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000c0  200001e8  0800530c  000201e8  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  200002a8  0800530c  000202a8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201e4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00006aab  00000000  00000000  0002020d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001577  00000000  00000000  00026cb8  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000718  00000000  00000000  00028230  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000650  00000000  00000000  00028948  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00016a76  00000000  00000000  00028f98  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000064b6  00000000  00000000  0003fa0e  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00084a23  00000000  00000000  00045ec4  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000ca8e7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002564  00000000  00000000  000ca964  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001e8 	.word	0x200001e8
 800012c:	00000000 	.word	0x00000000
 8000130:	08004e5c 	.word	0x08004e5c

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001ec 	.word	0x200001ec
 800014c:	08004e5c 	.word	0x08004e5c

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800029e:	f1a4 0401 	sub.w	r4, r4, #1
 80002a2:	d1e9      	bne.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000a88:	b598      	push	{r3, r4, r7, lr}
 8000a8a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000a8c:	f000 fafc 	bl	8001088 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000a90:	f000 f888 	bl	8000ba4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000a94:	f000 f944 	bl	8000d20 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000a98:	f000 f918 	bl	8000ccc <MX_USART2_UART_Init>
  MX_ADC1_Init();
 8000a9c:	f000 f8d8 	bl	8000c50 <MX_ADC1_Init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
    HAL_ADC_Start(&hadc1);
 8000aa0:	4835      	ldr	r0, [pc, #212]	; (8000b78 <main+0xf0>)
 8000aa2:	f000 fc4d 	bl	8001340 <HAL_ADC_Start>
    HAL_ADC_PollForConversion(&hadc1, 100);
 8000aa6:	2164      	movs	r1, #100	; 0x64
 8000aa8:	4833      	ldr	r0, [pc, #204]	; (8000b78 <main+0xf0>)
 8000aaa:	f000 fcf7 	bl	800149c <HAL_ADC_PollForConversion>
    raw = (double) HAL_ADC_GetValue(&hadc1);
 8000aae:	4832      	ldr	r0, [pc, #200]	; (8000b78 <main+0xf0>)
 8000ab0:	f000 fdee 	bl	8001690 <HAL_ADC_GetValue>
 8000ab4:	4603      	mov	r3, r0
 8000ab6:	4618      	mov	r0, r3
 8000ab8:	f7ff fc94 	bl	80003e4 <__aeabi_ui2d>
 8000abc:	4603      	mov	r3, r0
 8000abe:	460c      	mov	r4, r1
 8000ac0:	4a2e      	ldr	r2, [pc, #184]	; (8000b7c <main+0xf4>)
 8000ac2:	e9c2 3400 	strd	r3, r4, [r2]
    raw = raw * 0.452;
 8000ac6:	4b2d      	ldr	r3, [pc, #180]	; (8000b7c <main+0xf4>)
 8000ac8:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000acc:	a328      	add	r3, pc, #160	; (adr r3, 8000b70 <main+0xe8>)
 8000ace:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000ad2:	f7ff fd01 	bl	80004d8 <__aeabi_dmul>
 8000ad6:	4603      	mov	r3, r0
 8000ad8:	460c      	mov	r4, r1
 8000ada:	4a28      	ldr	r2, [pc, #160]	; (8000b7c <main+0xf4>)
 8000adc:	e9c2 3400 	strd	r3, r4, [r2]
    value = (raw - 500.0) / 10;
 8000ae0:	4b26      	ldr	r3, [pc, #152]	; (8000b7c <main+0xf4>)
 8000ae2:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000ae6:	f04f 0200 	mov.w	r2, #0
 8000aea:	4b25      	ldr	r3, [pc, #148]	; (8000b80 <main+0xf8>)
 8000aec:	f7ff fb3c 	bl	8000168 <__aeabi_dsub>
 8000af0:	4603      	mov	r3, r0
 8000af2:	460c      	mov	r4, r1
 8000af4:	4618      	mov	r0, r3
 8000af6:	4621      	mov	r1, r4
 8000af8:	f04f 0200 	mov.w	r2, #0
 8000afc:	4b21      	ldr	r3, [pc, #132]	; (8000b84 <main+0xfc>)
 8000afe:	f7ff fe15 	bl	800072c <__aeabi_ddiv>
 8000b02:	4603      	mov	r3, r0
 8000b04:	460c      	mov	r4, r1
 8000b06:	4a20      	ldr	r2, [pc, #128]	; (8000b88 <main+0x100>)
 8000b08:	e9c2 3400 	strd	r3, r4, [r2]
    value = (9 * value) / 5 + 32;
 8000b0c:	4b1e      	ldr	r3, [pc, #120]	; (8000b88 <main+0x100>)
 8000b0e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000b12:	f04f 0200 	mov.w	r2, #0
 8000b16:	4b1d      	ldr	r3, [pc, #116]	; (8000b8c <main+0x104>)
 8000b18:	f7ff fcde 	bl	80004d8 <__aeabi_dmul>
 8000b1c:	4603      	mov	r3, r0
 8000b1e:	460c      	mov	r4, r1
 8000b20:	4618      	mov	r0, r3
 8000b22:	4621      	mov	r1, r4
 8000b24:	f04f 0200 	mov.w	r2, #0
 8000b28:	4b19      	ldr	r3, [pc, #100]	; (8000b90 <main+0x108>)
 8000b2a:	f7ff fdff 	bl	800072c <__aeabi_ddiv>
 8000b2e:	4603      	mov	r3, r0
 8000b30:	460c      	mov	r4, r1
 8000b32:	4618      	mov	r0, r3
 8000b34:	4621      	mov	r1, r4
 8000b36:	f04f 0200 	mov.w	r2, #0
 8000b3a:	4b16      	ldr	r3, [pc, #88]	; (8000b94 <main+0x10c>)
 8000b3c:	f7ff fb16 	bl	800016c <__adddf3>
 8000b40:	4603      	mov	r3, r0
 8000b42:	460c      	mov	r4, r1
 8000b44:	4a10      	ldr	r2, [pc, #64]	; (8000b88 <main+0x100>)
 8000b46:	e9c2 3400 	strd	r3, r4, [r2]
    sprintf(msg, "%f\r\n", value );
 8000b4a:	4b0f      	ldr	r3, [pc, #60]	; (8000b88 <main+0x100>)
 8000b4c:	cb18      	ldmia	r3, {r3, r4}
 8000b4e:	461a      	mov	r2, r3
 8000b50:	4623      	mov	r3, r4
 8000b52:	4911      	ldr	r1, [pc, #68]	; (8000b98 <main+0x110>)
 8000b54:	4811      	ldr	r0, [pc, #68]	; (8000b9c <main+0x114>)
 8000b56:	f002 fd95 	bl	8003684 <siprintf>
    HAL_UART_Transmit(&huart2, msg, 20, 100);
 8000b5a:	2364      	movs	r3, #100	; 0x64
 8000b5c:	2214      	movs	r2, #20
 8000b5e:	490f      	ldr	r1, [pc, #60]	; (8000b9c <main+0x114>)
 8000b60:	480f      	ldr	r0, [pc, #60]	; (8000ba0 <main+0x118>)
 8000b62:	f001 ffa2 	bl	8002aaa <HAL_UART_Transmit>
    HAL_Delay(1000);
 8000b66:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000b6a:	f000 faef 	bl	800114c <HAL_Delay>
  {
 8000b6e:	e797      	b.n	8000aa0 <main+0x18>
 8000b70:	6872b021 	.word	0x6872b021
 8000b74:	3fdced91 	.word	0x3fdced91
 8000b78:	20000230 	.word	0x20000230
 8000b7c:	20000208 	.word	0x20000208
 8000b80:	407f4000 	.word	0x407f4000
 8000b84:	40240000 	.word	0x40240000
 8000b88:	20000000 	.word	0x20000000
 8000b8c:	40220000 	.word	0x40220000
 8000b90:	40140000 	.word	0x40140000
 8000b94:	40400000 	.word	0x40400000
 8000b98:	08004e78 	.word	0x08004e78
 8000b9c:	20000210 	.word	0x20000210
 8000ba0:	20000260 	.word	0x20000260

08000ba4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ba4:	b580      	push	{r7, lr}
 8000ba6:	b094      	sub	sp, #80	; 0x50
 8000ba8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000baa:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000bae:	2228      	movs	r2, #40	; 0x28
 8000bb0:	2100      	movs	r1, #0
 8000bb2:	4618      	mov	r0, r3
 8000bb4:	f002 f90e 	bl	8002dd4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000bb8:	f107 0314 	add.w	r3, r7, #20
 8000bbc:	2200      	movs	r2, #0
 8000bbe:	601a      	str	r2, [r3, #0]
 8000bc0:	605a      	str	r2, [r3, #4]
 8000bc2:	609a      	str	r2, [r3, #8]
 8000bc4:	60da      	str	r2, [r3, #12]
 8000bc6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000bc8:	1d3b      	adds	r3, r7, #4
 8000bca:	2200      	movs	r2, #0
 8000bcc:	601a      	str	r2, [r3, #0]
 8000bce:	605a      	str	r2, [r3, #4]
 8000bd0:	609a      	str	r2, [r3, #8]
 8000bd2:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000bd4:	2302      	movs	r3, #2
 8000bd6:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000bd8:	2301      	movs	r3, #1
 8000bda:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000bdc:	2310      	movs	r3, #16
 8000bde:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000be0:	2302      	movs	r3, #2
 8000be2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 8000be4:	2300      	movs	r3, #0
 8000be6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8000be8:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 8000bec:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000bee:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000bf2:	4618      	mov	r0, r3
 8000bf4:	f001 f97e 	bl	8001ef4 <HAL_RCC_OscConfig>
 8000bf8:	4603      	mov	r3, r0
 8000bfa:	2b00      	cmp	r3, #0
 8000bfc:	d001      	beq.n	8000c02 <SystemClock_Config+0x5e>
  {
    Error_Handler();
 8000bfe:	f000 f8fd 	bl	8000dfc <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c02:	230f      	movs	r3, #15
 8000c04:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000c06:	2302      	movs	r3, #2
 8000c08:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000c0a:	2300      	movs	r3, #0
 8000c0c:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000c0e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000c12:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000c14:	2300      	movs	r3, #0
 8000c16:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000c18:	f107 0314 	add.w	r3, r7, #20
 8000c1c:	2102      	movs	r1, #2
 8000c1e:	4618      	mov	r0, r3
 8000c20:	f001 fbe8 	bl	80023f4 <HAL_RCC_ClockConfig>
 8000c24:	4603      	mov	r3, r0
 8000c26:	2b00      	cmp	r3, #0
 8000c28:	d001      	beq.n	8000c2e <SystemClock_Config+0x8a>
  {
    Error_Handler();
 8000c2a:	f000 f8e7 	bl	8000dfc <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000c2e:	2302      	movs	r3, #2
 8000c30:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV2;
 8000c32:	2300      	movs	r3, #0
 8000c34:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000c36:	1d3b      	adds	r3, r7, #4
 8000c38:	4618      	mov	r0, r3
 8000c3a:	f001 fd77 	bl	800272c <HAL_RCCEx_PeriphCLKConfig>
 8000c3e:	4603      	mov	r3, r0
 8000c40:	2b00      	cmp	r3, #0
 8000c42:	d001      	beq.n	8000c48 <SystemClock_Config+0xa4>
  {
    Error_Handler();
 8000c44:	f000 f8da 	bl	8000dfc <Error_Handler>
  }
}
 8000c48:	bf00      	nop
 8000c4a:	3750      	adds	r7, #80	; 0x50
 8000c4c:	46bd      	mov	sp, r7
 8000c4e:	bd80      	pop	{r7, pc}

08000c50 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000c50:	b580      	push	{r7, lr}
 8000c52:	b084      	sub	sp, #16
 8000c54:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000c56:	1d3b      	adds	r3, r7, #4
 8000c58:	2200      	movs	r2, #0
 8000c5a:	601a      	str	r2, [r3, #0]
 8000c5c:	605a      	str	r2, [r3, #4]
 8000c5e:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 8000c60:	4b18      	ldr	r3, [pc, #96]	; (8000cc4 <MX_ADC1_Init+0x74>)
 8000c62:	4a19      	ldr	r2, [pc, #100]	; (8000cc8 <MX_ADC1_Init+0x78>)
 8000c64:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000c66:	4b17      	ldr	r3, [pc, #92]	; (8000cc4 <MX_ADC1_Init+0x74>)
 8000c68:	2200      	movs	r2, #0
 8000c6a:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000c6c:	4b15      	ldr	r3, [pc, #84]	; (8000cc4 <MX_ADC1_Init+0x74>)
 8000c6e:	2200      	movs	r2, #0
 8000c70:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000c72:	4b14      	ldr	r3, [pc, #80]	; (8000cc4 <MX_ADC1_Init+0x74>)
 8000c74:	2200      	movs	r2, #0
 8000c76:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000c78:	4b12      	ldr	r3, [pc, #72]	; (8000cc4 <MX_ADC1_Init+0x74>)
 8000c7a:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8000c7e:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000c80:	4b10      	ldr	r3, [pc, #64]	; (8000cc4 <MX_ADC1_Init+0x74>)
 8000c82:	2200      	movs	r2, #0
 8000c84:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 8000c86:	4b0f      	ldr	r3, [pc, #60]	; (8000cc4 <MX_ADC1_Init+0x74>)
 8000c88:	2201      	movs	r2, #1
 8000c8a:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000c8c:	480d      	ldr	r0, [pc, #52]	; (8000cc4 <MX_ADC1_Init+0x74>)
 8000c8e:	f000 fa7f 	bl	8001190 <HAL_ADC_Init>
 8000c92:	4603      	mov	r3, r0
 8000c94:	2b00      	cmp	r3, #0
 8000c96:	d001      	beq.n	8000c9c <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 8000c98:	f000 f8b0 	bl	8000dfc <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000c9c:	2301      	movs	r3, #1
 8000c9e:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000ca0:	2301      	movs	r3, #1
 8000ca2:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000ca4:	2300      	movs	r3, #0
 8000ca6:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000ca8:	1d3b      	adds	r3, r7, #4
 8000caa:	4619      	mov	r1, r3
 8000cac:	4805      	ldr	r0, [pc, #20]	; (8000cc4 <MX_ADC1_Init+0x74>)
 8000cae:	f000 fcfb 	bl	80016a8 <HAL_ADC_ConfigChannel>
 8000cb2:	4603      	mov	r3, r0
 8000cb4:	2b00      	cmp	r3, #0
 8000cb6:	d001      	beq.n	8000cbc <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 8000cb8:	f000 f8a0 	bl	8000dfc <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000cbc:	bf00      	nop
 8000cbe:	3710      	adds	r7, #16
 8000cc0:	46bd      	mov	sp, r7
 8000cc2:	bd80      	pop	{r7, pc}
 8000cc4:	20000230 	.word	0x20000230
 8000cc8:	40012400 	.word	0x40012400

08000ccc <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000ccc:	b580      	push	{r7, lr}
 8000cce:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000cd0:	4b11      	ldr	r3, [pc, #68]	; (8000d18 <MX_USART2_UART_Init+0x4c>)
 8000cd2:	4a12      	ldr	r2, [pc, #72]	; (8000d1c <MX_USART2_UART_Init+0x50>)
 8000cd4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000cd6:	4b10      	ldr	r3, [pc, #64]	; (8000d18 <MX_USART2_UART_Init+0x4c>)
 8000cd8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000cdc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000cde:	4b0e      	ldr	r3, [pc, #56]	; (8000d18 <MX_USART2_UART_Init+0x4c>)
 8000ce0:	2200      	movs	r2, #0
 8000ce2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000ce4:	4b0c      	ldr	r3, [pc, #48]	; (8000d18 <MX_USART2_UART_Init+0x4c>)
 8000ce6:	2200      	movs	r2, #0
 8000ce8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000cea:	4b0b      	ldr	r3, [pc, #44]	; (8000d18 <MX_USART2_UART_Init+0x4c>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000cf0:	4b09      	ldr	r3, [pc, #36]	; (8000d18 <MX_USART2_UART_Init+0x4c>)
 8000cf2:	220c      	movs	r2, #12
 8000cf4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000cf6:	4b08      	ldr	r3, [pc, #32]	; (8000d18 <MX_USART2_UART_Init+0x4c>)
 8000cf8:	2200      	movs	r2, #0
 8000cfa:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000cfc:	4b06      	ldr	r3, [pc, #24]	; (8000d18 <MX_USART2_UART_Init+0x4c>)
 8000cfe:	2200      	movs	r2, #0
 8000d00:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000d02:	4805      	ldr	r0, [pc, #20]	; (8000d18 <MX_USART2_UART_Init+0x4c>)
 8000d04:	f001 fe84 	bl	8002a10 <HAL_UART_Init>
 8000d08:	4603      	mov	r3, r0
 8000d0a:	2b00      	cmp	r3, #0
 8000d0c:	d001      	beq.n	8000d12 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000d0e:	f000 f875 	bl	8000dfc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000d12:	bf00      	nop
 8000d14:	bd80      	pop	{r7, pc}
 8000d16:	bf00      	nop
 8000d18:	20000260 	.word	0x20000260
 8000d1c:	40004400 	.word	0x40004400

08000d20 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000d20:	b580      	push	{r7, lr}
 8000d22:	b088      	sub	sp, #32
 8000d24:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d26:	f107 0310 	add.w	r3, r7, #16
 8000d2a:	2200      	movs	r2, #0
 8000d2c:	601a      	str	r2, [r3, #0]
 8000d2e:	605a      	str	r2, [r3, #4]
 8000d30:	609a      	str	r2, [r3, #8]
 8000d32:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d34:	4b2d      	ldr	r3, [pc, #180]	; (8000dec <MX_GPIO_Init+0xcc>)
 8000d36:	699b      	ldr	r3, [r3, #24]
 8000d38:	4a2c      	ldr	r2, [pc, #176]	; (8000dec <MX_GPIO_Init+0xcc>)
 8000d3a:	f043 0310 	orr.w	r3, r3, #16
 8000d3e:	6193      	str	r3, [r2, #24]
 8000d40:	4b2a      	ldr	r3, [pc, #168]	; (8000dec <MX_GPIO_Init+0xcc>)
 8000d42:	699b      	ldr	r3, [r3, #24]
 8000d44:	f003 0310 	and.w	r3, r3, #16
 8000d48:	60fb      	str	r3, [r7, #12]
 8000d4a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000d4c:	4b27      	ldr	r3, [pc, #156]	; (8000dec <MX_GPIO_Init+0xcc>)
 8000d4e:	699b      	ldr	r3, [r3, #24]
 8000d50:	4a26      	ldr	r2, [pc, #152]	; (8000dec <MX_GPIO_Init+0xcc>)
 8000d52:	f043 0320 	orr.w	r3, r3, #32
 8000d56:	6193      	str	r3, [r2, #24]
 8000d58:	4b24      	ldr	r3, [pc, #144]	; (8000dec <MX_GPIO_Init+0xcc>)
 8000d5a:	699b      	ldr	r3, [r3, #24]
 8000d5c:	f003 0320 	and.w	r3, r3, #32
 8000d60:	60bb      	str	r3, [r7, #8]
 8000d62:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d64:	4b21      	ldr	r3, [pc, #132]	; (8000dec <MX_GPIO_Init+0xcc>)
 8000d66:	699b      	ldr	r3, [r3, #24]
 8000d68:	4a20      	ldr	r2, [pc, #128]	; (8000dec <MX_GPIO_Init+0xcc>)
 8000d6a:	f043 0304 	orr.w	r3, r3, #4
 8000d6e:	6193      	str	r3, [r2, #24]
 8000d70:	4b1e      	ldr	r3, [pc, #120]	; (8000dec <MX_GPIO_Init+0xcc>)
 8000d72:	699b      	ldr	r3, [r3, #24]
 8000d74:	f003 0304 	and.w	r3, r3, #4
 8000d78:	607b      	str	r3, [r7, #4]
 8000d7a:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d7c:	4b1b      	ldr	r3, [pc, #108]	; (8000dec <MX_GPIO_Init+0xcc>)
 8000d7e:	699b      	ldr	r3, [r3, #24]
 8000d80:	4a1a      	ldr	r2, [pc, #104]	; (8000dec <MX_GPIO_Init+0xcc>)
 8000d82:	f043 0308 	orr.w	r3, r3, #8
 8000d86:	6193      	str	r3, [r2, #24]
 8000d88:	4b18      	ldr	r3, [pc, #96]	; (8000dec <MX_GPIO_Init+0xcc>)
 8000d8a:	699b      	ldr	r3, [r3, #24]
 8000d8c:	f003 0308 	and.w	r3, r3, #8
 8000d90:	603b      	str	r3, [r7, #0]
 8000d92:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000d94:	2200      	movs	r2, #0
 8000d96:	2120      	movs	r1, #32
 8000d98:	4815      	ldr	r0, [pc, #84]	; (8000df0 <MX_GPIO_Init+0xd0>)
 8000d9a:	f001 f871 	bl	8001e80 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000d9e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000da2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000da4:	4b13      	ldr	r3, [pc, #76]	; (8000df4 <MX_GPIO_Init+0xd4>)
 8000da6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000da8:	2300      	movs	r3, #0
 8000daa:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000dac:	f107 0310 	add.w	r3, r7, #16
 8000db0:	4619      	mov	r1, r3
 8000db2:	4811      	ldr	r0, [pc, #68]	; (8000df8 <MX_GPIO_Init+0xd8>)
 8000db4:	f000 ff0a 	bl	8001bcc <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000db8:	2320      	movs	r3, #32
 8000dba:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000dbc:	2301      	movs	r3, #1
 8000dbe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dc0:	2300      	movs	r3, #0
 8000dc2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dc4:	2302      	movs	r3, #2
 8000dc6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000dc8:	f107 0310 	add.w	r3, r7, #16
 8000dcc:	4619      	mov	r1, r3
 8000dce:	4808      	ldr	r0, [pc, #32]	; (8000df0 <MX_GPIO_Init+0xd0>)
 8000dd0:	f000 fefc 	bl	8001bcc <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000dd4:	2200      	movs	r2, #0
 8000dd6:	2100      	movs	r1, #0
 8000dd8:	2028      	movs	r0, #40	; 0x28
 8000dda:	f000 fec0 	bl	8001b5e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000dde:	2028      	movs	r0, #40	; 0x28
 8000de0:	f000 fed9 	bl	8001b96 <HAL_NVIC_EnableIRQ>

}
 8000de4:	bf00      	nop
 8000de6:	3720      	adds	r7, #32
 8000de8:	46bd      	mov	sp, r7
 8000dea:	bd80      	pop	{r7, pc}
 8000dec:	40021000 	.word	0x40021000
 8000df0:	40010800 	.word	0x40010800
 8000df4:	10110000 	.word	0x10110000
 8000df8:	40011000 	.word	0x40011000

08000dfc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000dfc:	b480      	push	{r7}
 8000dfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000e00:	bf00      	nop
 8000e02:	46bd      	mov	sp, r7
 8000e04:	bc80      	pop	{r7}
 8000e06:	4770      	bx	lr

08000e08 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e08:	b480      	push	{r7}
 8000e0a:	b085      	sub	sp, #20
 8000e0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000e0e:	4b15      	ldr	r3, [pc, #84]	; (8000e64 <HAL_MspInit+0x5c>)
 8000e10:	699b      	ldr	r3, [r3, #24]
 8000e12:	4a14      	ldr	r2, [pc, #80]	; (8000e64 <HAL_MspInit+0x5c>)
 8000e14:	f043 0301 	orr.w	r3, r3, #1
 8000e18:	6193      	str	r3, [r2, #24]
 8000e1a:	4b12      	ldr	r3, [pc, #72]	; (8000e64 <HAL_MspInit+0x5c>)
 8000e1c:	699b      	ldr	r3, [r3, #24]
 8000e1e:	f003 0301 	and.w	r3, r3, #1
 8000e22:	60bb      	str	r3, [r7, #8]
 8000e24:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e26:	4b0f      	ldr	r3, [pc, #60]	; (8000e64 <HAL_MspInit+0x5c>)
 8000e28:	69db      	ldr	r3, [r3, #28]
 8000e2a:	4a0e      	ldr	r2, [pc, #56]	; (8000e64 <HAL_MspInit+0x5c>)
 8000e2c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e30:	61d3      	str	r3, [r2, #28]
 8000e32:	4b0c      	ldr	r3, [pc, #48]	; (8000e64 <HAL_MspInit+0x5c>)
 8000e34:	69db      	ldr	r3, [r3, #28]
 8000e36:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e3a:	607b      	str	r3, [r7, #4]
 8000e3c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000e3e:	4b0a      	ldr	r3, [pc, #40]	; (8000e68 <HAL_MspInit+0x60>)
 8000e40:	685b      	ldr	r3, [r3, #4]
 8000e42:	60fb      	str	r3, [r7, #12]
 8000e44:	68fb      	ldr	r3, [r7, #12]
 8000e46:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000e4a:	60fb      	str	r3, [r7, #12]
 8000e4c:	68fb      	ldr	r3, [r7, #12]
 8000e4e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000e52:	60fb      	str	r3, [r7, #12]
 8000e54:	4a04      	ldr	r2, [pc, #16]	; (8000e68 <HAL_MspInit+0x60>)
 8000e56:	68fb      	ldr	r3, [r7, #12]
 8000e58:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e5a:	bf00      	nop
 8000e5c:	3714      	adds	r7, #20
 8000e5e:	46bd      	mov	sp, r7
 8000e60:	bc80      	pop	{r7}
 8000e62:	4770      	bx	lr
 8000e64:	40021000 	.word	0x40021000
 8000e68:	40010000 	.word	0x40010000

08000e6c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000e6c:	b580      	push	{r7, lr}
 8000e6e:	b088      	sub	sp, #32
 8000e70:	af00      	add	r7, sp, #0
 8000e72:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e74:	f107 0310 	add.w	r3, r7, #16
 8000e78:	2200      	movs	r2, #0
 8000e7a:	601a      	str	r2, [r3, #0]
 8000e7c:	605a      	str	r2, [r3, #4]
 8000e7e:	609a      	str	r2, [r3, #8]
 8000e80:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	681b      	ldr	r3, [r3, #0]
 8000e86:	4a14      	ldr	r2, [pc, #80]	; (8000ed8 <HAL_ADC_MspInit+0x6c>)
 8000e88:	4293      	cmp	r3, r2
 8000e8a:	d121      	bne.n	8000ed0 <HAL_ADC_MspInit+0x64>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000e8c:	4b13      	ldr	r3, [pc, #76]	; (8000edc <HAL_ADC_MspInit+0x70>)
 8000e8e:	699b      	ldr	r3, [r3, #24]
 8000e90:	4a12      	ldr	r2, [pc, #72]	; (8000edc <HAL_ADC_MspInit+0x70>)
 8000e92:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000e96:	6193      	str	r3, [r2, #24]
 8000e98:	4b10      	ldr	r3, [pc, #64]	; (8000edc <HAL_ADC_MspInit+0x70>)
 8000e9a:	699b      	ldr	r3, [r3, #24]
 8000e9c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000ea0:	60fb      	str	r3, [r7, #12]
 8000ea2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ea4:	4b0d      	ldr	r3, [pc, #52]	; (8000edc <HAL_ADC_MspInit+0x70>)
 8000ea6:	699b      	ldr	r3, [r3, #24]
 8000ea8:	4a0c      	ldr	r2, [pc, #48]	; (8000edc <HAL_ADC_MspInit+0x70>)
 8000eaa:	f043 0304 	orr.w	r3, r3, #4
 8000eae:	6193      	str	r3, [r2, #24]
 8000eb0:	4b0a      	ldr	r3, [pc, #40]	; (8000edc <HAL_ADC_MspInit+0x70>)
 8000eb2:	699b      	ldr	r3, [r3, #24]
 8000eb4:	f003 0304 	and.w	r3, r3, #4
 8000eb8:	60bb      	str	r3, [r7, #8]
 8000eba:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000ebc:	2302      	movs	r3, #2
 8000ebe:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000ec0:	2303      	movs	r3, #3
 8000ec2:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ec4:	f107 0310 	add.w	r3, r7, #16
 8000ec8:	4619      	mov	r1, r3
 8000eca:	4805      	ldr	r0, [pc, #20]	; (8000ee0 <HAL_ADC_MspInit+0x74>)
 8000ecc:	f000 fe7e 	bl	8001bcc <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000ed0:	bf00      	nop
 8000ed2:	3720      	adds	r7, #32
 8000ed4:	46bd      	mov	sp, r7
 8000ed6:	bd80      	pop	{r7, pc}
 8000ed8:	40012400 	.word	0x40012400
 8000edc:	40021000 	.word	0x40021000
 8000ee0:	40010800 	.word	0x40010800

08000ee4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000ee4:	b580      	push	{r7, lr}
 8000ee6:	b088      	sub	sp, #32
 8000ee8:	af00      	add	r7, sp, #0
 8000eea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000eec:	f107 0310 	add.w	r3, r7, #16
 8000ef0:	2200      	movs	r2, #0
 8000ef2:	601a      	str	r2, [r3, #0]
 8000ef4:	605a      	str	r2, [r3, #4]
 8000ef6:	609a      	str	r2, [r3, #8]
 8000ef8:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	681b      	ldr	r3, [r3, #0]
 8000efe:	4a15      	ldr	r2, [pc, #84]	; (8000f54 <HAL_UART_MspInit+0x70>)
 8000f00:	4293      	cmp	r3, r2
 8000f02:	d123      	bne.n	8000f4c <HAL_UART_MspInit+0x68>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000f04:	4b14      	ldr	r3, [pc, #80]	; (8000f58 <HAL_UART_MspInit+0x74>)
 8000f06:	69db      	ldr	r3, [r3, #28]
 8000f08:	4a13      	ldr	r2, [pc, #76]	; (8000f58 <HAL_UART_MspInit+0x74>)
 8000f0a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f0e:	61d3      	str	r3, [r2, #28]
 8000f10:	4b11      	ldr	r3, [pc, #68]	; (8000f58 <HAL_UART_MspInit+0x74>)
 8000f12:	69db      	ldr	r3, [r3, #28]
 8000f14:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f18:	60fb      	str	r3, [r7, #12]
 8000f1a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f1c:	4b0e      	ldr	r3, [pc, #56]	; (8000f58 <HAL_UART_MspInit+0x74>)
 8000f1e:	699b      	ldr	r3, [r3, #24]
 8000f20:	4a0d      	ldr	r2, [pc, #52]	; (8000f58 <HAL_UART_MspInit+0x74>)
 8000f22:	f043 0304 	orr.w	r3, r3, #4
 8000f26:	6193      	str	r3, [r2, #24]
 8000f28:	4b0b      	ldr	r3, [pc, #44]	; (8000f58 <HAL_UART_MspInit+0x74>)
 8000f2a:	699b      	ldr	r3, [r3, #24]
 8000f2c:	f003 0304 	and.w	r3, r3, #4
 8000f30:	60bb      	str	r3, [r7, #8]
 8000f32:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000f34:	230c      	movs	r3, #12
 8000f36:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f38:	2302      	movs	r3, #2
 8000f3a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f3c:	2302      	movs	r3, #2
 8000f3e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f40:	f107 0310 	add.w	r3, r7, #16
 8000f44:	4619      	mov	r1, r3
 8000f46:	4805      	ldr	r0, [pc, #20]	; (8000f5c <HAL_UART_MspInit+0x78>)
 8000f48:	f000 fe40 	bl	8001bcc <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000f4c:	bf00      	nop
 8000f4e:	3720      	adds	r7, #32
 8000f50:	46bd      	mov	sp, r7
 8000f52:	bd80      	pop	{r7, pc}
 8000f54:	40004400 	.word	0x40004400
 8000f58:	40021000 	.word	0x40021000
 8000f5c:	40010800 	.word	0x40010800

08000f60 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f60:	b480      	push	{r7}
 8000f62:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000f64:	bf00      	nop
 8000f66:	46bd      	mov	sp, r7
 8000f68:	bc80      	pop	{r7}
 8000f6a:	4770      	bx	lr

08000f6c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f6c:	b480      	push	{r7}
 8000f6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f70:	e7fe      	b.n	8000f70 <HardFault_Handler+0x4>

08000f72 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f72:	b480      	push	{r7}
 8000f74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f76:	e7fe      	b.n	8000f76 <MemManage_Handler+0x4>

08000f78 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f78:	b480      	push	{r7}
 8000f7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f7c:	e7fe      	b.n	8000f7c <BusFault_Handler+0x4>

08000f7e <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f7e:	b480      	push	{r7}
 8000f80:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f82:	e7fe      	b.n	8000f82 <UsageFault_Handler+0x4>

08000f84 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000f84:	b480      	push	{r7}
 8000f86:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000f88:	bf00      	nop
 8000f8a:	46bd      	mov	sp, r7
 8000f8c:	bc80      	pop	{r7}
 8000f8e:	4770      	bx	lr

08000f90 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f90:	b480      	push	{r7}
 8000f92:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f94:	bf00      	nop
 8000f96:	46bd      	mov	sp, r7
 8000f98:	bc80      	pop	{r7}
 8000f9a:	4770      	bx	lr

08000f9c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000f9c:	b480      	push	{r7}
 8000f9e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000fa0:	bf00      	nop
 8000fa2:	46bd      	mov	sp, r7
 8000fa4:	bc80      	pop	{r7}
 8000fa6:	4770      	bx	lr

08000fa8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000fac:	f000 f8b2 	bl	8001114 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000fb0:	bf00      	nop
 8000fb2:	bd80      	pop	{r7, pc}

08000fb4 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000fb4:	b580      	push	{r7, lr}
 8000fb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8000fb8:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000fbc:	f000 ff78 	bl	8001eb0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000fc0:	bf00      	nop
 8000fc2:	bd80      	pop	{r7, pc}

08000fc4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	b086      	sub	sp, #24
 8000fc8:	af00      	add	r7, sp, #0
 8000fca:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000fcc:	4a14      	ldr	r2, [pc, #80]	; (8001020 <_sbrk+0x5c>)
 8000fce:	4b15      	ldr	r3, [pc, #84]	; (8001024 <_sbrk+0x60>)
 8000fd0:	1ad3      	subs	r3, r2, r3
 8000fd2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000fd4:	697b      	ldr	r3, [r7, #20]
 8000fd6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000fd8:	4b13      	ldr	r3, [pc, #76]	; (8001028 <_sbrk+0x64>)
 8000fda:	681b      	ldr	r3, [r3, #0]
 8000fdc:	2b00      	cmp	r3, #0
 8000fde:	d102      	bne.n	8000fe6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000fe0:	4b11      	ldr	r3, [pc, #68]	; (8001028 <_sbrk+0x64>)
 8000fe2:	4a12      	ldr	r2, [pc, #72]	; (800102c <_sbrk+0x68>)
 8000fe4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000fe6:	4b10      	ldr	r3, [pc, #64]	; (8001028 <_sbrk+0x64>)
 8000fe8:	681a      	ldr	r2, [r3, #0]
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	4413      	add	r3, r2
 8000fee:	693a      	ldr	r2, [r7, #16]
 8000ff0:	429a      	cmp	r2, r3
 8000ff2:	d207      	bcs.n	8001004 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000ff4:	f001 fec4 	bl	8002d80 <__errno>
 8000ff8:	4602      	mov	r2, r0
 8000ffa:	230c      	movs	r3, #12
 8000ffc:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8000ffe:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001002:	e009      	b.n	8001018 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001004:	4b08      	ldr	r3, [pc, #32]	; (8001028 <_sbrk+0x64>)
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800100a:	4b07      	ldr	r3, [pc, #28]	; (8001028 <_sbrk+0x64>)
 800100c:	681a      	ldr	r2, [r3, #0]
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	4413      	add	r3, r2
 8001012:	4a05      	ldr	r2, [pc, #20]	; (8001028 <_sbrk+0x64>)
 8001014:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001016:	68fb      	ldr	r3, [r7, #12]
}
 8001018:	4618      	mov	r0, r3
 800101a:	3718      	adds	r7, #24
 800101c:	46bd      	mov	sp, r7
 800101e:	bd80      	pop	{r7, pc}
 8001020:	20005000 	.word	0x20005000
 8001024:	00000400 	.word	0x00000400
 8001028:	20000224 	.word	0x20000224
 800102c:	200002a8 	.word	0x200002a8

08001030 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001030:	b480      	push	{r7}
 8001032:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001034:	bf00      	nop
 8001036:	46bd      	mov	sp, r7
 8001038:	bc80      	pop	{r7}
 800103a:	4770      	bx	lr

0800103c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 800103c:	2100      	movs	r1, #0
  b LoopCopyDataInit
 800103e:	e003      	b.n	8001048 <LoopCopyDataInit>

08001040 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8001040:	4b0b      	ldr	r3, [pc, #44]	; (8001070 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8001042:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8001044:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8001046:	3104      	adds	r1, #4

08001048 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8001048:	480a      	ldr	r0, [pc, #40]	; (8001074 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 800104a:	4b0b      	ldr	r3, [pc, #44]	; (8001078 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 800104c:	1842      	adds	r2, r0, r1
  cmp r2, r3
 800104e:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8001050:	d3f6      	bcc.n	8001040 <CopyDataInit>
  ldr r2, =_sbss
 8001052:	4a0a      	ldr	r2, [pc, #40]	; (800107c <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8001054:	e002      	b.n	800105c <LoopFillZerobss>

08001056 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8001056:	2300      	movs	r3, #0
  str r3, [r2], #4
 8001058:	f842 3b04 	str.w	r3, [r2], #4

0800105c <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 800105c:	4b08      	ldr	r3, [pc, #32]	; (8001080 <LoopFillZerobss+0x24>)
  cmp r2, r3
 800105e:	429a      	cmp	r2, r3
  bcc FillZerobss
 8001060:	d3f9      	bcc.n	8001056 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001062:	f7ff ffe5 	bl	8001030 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001066:	f001 fe91 	bl	8002d8c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800106a:	f7ff fd0d 	bl	8000a88 <main>
  bx lr
 800106e:	4770      	bx	lr
  ldr r3, =_sidata
 8001070:	08005128 	.word	0x08005128
  ldr r0, =_sdata
 8001074:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8001078:	200001e4 	.word	0x200001e4
  ldr r2, =_sbss
 800107c:	200001e8 	.word	0x200001e8
  ldr r3, = _ebss
 8001080:	200002a8 	.word	0x200002a8

08001084 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001084:	e7fe      	b.n	8001084 <ADC1_2_IRQHandler>
	...

08001088 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001088:	b580      	push	{r7, lr}
 800108a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800108c:	4b08      	ldr	r3, [pc, #32]	; (80010b0 <HAL_Init+0x28>)
 800108e:	681b      	ldr	r3, [r3, #0]
 8001090:	4a07      	ldr	r2, [pc, #28]	; (80010b0 <HAL_Init+0x28>)
 8001092:	f043 0310 	orr.w	r3, r3, #16
 8001096:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001098:	2003      	movs	r0, #3
 800109a:	f000 fd55 	bl	8001b48 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800109e:	2000      	movs	r0, #0
 80010a0:	f000 f808 	bl	80010b4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80010a4:	f7ff feb0 	bl	8000e08 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80010a8:	2300      	movs	r3, #0
}
 80010aa:	4618      	mov	r0, r3
 80010ac:	bd80      	pop	{r7, pc}
 80010ae:	bf00      	nop
 80010b0:	40022000 	.word	0x40022000

080010b4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80010b4:	b580      	push	{r7, lr}
 80010b6:	b082      	sub	sp, #8
 80010b8:	af00      	add	r7, sp, #0
 80010ba:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80010bc:	4b12      	ldr	r3, [pc, #72]	; (8001108 <HAL_InitTick+0x54>)
 80010be:	681a      	ldr	r2, [r3, #0]
 80010c0:	4b12      	ldr	r3, [pc, #72]	; (800110c <HAL_InitTick+0x58>)
 80010c2:	781b      	ldrb	r3, [r3, #0]
 80010c4:	4619      	mov	r1, r3
 80010c6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80010ca:	fbb3 f3f1 	udiv	r3, r3, r1
 80010ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80010d2:	4618      	mov	r0, r3
 80010d4:	f000 fd6d 	bl	8001bb2 <HAL_SYSTICK_Config>
 80010d8:	4603      	mov	r3, r0
 80010da:	2b00      	cmp	r3, #0
 80010dc:	d001      	beq.n	80010e2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80010de:	2301      	movs	r3, #1
 80010e0:	e00e      	b.n	8001100 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	2b0f      	cmp	r3, #15
 80010e6:	d80a      	bhi.n	80010fe <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80010e8:	2200      	movs	r2, #0
 80010ea:	6879      	ldr	r1, [r7, #4]
 80010ec:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80010f0:	f000 fd35 	bl	8001b5e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80010f4:	4a06      	ldr	r2, [pc, #24]	; (8001110 <HAL_InitTick+0x5c>)
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80010fa:	2300      	movs	r3, #0
 80010fc:	e000      	b.n	8001100 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80010fe:	2301      	movs	r3, #1
}
 8001100:	4618      	mov	r0, r3
 8001102:	3708      	adds	r7, #8
 8001104:	46bd      	mov	sp, r7
 8001106:	bd80      	pop	{r7, pc}
 8001108:	20000008 	.word	0x20000008
 800110c:	20000010 	.word	0x20000010
 8001110:	2000000c 	.word	0x2000000c

08001114 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001114:	b480      	push	{r7}
 8001116:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001118:	4b05      	ldr	r3, [pc, #20]	; (8001130 <HAL_IncTick+0x1c>)
 800111a:	781b      	ldrb	r3, [r3, #0]
 800111c:	461a      	mov	r2, r3
 800111e:	4b05      	ldr	r3, [pc, #20]	; (8001134 <HAL_IncTick+0x20>)
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	4413      	add	r3, r2
 8001124:	4a03      	ldr	r2, [pc, #12]	; (8001134 <HAL_IncTick+0x20>)
 8001126:	6013      	str	r3, [r2, #0]
}
 8001128:	bf00      	nop
 800112a:	46bd      	mov	sp, r7
 800112c:	bc80      	pop	{r7}
 800112e:	4770      	bx	lr
 8001130:	20000010 	.word	0x20000010
 8001134:	200002a0 	.word	0x200002a0

08001138 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001138:	b480      	push	{r7}
 800113a:	af00      	add	r7, sp, #0
  return uwTick;
 800113c:	4b02      	ldr	r3, [pc, #8]	; (8001148 <HAL_GetTick+0x10>)
 800113e:	681b      	ldr	r3, [r3, #0]
}
 8001140:	4618      	mov	r0, r3
 8001142:	46bd      	mov	sp, r7
 8001144:	bc80      	pop	{r7}
 8001146:	4770      	bx	lr
 8001148:	200002a0 	.word	0x200002a0

0800114c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800114c:	b580      	push	{r7, lr}
 800114e:	b084      	sub	sp, #16
 8001150:	af00      	add	r7, sp, #0
 8001152:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001154:	f7ff fff0 	bl	8001138 <HAL_GetTick>
 8001158:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800115e:	68fb      	ldr	r3, [r7, #12]
 8001160:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001164:	d005      	beq.n	8001172 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001166:	4b09      	ldr	r3, [pc, #36]	; (800118c <HAL_Delay+0x40>)
 8001168:	781b      	ldrb	r3, [r3, #0]
 800116a:	461a      	mov	r2, r3
 800116c:	68fb      	ldr	r3, [r7, #12]
 800116e:	4413      	add	r3, r2
 8001170:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001172:	bf00      	nop
 8001174:	f7ff ffe0 	bl	8001138 <HAL_GetTick>
 8001178:	4602      	mov	r2, r0
 800117a:	68bb      	ldr	r3, [r7, #8]
 800117c:	1ad3      	subs	r3, r2, r3
 800117e:	68fa      	ldr	r2, [r7, #12]
 8001180:	429a      	cmp	r2, r3
 8001182:	d8f7      	bhi.n	8001174 <HAL_Delay+0x28>
  {
  }
}
 8001184:	bf00      	nop
 8001186:	3710      	adds	r7, #16
 8001188:	46bd      	mov	sp, r7
 800118a:	bd80      	pop	{r7, pc}
 800118c:	20000010 	.word	0x20000010

08001190 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001190:	b580      	push	{r7, lr}
 8001192:	b086      	sub	sp, #24
 8001194:	af00      	add	r7, sp, #0
 8001196:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001198:	2300      	movs	r3, #0
 800119a:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 800119c:	2300      	movs	r3, #0
 800119e:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 80011a0:	2300      	movs	r3, #0
 80011a2:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 80011a4:	2300      	movs	r3, #0
 80011a6:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d101      	bne.n	80011b2 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 80011ae:	2301      	movs	r3, #1
 80011b0:	e0be      	b.n	8001330 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	689b      	ldr	r3, [r3, #8]
 80011b6:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80011bc:	2b00      	cmp	r3, #0
 80011be:	d109      	bne.n	80011d4 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	2200      	movs	r2, #0
 80011c4:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	2200      	movs	r2, #0
 80011ca:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80011ce:	6878      	ldr	r0, [r7, #4]
 80011d0:	f7ff fe4c 	bl	8000e6c <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 80011d4:	6878      	ldr	r0, [r7, #4]
 80011d6:	f000 fbb1 	bl	800193c <ADC_ConversionStop_Disable>
 80011da:	4603      	mov	r3, r0
 80011dc:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80011e2:	f003 0310 	and.w	r3, r3, #16
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	f040 8099 	bne.w	800131e <HAL_ADC_Init+0x18e>
 80011ec:	7dfb      	ldrb	r3, [r7, #23]
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	f040 8095 	bne.w	800131e <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80011f8:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80011fc:	f023 0302 	bic.w	r3, r3, #2
 8001200:	f043 0202 	orr.w	r2, r3, #2
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001210:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	7b1b      	ldrb	r3, [r3, #12]
 8001216:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001218:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800121a:	68ba      	ldr	r2, [r7, #8]
 800121c:	4313      	orrs	r3, r2
 800121e:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	689b      	ldr	r3, [r3, #8]
 8001224:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001228:	d003      	beq.n	8001232 <HAL_ADC_Init+0xa2>
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	689b      	ldr	r3, [r3, #8]
 800122e:	2b01      	cmp	r3, #1
 8001230:	d102      	bne.n	8001238 <HAL_ADC_Init+0xa8>
 8001232:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001236:	e000      	b.n	800123a <HAL_ADC_Init+0xaa>
 8001238:	2300      	movs	r3, #0
 800123a:	693a      	ldr	r2, [r7, #16]
 800123c:	4313      	orrs	r3, r2
 800123e:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	7d1b      	ldrb	r3, [r3, #20]
 8001244:	2b01      	cmp	r3, #1
 8001246:	d119      	bne.n	800127c <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	7b1b      	ldrb	r3, [r3, #12]
 800124c:	2b00      	cmp	r3, #0
 800124e:	d109      	bne.n	8001264 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	699b      	ldr	r3, [r3, #24]
 8001254:	3b01      	subs	r3, #1
 8001256:	035a      	lsls	r2, r3, #13
 8001258:	693b      	ldr	r3, [r7, #16]
 800125a:	4313      	orrs	r3, r2
 800125c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001260:	613b      	str	r3, [r7, #16]
 8001262:	e00b      	b.n	800127c <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001268:	f043 0220 	orr.w	r2, r3, #32
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001274:	f043 0201 	orr.w	r2, r3, #1
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	685b      	ldr	r3, [r3, #4]
 8001282:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	693a      	ldr	r2, [r7, #16]
 800128c:	430a      	orrs	r2, r1
 800128e:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	689a      	ldr	r2, [r3, #8]
 8001296:	4b28      	ldr	r3, [pc, #160]	; (8001338 <HAL_ADC_Init+0x1a8>)
 8001298:	4013      	ands	r3, r2
 800129a:	687a      	ldr	r2, [r7, #4]
 800129c:	6812      	ldr	r2, [r2, #0]
 800129e:	68b9      	ldr	r1, [r7, #8]
 80012a0:	430b      	orrs	r3, r1
 80012a2:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	689b      	ldr	r3, [r3, #8]
 80012a8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80012ac:	d003      	beq.n	80012b6 <HAL_ADC_Init+0x126>
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	689b      	ldr	r3, [r3, #8]
 80012b2:	2b01      	cmp	r3, #1
 80012b4:	d104      	bne.n	80012c0 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	691b      	ldr	r3, [r3, #16]
 80012ba:	3b01      	subs	r3, #1
 80012bc:	051b      	lsls	r3, r3, #20
 80012be:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80012c6:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	68fa      	ldr	r2, [r7, #12]
 80012d0:	430a      	orrs	r2, r1
 80012d2:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	689a      	ldr	r2, [r3, #8]
 80012da:	4b18      	ldr	r3, [pc, #96]	; (800133c <HAL_ADC_Init+0x1ac>)
 80012dc:	4013      	ands	r3, r2
 80012de:	68ba      	ldr	r2, [r7, #8]
 80012e0:	429a      	cmp	r2, r3
 80012e2:	d10b      	bne.n	80012fc <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	2200      	movs	r2, #0
 80012e8:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80012ee:	f023 0303 	bic.w	r3, r3, #3
 80012f2:	f043 0201 	orr.w	r2, r3, #1
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80012fa:	e018      	b.n	800132e <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001300:	f023 0312 	bic.w	r3, r3, #18
 8001304:	f043 0210 	orr.w	r2, r3, #16
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001310:	f043 0201 	orr.w	r2, r3, #1
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8001318:	2301      	movs	r3, #1
 800131a:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800131c:	e007      	b.n	800132e <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001322:	f043 0210 	orr.w	r2, r3, #16
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 800132a:	2301      	movs	r3, #1
 800132c:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 800132e:	7dfb      	ldrb	r3, [r7, #23]
}
 8001330:	4618      	mov	r0, r3
 8001332:	3718      	adds	r7, #24
 8001334:	46bd      	mov	sp, r7
 8001336:	bd80      	pop	{r7, pc}
 8001338:	ffe1f7fd 	.word	0xffe1f7fd
 800133c:	ff1f0efe 	.word	0xff1f0efe

08001340 <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8001340:	b580      	push	{r7, lr}
 8001342:	b084      	sub	sp, #16
 8001344:	af00      	add	r7, sp, #0
 8001346:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001348:	2300      	movs	r3, #0
 800134a:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001352:	2b01      	cmp	r3, #1
 8001354:	d101      	bne.n	800135a <HAL_ADC_Start+0x1a>
 8001356:	2302      	movs	r3, #2
 8001358:	e098      	b.n	800148c <HAL_ADC_Start+0x14c>
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	2201      	movs	r2, #1
 800135e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 8001362:	6878      	ldr	r0, [r7, #4]
 8001364:	f000 fa98 	bl	8001898 <ADC_Enable>
 8001368:	4603      	mov	r3, r0
 800136a:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 800136c:	7bfb      	ldrb	r3, [r7, #15]
 800136e:	2b00      	cmp	r3, #0
 8001370:	f040 8087 	bne.w	8001482 <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001378:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800137c:	f023 0301 	bic.w	r3, r3, #1
 8001380:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	4a41      	ldr	r2, [pc, #260]	; (8001494 <HAL_ADC_Start+0x154>)
 800138e:	4293      	cmp	r3, r2
 8001390:	d105      	bne.n	800139e <HAL_ADC_Start+0x5e>
 8001392:	4b41      	ldr	r3, [pc, #260]	; (8001498 <HAL_ADC_Start+0x158>)
 8001394:	685b      	ldr	r3, [r3, #4]
 8001396:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 800139a:	2b00      	cmp	r3, #0
 800139c:	d115      	bne.n	80013ca <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80013a2:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	685b      	ldr	r3, [r3, #4]
 80013b0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80013b4:	2b00      	cmp	r3, #0
 80013b6:	d026      	beq.n	8001406 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80013bc:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80013c0:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80013c8:	e01d      	b.n	8001406 <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80013ce:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	4a2f      	ldr	r2, [pc, #188]	; (8001498 <HAL_ADC_Start+0x158>)
 80013dc:	4293      	cmp	r3, r2
 80013de:	d004      	beq.n	80013ea <HAL_ADC_Start+0xaa>
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	4a2b      	ldr	r2, [pc, #172]	; (8001494 <HAL_ADC_Start+0x154>)
 80013e6:	4293      	cmp	r3, r2
 80013e8:	d10d      	bne.n	8001406 <HAL_ADC_Start+0xc6>
 80013ea:	4b2b      	ldr	r3, [pc, #172]	; (8001498 <HAL_ADC_Start+0x158>)
 80013ec:	685b      	ldr	r3, [r3, #4]
 80013ee:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	d007      	beq.n	8001406 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80013fa:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80013fe:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800140a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800140e:	2b00      	cmp	r3, #0
 8001410:	d006      	beq.n	8001420 <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001416:	f023 0206 	bic.w	r2, r3, #6
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	62da      	str	r2, [r3, #44]	; 0x2c
 800141e:	e002      	b.n	8001426 <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	2200      	movs	r2, #0
 8001424:	62da      	str	r2, [r3, #44]	; 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	2200      	movs	r2, #0
 800142a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	f06f 0202 	mvn.w	r2, #2
 8001436:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	689b      	ldr	r3, [r3, #8]
 800143e:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8001442:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8001446:	d113      	bne.n	8001470 <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 800144c:	4a11      	ldr	r2, [pc, #68]	; (8001494 <HAL_ADC_Start+0x154>)
 800144e:	4293      	cmp	r3, r2
 8001450:	d105      	bne.n	800145e <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8001452:	4b11      	ldr	r3, [pc, #68]	; (8001498 <HAL_ADC_Start+0x158>)
 8001454:	685b      	ldr	r3, [r3, #4]
 8001456:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 800145a:	2b00      	cmp	r3, #0
 800145c:	d108      	bne.n	8001470 <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	689a      	ldr	r2, [r3, #8]
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 800146c:	609a      	str	r2, [r3, #8]
 800146e:	e00c      	b.n	800148a <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	689a      	ldr	r2, [r3, #8]
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800147e:	609a      	str	r2, [r3, #8]
 8001480:	e003      	b.n	800148a <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	2200      	movs	r2, #0
 8001486:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 800148a:	7bfb      	ldrb	r3, [r7, #15]
}
 800148c:	4618      	mov	r0, r3
 800148e:	3710      	adds	r7, #16
 8001490:	46bd      	mov	sp, r7
 8001492:	bd80      	pop	{r7, pc}
 8001494:	40012800 	.word	0x40012800
 8001498:	40012400 	.word	0x40012400

0800149c <HAL_ADC_PollForConversion>:
  * @param  hadc: ADC handle
  * @param  Timeout: Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 800149c:	b590      	push	{r4, r7, lr}
 800149e:	b087      	sub	sp, #28
 80014a0:	af00      	add	r7, sp, #0
 80014a2:	6078      	str	r0, [r7, #4]
 80014a4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80014a6:	2300      	movs	r3, #0
 80014a8:	617b      	str	r3, [r7, #20]
  
  /* Variables for polling in case of scan mode enabled and polling for each  */
  /* conversion.                                                              */
  __IO uint32_t Conversion_Timeout_CPU_cycles = 0U;
 80014aa:	2300      	movs	r3, #0
 80014ac:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles_max = 0U;
 80014ae:	2300      	movs	r3, #0
 80014b0:	613b      	str	r3, [r7, #16]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 80014b2:	f7ff fe41 	bl	8001138 <HAL_GetTick>
 80014b6:	6178      	str	r0, [r7, #20]
  
  /* Verification that ADC configuration is compliant with polling for        */
  /* each conversion:                                                         */
  /* Particular case is ADC configured in DMA mode                            */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	689b      	ldr	r3, [r3, #8]
 80014be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d00b      	beq.n	80014de <HAL_ADC_PollForConversion+0x42>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014ca:	f043 0220 	orr.w	r2, r3, #32
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	2200      	movs	r2, #0
 80014d6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    return HAL_ERROR;
 80014da:	2301      	movs	r3, #1
 80014dc:	e0c8      	b.n	8001670 <HAL_ADC_PollForConversion+0x1d4>
  /*    from ADC conversion time (selected sampling time + conversion time of */
  /*    12.5 ADC clock cycles) and APB2/ADC clock prescalers (depending on    */
  /*    settings, conversion time range can be from 28 to 32256 CPU cycles).  */
  /*    As flag EOC is not set after each conversion, no timeout status can   */
  /*    be set.                                                               */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	685b      	ldr	r3, [r3, #4]
 80014e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	d12a      	bne.n	8001542 <HAL_ADC_PollForConversion+0xa6>
      HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L)    )
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014f2:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d123      	bne.n	8001542 <HAL_ADC_PollForConversion+0xa6>
  {
    /* Wait until End of Conversion flag is raised */
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 80014fa:	e01a      	b.n	8001532 <HAL_ADC_PollForConversion+0x96>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 80014fc:	683b      	ldr	r3, [r7, #0]
 80014fe:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001502:	d016      	beq.n	8001532 <HAL_ADC_PollForConversion+0x96>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8001504:	683b      	ldr	r3, [r7, #0]
 8001506:	2b00      	cmp	r3, #0
 8001508:	d007      	beq.n	800151a <HAL_ADC_PollForConversion+0x7e>
 800150a:	f7ff fe15 	bl	8001138 <HAL_GetTick>
 800150e:	4602      	mov	r2, r0
 8001510:	697b      	ldr	r3, [r7, #20]
 8001512:	1ad3      	subs	r3, r2, r3
 8001514:	683a      	ldr	r2, [r7, #0]
 8001516:	429a      	cmp	r2, r3
 8001518:	d20b      	bcs.n	8001532 <HAL_ADC_PollForConversion+0x96>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800151e:	f043 0204 	orr.w	r2, r3, #4
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	629a      	str	r2, [r3, #40]	; 0x28
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	2200      	movs	r2, #0
 800152a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          
          return HAL_TIMEOUT;
 800152e:	2303      	movs	r3, #3
 8001530:	e09e      	b.n	8001670 <HAL_ADC_PollForConversion+0x1d4>
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	f003 0302 	and.w	r3, r3, #2
 800153c:	2b00      	cmp	r3, #0
 800153e:	d0dd      	beq.n	80014fc <HAL_ADC_PollForConversion+0x60>
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8001540:	e06c      	b.n	800161c <HAL_ADC_PollForConversion+0x180>
    /* Replace polling by wait for maximum conversion time */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles   */
    /*    and ADC maximum conversion cycles on all channels.                  */
    /*  - Wait for the expected ADC clock cycles delay                        */
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
                                          / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 8001542:	4b4d      	ldr	r3, [pc, #308]	; (8001678 <HAL_ADC_PollForConversion+0x1dc>)
 8001544:	681c      	ldr	r4, [r3, #0]
 8001546:	2002      	movs	r0, #2
 8001548:	f001 f9a6 	bl	8002898 <HAL_RCCEx_GetPeriphCLKFreq>
 800154c:	4603      	mov	r3, r0
 800154e:	fbb4 f2f3 	udiv	r2, r4, r3
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	6919      	ldr	r1, [r3, #16]
 8001558:	4b48      	ldr	r3, [pc, #288]	; (800167c <HAL_ADC_PollForConversion+0x1e0>)
 800155a:	400b      	ands	r3, r1
 800155c:	2b00      	cmp	r3, #0
 800155e:	d118      	bne.n	8001592 <HAL_ADC_PollForConversion+0xf6>
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	68d9      	ldr	r1, [r3, #12]
 8001566:	4b46      	ldr	r3, [pc, #280]	; (8001680 <HAL_ADC_PollForConversion+0x1e4>)
 8001568:	400b      	ands	r3, r1
 800156a:	2b00      	cmp	r3, #0
 800156c:	d111      	bne.n	8001592 <HAL_ADC_PollForConversion+0xf6>
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	6919      	ldr	r1, [r3, #16]
 8001574:	4b43      	ldr	r3, [pc, #268]	; (8001684 <HAL_ADC_PollForConversion+0x1e8>)
 8001576:	400b      	ands	r3, r1
 8001578:	2b00      	cmp	r3, #0
 800157a:	d108      	bne.n	800158e <HAL_ADC_PollForConversion+0xf2>
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	68d9      	ldr	r1, [r3, #12]
 8001582:	4b41      	ldr	r3, [pc, #260]	; (8001688 <HAL_ADC_PollForConversion+0x1ec>)
 8001584:	400b      	ands	r3, r1
 8001586:	2b00      	cmp	r3, #0
 8001588:	d101      	bne.n	800158e <HAL_ADC_PollForConversion+0xf2>
 800158a:	2314      	movs	r3, #20
 800158c:	e020      	b.n	80015d0 <HAL_ADC_PollForConversion+0x134>
 800158e:	2329      	movs	r3, #41	; 0x29
 8001590:	e01e      	b.n	80015d0 <HAL_ADC_PollForConversion+0x134>
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	6919      	ldr	r1, [r3, #16]
 8001598:	4b3a      	ldr	r3, [pc, #232]	; (8001684 <HAL_ADC_PollForConversion+0x1e8>)
 800159a:	400b      	ands	r3, r1
 800159c:	2b00      	cmp	r3, #0
 800159e:	d106      	bne.n	80015ae <HAL_ADC_PollForConversion+0x112>
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	68d9      	ldr	r1, [r3, #12]
 80015a6:	4b38      	ldr	r3, [pc, #224]	; (8001688 <HAL_ADC_PollForConversion+0x1ec>)
 80015a8:	400b      	ands	r3, r1
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	d00d      	beq.n	80015ca <HAL_ADC_PollForConversion+0x12e>
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	6919      	ldr	r1, [r3, #16]
 80015b4:	4b35      	ldr	r3, [pc, #212]	; (800168c <HAL_ADC_PollForConversion+0x1f0>)
 80015b6:	400b      	ands	r3, r1
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	d108      	bne.n	80015ce <HAL_ADC_PollForConversion+0x132>
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	68d9      	ldr	r1, [r3, #12]
 80015c2:	4b32      	ldr	r3, [pc, #200]	; (800168c <HAL_ADC_PollForConversion+0x1f0>)
 80015c4:	400b      	ands	r3, r1
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	d101      	bne.n	80015ce <HAL_ADC_PollForConversion+0x132>
 80015ca:	2354      	movs	r3, #84	; 0x54
 80015cc:	e000      	b.n	80015d0 <HAL_ADC_PollForConversion+0x134>
 80015ce:	23fc      	movs	r3, #252	; 0xfc
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
 80015d0:	fb02 f303 	mul.w	r3, r2, r3
 80015d4:	613b      	str	r3, [r7, #16]
    
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 80015d6:	e01d      	b.n	8001614 <HAL_ADC_PollForConversion+0x178>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 80015d8:	683b      	ldr	r3, [r7, #0]
 80015da:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80015de:	d016      	beq.n	800160e <HAL_ADC_PollForConversion+0x172>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 80015e0:	683b      	ldr	r3, [r7, #0]
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d007      	beq.n	80015f6 <HAL_ADC_PollForConversion+0x15a>
 80015e6:	f7ff fda7 	bl	8001138 <HAL_GetTick>
 80015ea:	4602      	mov	r2, r0
 80015ec:	697b      	ldr	r3, [r7, #20]
 80015ee:	1ad3      	subs	r3, r2, r3
 80015f0:	683a      	ldr	r2, [r7, #0]
 80015f2:	429a      	cmp	r2, r3
 80015f4:	d20b      	bcs.n	800160e <HAL_ADC_PollForConversion+0x172>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015fa:	f043 0204 	orr.w	r2, r3, #4
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	629a      	str	r2, [r3, #40]	; 0x28
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	2200      	movs	r2, #0
 8001606:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          
          return HAL_TIMEOUT;
 800160a:	2303      	movs	r3, #3
 800160c:	e030      	b.n	8001670 <HAL_ADC_PollForConversion+0x1d4>
        }
      }
      Conversion_Timeout_CPU_cycles ++;
 800160e:	68fb      	ldr	r3, [r7, #12]
 8001610:	3301      	adds	r3, #1
 8001612:	60fb      	str	r3, [r7, #12]
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8001614:	68fb      	ldr	r3, [r7, #12]
 8001616:	693a      	ldr	r2, [r7, #16]
 8001618:	429a      	cmp	r2, r3
 800161a:	d8dd      	bhi.n	80015d8 <HAL_ADC_PollForConversion+0x13c>
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	f06f 0212 	mvn.w	r2, #18
 8001624:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800162a:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	629a      	str	r2, [r3, #40]	; 0x28
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F1 devices, in case of sequencer enabled                   */
  /*       (several ranks selected), end of conversion flag is raised         */
  /*       at the end of the sequence.                                        */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	689b      	ldr	r3, [r3, #8]
 8001638:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 800163c:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8001640:	d115      	bne.n	800166e <HAL_ADC_PollForConversion+0x1d2>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	7b1b      	ldrb	r3, [r3, #12]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001646:	2b00      	cmp	r3, #0
 8001648:	d111      	bne.n	800166e <HAL_ADC_PollForConversion+0x1d2>
  {   
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800164e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	629a      	str	r2, [r3, #40]	; 0x28

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800165a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800165e:	2b00      	cmp	r3, #0
 8001660:	d105      	bne.n	800166e <HAL_ADC_PollForConversion+0x1d2>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001666:	f043 0201 	orr.w	r2, r3, #1
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	629a      	str	r2, [r3, #40]	; 0x28
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 800166e:	2300      	movs	r3, #0
}
 8001670:	4618      	mov	r0, r3
 8001672:	371c      	adds	r7, #28
 8001674:	46bd      	mov	sp, r7
 8001676:	bd90      	pop	{r4, r7, pc}
 8001678:	20000008 	.word	0x20000008
 800167c:	24924924 	.word	0x24924924
 8001680:	00924924 	.word	0x00924924
 8001684:	12492492 	.word	0x12492492
 8001688:	00492492 	.word	0x00492492
 800168c:	00249249 	.word	0x00249249

08001690 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8001690:	b480      	push	{r7}
 8001692:	b083      	sub	sp, #12
 8001694:	af00      	add	r7, sp, #0
 8001696:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 800169e:	4618      	mov	r0, r3
 80016a0:	370c      	adds	r7, #12
 80016a2:	46bd      	mov	sp, r7
 80016a4:	bc80      	pop	{r7}
 80016a6:	4770      	bx	lr

080016a8 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 80016a8:	b480      	push	{r7}
 80016aa:	b085      	sub	sp, #20
 80016ac:	af00      	add	r7, sp, #0
 80016ae:	6078      	str	r0, [r7, #4]
 80016b0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80016b2:	2300      	movs	r3, #0
 80016b4:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 80016b6:	2300      	movs	r3, #0
 80016b8:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80016c0:	2b01      	cmp	r3, #1
 80016c2:	d101      	bne.n	80016c8 <HAL_ADC_ConfigChannel+0x20>
 80016c4:	2302      	movs	r3, #2
 80016c6:	e0dc      	b.n	8001882 <HAL_ADC_ConfigChannel+0x1da>
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	2201      	movs	r2, #1
 80016cc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80016d0:	683b      	ldr	r3, [r7, #0]
 80016d2:	685b      	ldr	r3, [r3, #4]
 80016d4:	2b06      	cmp	r3, #6
 80016d6:	d81c      	bhi.n	8001712 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80016de:	683b      	ldr	r3, [r7, #0]
 80016e0:	685a      	ldr	r2, [r3, #4]
 80016e2:	4613      	mov	r3, r2
 80016e4:	009b      	lsls	r3, r3, #2
 80016e6:	4413      	add	r3, r2
 80016e8:	3b05      	subs	r3, #5
 80016ea:	221f      	movs	r2, #31
 80016ec:	fa02 f303 	lsl.w	r3, r2, r3
 80016f0:	43db      	mvns	r3, r3
 80016f2:	4019      	ands	r1, r3
 80016f4:	683b      	ldr	r3, [r7, #0]
 80016f6:	6818      	ldr	r0, [r3, #0]
 80016f8:	683b      	ldr	r3, [r7, #0]
 80016fa:	685a      	ldr	r2, [r3, #4]
 80016fc:	4613      	mov	r3, r2
 80016fe:	009b      	lsls	r3, r3, #2
 8001700:	4413      	add	r3, r2
 8001702:	3b05      	subs	r3, #5
 8001704:	fa00 f203 	lsl.w	r2, r0, r3
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	430a      	orrs	r2, r1
 800170e:	635a      	str	r2, [r3, #52]	; 0x34
 8001710:	e03c      	b.n	800178c <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001712:	683b      	ldr	r3, [r7, #0]
 8001714:	685b      	ldr	r3, [r3, #4]
 8001716:	2b0c      	cmp	r3, #12
 8001718:	d81c      	bhi.n	8001754 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001720:	683b      	ldr	r3, [r7, #0]
 8001722:	685a      	ldr	r2, [r3, #4]
 8001724:	4613      	mov	r3, r2
 8001726:	009b      	lsls	r3, r3, #2
 8001728:	4413      	add	r3, r2
 800172a:	3b23      	subs	r3, #35	; 0x23
 800172c:	221f      	movs	r2, #31
 800172e:	fa02 f303 	lsl.w	r3, r2, r3
 8001732:	43db      	mvns	r3, r3
 8001734:	4019      	ands	r1, r3
 8001736:	683b      	ldr	r3, [r7, #0]
 8001738:	6818      	ldr	r0, [r3, #0]
 800173a:	683b      	ldr	r3, [r7, #0]
 800173c:	685a      	ldr	r2, [r3, #4]
 800173e:	4613      	mov	r3, r2
 8001740:	009b      	lsls	r3, r3, #2
 8001742:	4413      	add	r3, r2
 8001744:	3b23      	subs	r3, #35	; 0x23
 8001746:	fa00 f203 	lsl.w	r2, r0, r3
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	430a      	orrs	r2, r1
 8001750:	631a      	str	r2, [r3, #48]	; 0x30
 8001752:	e01b      	b.n	800178c <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800175a:	683b      	ldr	r3, [r7, #0]
 800175c:	685a      	ldr	r2, [r3, #4]
 800175e:	4613      	mov	r3, r2
 8001760:	009b      	lsls	r3, r3, #2
 8001762:	4413      	add	r3, r2
 8001764:	3b41      	subs	r3, #65	; 0x41
 8001766:	221f      	movs	r2, #31
 8001768:	fa02 f303 	lsl.w	r3, r2, r3
 800176c:	43db      	mvns	r3, r3
 800176e:	4019      	ands	r1, r3
 8001770:	683b      	ldr	r3, [r7, #0]
 8001772:	6818      	ldr	r0, [r3, #0]
 8001774:	683b      	ldr	r3, [r7, #0]
 8001776:	685a      	ldr	r2, [r3, #4]
 8001778:	4613      	mov	r3, r2
 800177a:	009b      	lsls	r3, r3, #2
 800177c:	4413      	add	r3, r2
 800177e:	3b41      	subs	r3, #65	; 0x41
 8001780:	fa00 f203 	lsl.w	r2, r0, r3
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	430a      	orrs	r2, r1
 800178a:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 800178c:	683b      	ldr	r3, [r7, #0]
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	2b09      	cmp	r3, #9
 8001792:	d91c      	bls.n	80017ce <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	68d9      	ldr	r1, [r3, #12]
 800179a:	683b      	ldr	r3, [r7, #0]
 800179c:	681a      	ldr	r2, [r3, #0]
 800179e:	4613      	mov	r3, r2
 80017a0:	005b      	lsls	r3, r3, #1
 80017a2:	4413      	add	r3, r2
 80017a4:	3b1e      	subs	r3, #30
 80017a6:	2207      	movs	r2, #7
 80017a8:	fa02 f303 	lsl.w	r3, r2, r3
 80017ac:	43db      	mvns	r3, r3
 80017ae:	4019      	ands	r1, r3
 80017b0:	683b      	ldr	r3, [r7, #0]
 80017b2:	6898      	ldr	r0, [r3, #8]
 80017b4:	683b      	ldr	r3, [r7, #0]
 80017b6:	681a      	ldr	r2, [r3, #0]
 80017b8:	4613      	mov	r3, r2
 80017ba:	005b      	lsls	r3, r3, #1
 80017bc:	4413      	add	r3, r2
 80017be:	3b1e      	subs	r3, #30
 80017c0:	fa00 f203 	lsl.w	r2, r0, r3
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	430a      	orrs	r2, r1
 80017ca:	60da      	str	r2, [r3, #12]
 80017cc:	e019      	b.n	8001802 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	6919      	ldr	r1, [r3, #16]
 80017d4:	683b      	ldr	r3, [r7, #0]
 80017d6:	681a      	ldr	r2, [r3, #0]
 80017d8:	4613      	mov	r3, r2
 80017da:	005b      	lsls	r3, r3, #1
 80017dc:	4413      	add	r3, r2
 80017de:	2207      	movs	r2, #7
 80017e0:	fa02 f303 	lsl.w	r3, r2, r3
 80017e4:	43db      	mvns	r3, r3
 80017e6:	4019      	ands	r1, r3
 80017e8:	683b      	ldr	r3, [r7, #0]
 80017ea:	6898      	ldr	r0, [r3, #8]
 80017ec:	683b      	ldr	r3, [r7, #0]
 80017ee:	681a      	ldr	r2, [r3, #0]
 80017f0:	4613      	mov	r3, r2
 80017f2:	005b      	lsls	r3, r3, #1
 80017f4:	4413      	add	r3, r2
 80017f6:	fa00 f203 	lsl.w	r2, r0, r3
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	430a      	orrs	r2, r1
 8001800:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001802:	683b      	ldr	r3, [r7, #0]
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	2b10      	cmp	r3, #16
 8001808:	d003      	beq.n	8001812 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 800180a:	683b      	ldr	r3, [r7, #0]
 800180c:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800180e:	2b11      	cmp	r3, #17
 8001810:	d132      	bne.n	8001878 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	4a1d      	ldr	r2, [pc, #116]	; (800188c <HAL_ADC_ConfigChannel+0x1e4>)
 8001818:	4293      	cmp	r3, r2
 800181a:	d125      	bne.n	8001868 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	689b      	ldr	r3, [r3, #8]
 8001822:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001826:	2b00      	cmp	r3, #0
 8001828:	d126      	bne.n	8001878 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	689a      	ldr	r2, [r3, #8]
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8001838:	609a      	str	r2, [r3, #8]
        
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 800183a:	683b      	ldr	r3, [r7, #0]
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	2b10      	cmp	r3, #16
 8001840:	d11a      	bne.n	8001878 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001842:	4b13      	ldr	r3, [pc, #76]	; (8001890 <HAL_ADC_ConfigChannel+0x1e8>)
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	4a13      	ldr	r2, [pc, #76]	; (8001894 <HAL_ADC_ConfigChannel+0x1ec>)
 8001848:	fba2 2303 	umull	r2, r3, r2, r3
 800184c:	0c9a      	lsrs	r2, r3, #18
 800184e:	4613      	mov	r3, r2
 8001850:	009b      	lsls	r3, r3, #2
 8001852:	4413      	add	r3, r2
 8001854:	005b      	lsls	r3, r3, #1
 8001856:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001858:	e002      	b.n	8001860 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 800185a:	68bb      	ldr	r3, [r7, #8]
 800185c:	3b01      	subs	r3, #1
 800185e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001860:	68bb      	ldr	r3, [r7, #8]
 8001862:	2b00      	cmp	r3, #0
 8001864:	d1f9      	bne.n	800185a <HAL_ADC_ConfigChannel+0x1b2>
 8001866:	e007      	b.n	8001878 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800186c:	f043 0220 	orr.w	r2, r3, #32
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8001874:	2301      	movs	r3, #1
 8001876:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	2200      	movs	r2, #0
 800187c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8001880:	7bfb      	ldrb	r3, [r7, #15]
}
 8001882:	4618      	mov	r0, r3
 8001884:	3714      	adds	r7, #20
 8001886:	46bd      	mov	sp, r7
 8001888:	bc80      	pop	{r7}
 800188a:	4770      	bx	lr
 800188c:	40012400 	.word	0x40012400
 8001890:	20000008 	.word	0x20000008
 8001894:	431bde83 	.word	0x431bde83

08001898 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8001898:	b580      	push	{r7, lr}
 800189a:	b084      	sub	sp, #16
 800189c:	af00      	add	r7, sp, #0
 800189e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80018a0:	2300      	movs	r3, #0
 80018a2:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 80018a4:	2300      	movs	r3, #0
 80018a6:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	689b      	ldr	r3, [r3, #8]
 80018ae:	f003 0301 	and.w	r3, r3, #1
 80018b2:	2b01      	cmp	r3, #1
 80018b4:	d039      	beq.n	800192a <ADC_Enable+0x92>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	689a      	ldr	r2, [r3, #8]
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	f042 0201 	orr.w	r2, r2, #1
 80018c4:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80018c6:	4b1b      	ldr	r3, [pc, #108]	; (8001934 <ADC_Enable+0x9c>)
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	4a1b      	ldr	r2, [pc, #108]	; (8001938 <ADC_Enable+0xa0>)
 80018cc:	fba2 2303 	umull	r2, r3, r2, r3
 80018d0:	0c9b      	lsrs	r3, r3, #18
 80018d2:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80018d4:	e002      	b.n	80018dc <ADC_Enable+0x44>
    {
      wait_loop_index--;
 80018d6:	68bb      	ldr	r3, [r7, #8]
 80018d8:	3b01      	subs	r3, #1
 80018da:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80018dc:	68bb      	ldr	r3, [r7, #8]
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d1f9      	bne.n	80018d6 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 80018e2:	f7ff fc29 	bl	8001138 <HAL_GetTick>
 80018e6:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 80018e8:	e018      	b.n	800191c <ADC_Enable+0x84>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80018ea:	f7ff fc25 	bl	8001138 <HAL_GetTick>
 80018ee:	4602      	mov	r2, r0
 80018f0:	68fb      	ldr	r3, [r7, #12]
 80018f2:	1ad3      	subs	r3, r2, r3
 80018f4:	2b02      	cmp	r3, #2
 80018f6:	d911      	bls.n	800191c <ADC_Enable+0x84>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018fc:	f043 0210 	orr.w	r2, r3, #16
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	629a      	str	r2, [r3, #40]	; 0x28
      
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001908:	f043 0201 	orr.w	r2, r3, #1
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	62da      	str	r2, [r3, #44]	; 0x2c
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	2200      	movs	r2, #0
 8001914:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      
        return HAL_ERROR;
 8001918:	2301      	movs	r3, #1
 800191a:	e007      	b.n	800192c <ADC_Enable+0x94>
    while(ADC_IS_ENABLE(hadc) == RESET)
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	689b      	ldr	r3, [r3, #8]
 8001922:	f003 0301 	and.w	r3, r3, #1
 8001926:	2b01      	cmp	r3, #1
 8001928:	d1df      	bne.n	80018ea <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 800192a:	2300      	movs	r3, #0
}
 800192c:	4618      	mov	r0, r3
 800192e:	3710      	adds	r7, #16
 8001930:	46bd      	mov	sp, r7
 8001932:	bd80      	pop	{r7, pc}
 8001934:	20000008 	.word	0x20000008
 8001938:	431bde83 	.word	0x431bde83

0800193c <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 800193c:	b580      	push	{r7, lr}
 800193e:	b084      	sub	sp, #16
 8001940:	af00      	add	r7, sp, #0
 8001942:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001944:	2300      	movs	r3, #0
 8001946:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	689b      	ldr	r3, [r3, #8]
 800194e:	f003 0301 	and.w	r3, r3, #1
 8001952:	2b01      	cmp	r3, #1
 8001954:	d127      	bne.n	80019a6 <ADC_ConversionStop_Disable+0x6a>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	689a      	ldr	r2, [r3, #8]
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	f022 0201 	bic.w	r2, r2, #1
 8001964:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001966:	f7ff fbe7 	bl	8001138 <HAL_GetTick>
 800196a:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 800196c:	e014      	b.n	8001998 <ADC_ConversionStop_Disable+0x5c>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800196e:	f7ff fbe3 	bl	8001138 <HAL_GetTick>
 8001972:	4602      	mov	r2, r0
 8001974:	68fb      	ldr	r3, [r7, #12]
 8001976:	1ad3      	subs	r3, r2, r3
 8001978:	2b02      	cmp	r3, #2
 800197a:	d90d      	bls.n	8001998 <ADC_ConversionStop_Disable+0x5c>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001980:	f043 0210 	orr.w	r2, r3, #16
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800198c:	f043 0201 	orr.w	r2, r3, #1
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	62da      	str	r2, [r3, #44]	; 0x2c
        
        return HAL_ERROR;
 8001994:	2301      	movs	r3, #1
 8001996:	e007      	b.n	80019a8 <ADC_ConversionStop_Disable+0x6c>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	689b      	ldr	r3, [r3, #8]
 800199e:	f003 0301 	and.w	r3, r3, #1
 80019a2:	2b01      	cmp	r3, #1
 80019a4:	d0e3      	beq.n	800196e <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80019a6:	2300      	movs	r3, #0
}
 80019a8:	4618      	mov	r0, r3
 80019aa:	3710      	adds	r7, #16
 80019ac:	46bd      	mov	sp, r7
 80019ae:	bd80      	pop	{r7, pc}

080019b0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80019b0:	b480      	push	{r7}
 80019b2:	b085      	sub	sp, #20
 80019b4:	af00      	add	r7, sp, #0
 80019b6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	f003 0307 	and.w	r3, r3, #7
 80019be:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80019c0:	4b0c      	ldr	r3, [pc, #48]	; (80019f4 <__NVIC_SetPriorityGrouping+0x44>)
 80019c2:	68db      	ldr	r3, [r3, #12]
 80019c4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80019c6:	68ba      	ldr	r2, [r7, #8]
 80019c8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80019cc:	4013      	ands	r3, r2
 80019ce:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80019d0:	68fb      	ldr	r3, [r7, #12]
 80019d2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80019d4:	68bb      	ldr	r3, [r7, #8]
 80019d6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80019d8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80019dc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80019e0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80019e2:	4a04      	ldr	r2, [pc, #16]	; (80019f4 <__NVIC_SetPriorityGrouping+0x44>)
 80019e4:	68bb      	ldr	r3, [r7, #8]
 80019e6:	60d3      	str	r3, [r2, #12]
}
 80019e8:	bf00      	nop
 80019ea:	3714      	adds	r7, #20
 80019ec:	46bd      	mov	sp, r7
 80019ee:	bc80      	pop	{r7}
 80019f0:	4770      	bx	lr
 80019f2:	bf00      	nop
 80019f4:	e000ed00 	.word	0xe000ed00

080019f8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80019f8:	b480      	push	{r7}
 80019fa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80019fc:	4b04      	ldr	r3, [pc, #16]	; (8001a10 <__NVIC_GetPriorityGrouping+0x18>)
 80019fe:	68db      	ldr	r3, [r3, #12]
 8001a00:	0a1b      	lsrs	r3, r3, #8
 8001a02:	f003 0307 	and.w	r3, r3, #7
}
 8001a06:	4618      	mov	r0, r3
 8001a08:	46bd      	mov	sp, r7
 8001a0a:	bc80      	pop	{r7}
 8001a0c:	4770      	bx	lr
 8001a0e:	bf00      	nop
 8001a10:	e000ed00 	.word	0xe000ed00

08001a14 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a14:	b480      	push	{r7}
 8001a16:	b083      	sub	sp, #12
 8001a18:	af00      	add	r7, sp, #0
 8001a1a:	4603      	mov	r3, r0
 8001a1c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	db0b      	blt.n	8001a3e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001a26:	79fb      	ldrb	r3, [r7, #7]
 8001a28:	f003 021f 	and.w	r2, r3, #31
 8001a2c:	4906      	ldr	r1, [pc, #24]	; (8001a48 <__NVIC_EnableIRQ+0x34>)
 8001a2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a32:	095b      	lsrs	r3, r3, #5
 8001a34:	2001      	movs	r0, #1
 8001a36:	fa00 f202 	lsl.w	r2, r0, r2
 8001a3a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001a3e:	bf00      	nop
 8001a40:	370c      	adds	r7, #12
 8001a42:	46bd      	mov	sp, r7
 8001a44:	bc80      	pop	{r7}
 8001a46:	4770      	bx	lr
 8001a48:	e000e100 	.word	0xe000e100

08001a4c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001a4c:	b480      	push	{r7}
 8001a4e:	b083      	sub	sp, #12
 8001a50:	af00      	add	r7, sp, #0
 8001a52:	4603      	mov	r3, r0
 8001a54:	6039      	str	r1, [r7, #0]
 8001a56:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a58:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	db0a      	blt.n	8001a76 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a60:	683b      	ldr	r3, [r7, #0]
 8001a62:	b2da      	uxtb	r2, r3
 8001a64:	490c      	ldr	r1, [pc, #48]	; (8001a98 <__NVIC_SetPriority+0x4c>)
 8001a66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a6a:	0112      	lsls	r2, r2, #4
 8001a6c:	b2d2      	uxtb	r2, r2
 8001a6e:	440b      	add	r3, r1
 8001a70:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001a74:	e00a      	b.n	8001a8c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a76:	683b      	ldr	r3, [r7, #0]
 8001a78:	b2da      	uxtb	r2, r3
 8001a7a:	4908      	ldr	r1, [pc, #32]	; (8001a9c <__NVIC_SetPriority+0x50>)
 8001a7c:	79fb      	ldrb	r3, [r7, #7]
 8001a7e:	f003 030f 	and.w	r3, r3, #15
 8001a82:	3b04      	subs	r3, #4
 8001a84:	0112      	lsls	r2, r2, #4
 8001a86:	b2d2      	uxtb	r2, r2
 8001a88:	440b      	add	r3, r1
 8001a8a:	761a      	strb	r2, [r3, #24]
}
 8001a8c:	bf00      	nop
 8001a8e:	370c      	adds	r7, #12
 8001a90:	46bd      	mov	sp, r7
 8001a92:	bc80      	pop	{r7}
 8001a94:	4770      	bx	lr
 8001a96:	bf00      	nop
 8001a98:	e000e100 	.word	0xe000e100
 8001a9c:	e000ed00 	.word	0xe000ed00

08001aa0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001aa0:	b480      	push	{r7}
 8001aa2:	b089      	sub	sp, #36	; 0x24
 8001aa4:	af00      	add	r7, sp, #0
 8001aa6:	60f8      	str	r0, [r7, #12]
 8001aa8:	60b9      	str	r1, [r7, #8]
 8001aaa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001aac:	68fb      	ldr	r3, [r7, #12]
 8001aae:	f003 0307 	and.w	r3, r3, #7
 8001ab2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001ab4:	69fb      	ldr	r3, [r7, #28]
 8001ab6:	f1c3 0307 	rsb	r3, r3, #7
 8001aba:	2b04      	cmp	r3, #4
 8001abc:	bf28      	it	cs
 8001abe:	2304      	movcs	r3, #4
 8001ac0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001ac2:	69fb      	ldr	r3, [r7, #28]
 8001ac4:	3304      	adds	r3, #4
 8001ac6:	2b06      	cmp	r3, #6
 8001ac8:	d902      	bls.n	8001ad0 <NVIC_EncodePriority+0x30>
 8001aca:	69fb      	ldr	r3, [r7, #28]
 8001acc:	3b03      	subs	r3, #3
 8001ace:	e000      	b.n	8001ad2 <NVIC_EncodePriority+0x32>
 8001ad0:	2300      	movs	r3, #0
 8001ad2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ad4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001ad8:	69bb      	ldr	r3, [r7, #24]
 8001ada:	fa02 f303 	lsl.w	r3, r2, r3
 8001ade:	43da      	mvns	r2, r3
 8001ae0:	68bb      	ldr	r3, [r7, #8]
 8001ae2:	401a      	ands	r2, r3
 8001ae4:	697b      	ldr	r3, [r7, #20]
 8001ae6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001ae8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001aec:	697b      	ldr	r3, [r7, #20]
 8001aee:	fa01 f303 	lsl.w	r3, r1, r3
 8001af2:	43d9      	mvns	r1, r3
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001af8:	4313      	orrs	r3, r2
         );
}
 8001afa:	4618      	mov	r0, r3
 8001afc:	3724      	adds	r7, #36	; 0x24
 8001afe:	46bd      	mov	sp, r7
 8001b00:	bc80      	pop	{r7}
 8001b02:	4770      	bx	lr

08001b04 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001b04:	b580      	push	{r7, lr}
 8001b06:	b082      	sub	sp, #8
 8001b08:	af00      	add	r7, sp, #0
 8001b0a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	3b01      	subs	r3, #1
 8001b10:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001b14:	d301      	bcc.n	8001b1a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001b16:	2301      	movs	r3, #1
 8001b18:	e00f      	b.n	8001b3a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001b1a:	4a0a      	ldr	r2, [pc, #40]	; (8001b44 <SysTick_Config+0x40>)
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	3b01      	subs	r3, #1
 8001b20:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001b22:	210f      	movs	r1, #15
 8001b24:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001b28:	f7ff ff90 	bl	8001a4c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001b2c:	4b05      	ldr	r3, [pc, #20]	; (8001b44 <SysTick_Config+0x40>)
 8001b2e:	2200      	movs	r2, #0
 8001b30:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001b32:	4b04      	ldr	r3, [pc, #16]	; (8001b44 <SysTick_Config+0x40>)
 8001b34:	2207      	movs	r2, #7
 8001b36:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001b38:	2300      	movs	r3, #0
}
 8001b3a:	4618      	mov	r0, r3
 8001b3c:	3708      	adds	r7, #8
 8001b3e:	46bd      	mov	sp, r7
 8001b40:	bd80      	pop	{r7, pc}
 8001b42:	bf00      	nop
 8001b44:	e000e010 	.word	0xe000e010

08001b48 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b48:	b580      	push	{r7, lr}
 8001b4a:	b082      	sub	sp, #8
 8001b4c:	af00      	add	r7, sp, #0
 8001b4e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001b50:	6878      	ldr	r0, [r7, #4]
 8001b52:	f7ff ff2d 	bl	80019b0 <__NVIC_SetPriorityGrouping>
}
 8001b56:	bf00      	nop
 8001b58:	3708      	adds	r7, #8
 8001b5a:	46bd      	mov	sp, r7
 8001b5c:	bd80      	pop	{r7, pc}

08001b5e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001b5e:	b580      	push	{r7, lr}
 8001b60:	b086      	sub	sp, #24
 8001b62:	af00      	add	r7, sp, #0
 8001b64:	4603      	mov	r3, r0
 8001b66:	60b9      	str	r1, [r7, #8]
 8001b68:	607a      	str	r2, [r7, #4]
 8001b6a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001b6c:	2300      	movs	r3, #0
 8001b6e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001b70:	f7ff ff42 	bl	80019f8 <__NVIC_GetPriorityGrouping>
 8001b74:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001b76:	687a      	ldr	r2, [r7, #4]
 8001b78:	68b9      	ldr	r1, [r7, #8]
 8001b7a:	6978      	ldr	r0, [r7, #20]
 8001b7c:	f7ff ff90 	bl	8001aa0 <NVIC_EncodePriority>
 8001b80:	4602      	mov	r2, r0
 8001b82:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001b86:	4611      	mov	r1, r2
 8001b88:	4618      	mov	r0, r3
 8001b8a:	f7ff ff5f 	bl	8001a4c <__NVIC_SetPriority>
}
 8001b8e:	bf00      	nop
 8001b90:	3718      	adds	r7, #24
 8001b92:	46bd      	mov	sp, r7
 8001b94:	bd80      	pop	{r7, pc}

08001b96 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b96:	b580      	push	{r7, lr}
 8001b98:	b082      	sub	sp, #8
 8001b9a:	af00      	add	r7, sp, #0
 8001b9c:	4603      	mov	r3, r0
 8001b9e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001ba0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ba4:	4618      	mov	r0, r3
 8001ba6:	f7ff ff35 	bl	8001a14 <__NVIC_EnableIRQ>
}
 8001baa:	bf00      	nop
 8001bac:	3708      	adds	r7, #8
 8001bae:	46bd      	mov	sp, r7
 8001bb0:	bd80      	pop	{r7, pc}

08001bb2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001bb2:	b580      	push	{r7, lr}
 8001bb4:	b082      	sub	sp, #8
 8001bb6:	af00      	add	r7, sp, #0
 8001bb8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001bba:	6878      	ldr	r0, [r7, #4]
 8001bbc:	f7ff ffa2 	bl	8001b04 <SysTick_Config>
 8001bc0:	4603      	mov	r3, r0
}
 8001bc2:	4618      	mov	r0, r3
 8001bc4:	3708      	adds	r7, #8
 8001bc6:	46bd      	mov	sp, r7
 8001bc8:	bd80      	pop	{r7, pc}
	...

08001bcc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001bcc:	b480      	push	{r7}
 8001bce:	b08b      	sub	sp, #44	; 0x2c
 8001bd0:	af00      	add	r7, sp, #0
 8001bd2:	6078      	str	r0, [r7, #4]
 8001bd4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001bd6:	2300      	movs	r3, #0
 8001bd8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001bda:	2300      	movs	r3, #0
 8001bdc:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001bde:	e127      	b.n	8001e30 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001be0:	2201      	movs	r2, #1
 8001be2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001be4:	fa02 f303 	lsl.w	r3, r2, r3
 8001be8:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001bea:	683b      	ldr	r3, [r7, #0]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	69fa      	ldr	r2, [r7, #28]
 8001bf0:	4013      	ands	r3, r2
 8001bf2:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001bf4:	69ba      	ldr	r2, [r7, #24]
 8001bf6:	69fb      	ldr	r3, [r7, #28]
 8001bf8:	429a      	cmp	r2, r3
 8001bfa:	f040 8116 	bne.w	8001e2a <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001bfe:	683b      	ldr	r3, [r7, #0]
 8001c00:	685b      	ldr	r3, [r3, #4]
 8001c02:	2b12      	cmp	r3, #18
 8001c04:	d034      	beq.n	8001c70 <HAL_GPIO_Init+0xa4>
 8001c06:	2b12      	cmp	r3, #18
 8001c08:	d80d      	bhi.n	8001c26 <HAL_GPIO_Init+0x5a>
 8001c0a:	2b02      	cmp	r3, #2
 8001c0c:	d02b      	beq.n	8001c66 <HAL_GPIO_Init+0x9a>
 8001c0e:	2b02      	cmp	r3, #2
 8001c10:	d804      	bhi.n	8001c1c <HAL_GPIO_Init+0x50>
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d031      	beq.n	8001c7a <HAL_GPIO_Init+0xae>
 8001c16:	2b01      	cmp	r3, #1
 8001c18:	d01c      	beq.n	8001c54 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001c1a:	e048      	b.n	8001cae <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001c1c:	2b03      	cmp	r3, #3
 8001c1e:	d043      	beq.n	8001ca8 <HAL_GPIO_Init+0xdc>
 8001c20:	2b11      	cmp	r3, #17
 8001c22:	d01b      	beq.n	8001c5c <HAL_GPIO_Init+0x90>
          break;
 8001c24:	e043      	b.n	8001cae <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001c26:	4a89      	ldr	r2, [pc, #548]	; (8001e4c <HAL_GPIO_Init+0x280>)
 8001c28:	4293      	cmp	r3, r2
 8001c2a:	d026      	beq.n	8001c7a <HAL_GPIO_Init+0xae>
 8001c2c:	4a87      	ldr	r2, [pc, #540]	; (8001e4c <HAL_GPIO_Init+0x280>)
 8001c2e:	4293      	cmp	r3, r2
 8001c30:	d806      	bhi.n	8001c40 <HAL_GPIO_Init+0x74>
 8001c32:	4a87      	ldr	r2, [pc, #540]	; (8001e50 <HAL_GPIO_Init+0x284>)
 8001c34:	4293      	cmp	r3, r2
 8001c36:	d020      	beq.n	8001c7a <HAL_GPIO_Init+0xae>
 8001c38:	4a86      	ldr	r2, [pc, #536]	; (8001e54 <HAL_GPIO_Init+0x288>)
 8001c3a:	4293      	cmp	r3, r2
 8001c3c:	d01d      	beq.n	8001c7a <HAL_GPIO_Init+0xae>
          break;
 8001c3e:	e036      	b.n	8001cae <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001c40:	4a85      	ldr	r2, [pc, #532]	; (8001e58 <HAL_GPIO_Init+0x28c>)
 8001c42:	4293      	cmp	r3, r2
 8001c44:	d019      	beq.n	8001c7a <HAL_GPIO_Init+0xae>
 8001c46:	4a85      	ldr	r2, [pc, #532]	; (8001e5c <HAL_GPIO_Init+0x290>)
 8001c48:	4293      	cmp	r3, r2
 8001c4a:	d016      	beq.n	8001c7a <HAL_GPIO_Init+0xae>
 8001c4c:	4a84      	ldr	r2, [pc, #528]	; (8001e60 <HAL_GPIO_Init+0x294>)
 8001c4e:	4293      	cmp	r3, r2
 8001c50:	d013      	beq.n	8001c7a <HAL_GPIO_Init+0xae>
          break;
 8001c52:	e02c      	b.n	8001cae <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001c54:	683b      	ldr	r3, [r7, #0]
 8001c56:	68db      	ldr	r3, [r3, #12]
 8001c58:	623b      	str	r3, [r7, #32]
          break;
 8001c5a:	e028      	b.n	8001cae <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001c5c:	683b      	ldr	r3, [r7, #0]
 8001c5e:	68db      	ldr	r3, [r3, #12]
 8001c60:	3304      	adds	r3, #4
 8001c62:	623b      	str	r3, [r7, #32]
          break;
 8001c64:	e023      	b.n	8001cae <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001c66:	683b      	ldr	r3, [r7, #0]
 8001c68:	68db      	ldr	r3, [r3, #12]
 8001c6a:	3308      	adds	r3, #8
 8001c6c:	623b      	str	r3, [r7, #32]
          break;
 8001c6e:	e01e      	b.n	8001cae <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001c70:	683b      	ldr	r3, [r7, #0]
 8001c72:	68db      	ldr	r3, [r3, #12]
 8001c74:	330c      	adds	r3, #12
 8001c76:	623b      	str	r3, [r7, #32]
          break;
 8001c78:	e019      	b.n	8001cae <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001c7a:	683b      	ldr	r3, [r7, #0]
 8001c7c:	689b      	ldr	r3, [r3, #8]
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d102      	bne.n	8001c88 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001c82:	2304      	movs	r3, #4
 8001c84:	623b      	str	r3, [r7, #32]
          break;
 8001c86:	e012      	b.n	8001cae <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001c88:	683b      	ldr	r3, [r7, #0]
 8001c8a:	689b      	ldr	r3, [r3, #8]
 8001c8c:	2b01      	cmp	r3, #1
 8001c8e:	d105      	bne.n	8001c9c <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001c90:	2308      	movs	r3, #8
 8001c92:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	69fa      	ldr	r2, [r7, #28]
 8001c98:	611a      	str	r2, [r3, #16]
          break;
 8001c9a:	e008      	b.n	8001cae <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001c9c:	2308      	movs	r3, #8
 8001c9e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	69fa      	ldr	r2, [r7, #28]
 8001ca4:	615a      	str	r2, [r3, #20]
          break;
 8001ca6:	e002      	b.n	8001cae <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001ca8:	2300      	movs	r3, #0
 8001caa:	623b      	str	r3, [r7, #32]
          break;
 8001cac:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001cae:	69bb      	ldr	r3, [r7, #24]
 8001cb0:	2bff      	cmp	r3, #255	; 0xff
 8001cb2:	d801      	bhi.n	8001cb8 <HAL_GPIO_Init+0xec>
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	e001      	b.n	8001cbc <HAL_GPIO_Init+0xf0>
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	3304      	adds	r3, #4
 8001cbc:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001cbe:	69bb      	ldr	r3, [r7, #24]
 8001cc0:	2bff      	cmp	r3, #255	; 0xff
 8001cc2:	d802      	bhi.n	8001cca <HAL_GPIO_Init+0xfe>
 8001cc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cc6:	009b      	lsls	r3, r3, #2
 8001cc8:	e002      	b.n	8001cd0 <HAL_GPIO_Init+0x104>
 8001cca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ccc:	3b08      	subs	r3, #8
 8001cce:	009b      	lsls	r3, r3, #2
 8001cd0:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001cd2:	697b      	ldr	r3, [r7, #20]
 8001cd4:	681a      	ldr	r2, [r3, #0]
 8001cd6:	210f      	movs	r1, #15
 8001cd8:	693b      	ldr	r3, [r7, #16]
 8001cda:	fa01 f303 	lsl.w	r3, r1, r3
 8001cde:	43db      	mvns	r3, r3
 8001ce0:	401a      	ands	r2, r3
 8001ce2:	6a39      	ldr	r1, [r7, #32]
 8001ce4:	693b      	ldr	r3, [r7, #16]
 8001ce6:	fa01 f303 	lsl.w	r3, r1, r3
 8001cea:	431a      	orrs	r2, r3
 8001cec:	697b      	ldr	r3, [r7, #20]
 8001cee:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001cf0:	683b      	ldr	r3, [r7, #0]
 8001cf2:	685b      	ldr	r3, [r3, #4]
 8001cf4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	f000 8096 	beq.w	8001e2a <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001cfe:	4b59      	ldr	r3, [pc, #356]	; (8001e64 <HAL_GPIO_Init+0x298>)
 8001d00:	699b      	ldr	r3, [r3, #24]
 8001d02:	4a58      	ldr	r2, [pc, #352]	; (8001e64 <HAL_GPIO_Init+0x298>)
 8001d04:	f043 0301 	orr.w	r3, r3, #1
 8001d08:	6193      	str	r3, [r2, #24]
 8001d0a:	4b56      	ldr	r3, [pc, #344]	; (8001e64 <HAL_GPIO_Init+0x298>)
 8001d0c:	699b      	ldr	r3, [r3, #24]
 8001d0e:	f003 0301 	and.w	r3, r3, #1
 8001d12:	60bb      	str	r3, [r7, #8]
 8001d14:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001d16:	4a54      	ldr	r2, [pc, #336]	; (8001e68 <HAL_GPIO_Init+0x29c>)
 8001d18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d1a:	089b      	lsrs	r3, r3, #2
 8001d1c:	3302      	adds	r3, #2
 8001d1e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d22:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001d24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d26:	f003 0303 	and.w	r3, r3, #3
 8001d2a:	009b      	lsls	r3, r3, #2
 8001d2c:	220f      	movs	r2, #15
 8001d2e:	fa02 f303 	lsl.w	r3, r2, r3
 8001d32:	43db      	mvns	r3, r3
 8001d34:	68fa      	ldr	r2, [r7, #12]
 8001d36:	4013      	ands	r3, r2
 8001d38:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	4a4b      	ldr	r2, [pc, #300]	; (8001e6c <HAL_GPIO_Init+0x2a0>)
 8001d3e:	4293      	cmp	r3, r2
 8001d40:	d013      	beq.n	8001d6a <HAL_GPIO_Init+0x19e>
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	4a4a      	ldr	r2, [pc, #296]	; (8001e70 <HAL_GPIO_Init+0x2a4>)
 8001d46:	4293      	cmp	r3, r2
 8001d48:	d00d      	beq.n	8001d66 <HAL_GPIO_Init+0x19a>
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	4a49      	ldr	r2, [pc, #292]	; (8001e74 <HAL_GPIO_Init+0x2a8>)
 8001d4e:	4293      	cmp	r3, r2
 8001d50:	d007      	beq.n	8001d62 <HAL_GPIO_Init+0x196>
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	4a48      	ldr	r2, [pc, #288]	; (8001e78 <HAL_GPIO_Init+0x2ac>)
 8001d56:	4293      	cmp	r3, r2
 8001d58:	d101      	bne.n	8001d5e <HAL_GPIO_Init+0x192>
 8001d5a:	2303      	movs	r3, #3
 8001d5c:	e006      	b.n	8001d6c <HAL_GPIO_Init+0x1a0>
 8001d5e:	2304      	movs	r3, #4
 8001d60:	e004      	b.n	8001d6c <HAL_GPIO_Init+0x1a0>
 8001d62:	2302      	movs	r3, #2
 8001d64:	e002      	b.n	8001d6c <HAL_GPIO_Init+0x1a0>
 8001d66:	2301      	movs	r3, #1
 8001d68:	e000      	b.n	8001d6c <HAL_GPIO_Init+0x1a0>
 8001d6a:	2300      	movs	r3, #0
 8001d6c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001d6e:	f002 0203 	and.w	r2, r2, #3
 8001d72:	0092      	lsls	r2, r2, #2
 8001d74:	4093      	lsls	r3, r2
 8001d76:	68fa      	ldr	r2, [r7, #12]
 8001d78:	4313      	orrs	r3, r2
 8001d7a:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001d7c:	493a      	ldr	r1, [pc, #232]	; (8001e68 <HAL_GPIO_Init+0x29c>)
 8001d7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d80:	089b      	lsrs	r3, r3, #2
 8001d82:	3302      	adds	r3, #2
 8001d84:	68fa      	ldr	r2, [r7, #12]
 8001d86:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001d8a:	683b      	ldr	r3, [r7, #0]
 8001d8c:	685b      	ldr	r3, [r3, #4]
 8001d8e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d006      	beq.n	8001da4 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001d96:	4b39      	ldr	r3, [pc, #228]	; (8001e7c <HAL_GPIO_Init+0x2b0>)
 8001d98:	681a      	ldr	r2, [r3, #0]
 8001d9a:	4938      	ldr	r1, [pc, #224]	; (8001e7c <HAL_GPIO_Init+0x2b0>)
 8001d9c:	69bb      	ldr	r3, [r7, #24]
 8001d9e:	4313      	orrs	r3, r2
 8001da0:	600b      	str	r3, [r1, #0]
 8001da2:	e006      	b.n	8001db2 <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001da4:	4b35      	ldr	r3, [pc, #212]	; (8001e7c <HAL_GPIO_Init+0x2b0>)
 8001da6:	681a      	ldr	r2, [r3, #0]
 8001da8:	69bb      	ldr	r3, [r7, #24]
 8001daa:	43db      	mvns	r3, r3
 8001dac:	4933      	ldr	r1, [pc, #204]	; (8001e7c <HAL_GPIO_Init+0x2b0>)
 8001dae:	4013      	ands	r3, r2
 8001db0:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001db2:	683b      	ldr	r3, [r7, #0]
 8001db4:	685b      	ldr	r3, [r3, #4]
 8001db6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d006      	beq.n	8001dcc <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001dbe:	4b2f      	ldr	r3, [pc, #188]	; (8001e7c <HAL_GPIO_Init+0x2b0>)
 8001dc0:	685a      	ldr	r2, [r3, #4]
 8001dc2:	492e      	ldr	r1, [pc, #184]	; (8001e7c <HAL_GPIO_Init+0x2b0>)
 8001dc4:	69bb      	ldr	r3, [r7, #24]
 8001dc6:	4313      	orrs	r3, r2
 8001dc8:	604b      	str	r3, [r1, #4]
 8001dca:	e006      	b.n	8001dda <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001dcc:	4b2b      	ldr	r3, [pc, #172]	; (8001e7c <HAL_GPIO_Init+0x2b0>)
 8001dce:	685a      	ldr	r2, [r3, #4]
 8001dd0:	69bb      	ldr	r3, [r7, #24]
 8001dd2:	43db      	mvns	r3, r3
 8001dd4:	4929      	ldr	r1, [pc, #164]	; (8001e7c <HAL_GPIO_Init+0x2b0>)
 8001dd6:	4013      	ands	r3, r2
 8001dd8:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001dda:	683b      	ldr	r3, [r7, #0]
 8001ddc:	685b      	ldr	r3, [r3, #4]
 8001dde:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d006      	beq.n	8001df4 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001de6:	4b25      	ldr	r3, [pc, #148]	; (8001e7c <HAL_GPIO_Init+0x2b0>)
 8001de8:	689a      	ldr	r2, [r3, #8]
 8001dea:	4924      	ldr	r1, [pc, #144]	; (8001e7c <HAL_GPIO_Init+0x2b0>)
 8001dec:	69bb      	ldr	r3, [r7, #24]
 8001dee:	4313      	orrs	r3, r2
 8001df0:	608b      	str	r3, [r1, #8]
 8001df2:	e006      	b.n	8001e02 <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001df4:	4b21      	ldr	r3, [pc, #132]	; (8001e7c <HAL_GPIO_Init+0x2b0>)
 8001df6:	689a      	ldr	r2, [r3, #8]
 8001df8:	69bb      	ldr	r3, [r7, #24]
 8001dfa:	43db      	mvns	r3, r3
 8001dfc:	491f      	ldr	r1, [pc, #124]	; (8001e7c <HAL_GPIO_Init+0x2b0>)
 8001dfe:	4013      	ands	r3, r2
 8001e00:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001e02:	683b      	ldr	r3, [r7, #0]
 8001e04:	685b      	ldr	r3, [r3, #4]
 8001e06:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d006      	beq.n	8001e1c <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001e0e:	4b1b      	ldr	r3, [pc, #108]	; (8001e7c <HAL_GPIO_Init+0x2b0>)
 8001e10:	68da      	ldr	r2, [r3, #12]
 8001e12:	491a      	ldr	r1, [pc, #104]	; (8001e7c <HAL_GPIO_Init+0x2b0>)
 8001e14:	69bb      	ldr	r3, [r7, #24]
 8001e16:	4313      	orrs	r3, r2
 8001e18:	60cb      	str	r3, [r1, #12]
 8001e1a:	e006      	b.n	8001e2a <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001e1c:	4b17      	ldr	r3, [pc, #92]	; (8001e7c <HAL_GPIO_Init+0x2b0>)
 8001e1e:	68da      	ldr	r2, [r3, #12]
 8001e20:	69bb      	ldr	r3, [r7, #24]
 8001e22:	43db      	mvns	r3, r3
 8001e24:	4915      	ldr	r1, [pc, #84]	; (8001e7c <HAL_GPIO_Init+0x2b0>)
 8001e26:	4013      	ands	r3, r2
 8001e28:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001e2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e2c:	3301      	adds	r3, #1
 8001e2e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001e30:	683b      	ldr	r3, [r7, #0]
 8001e32:	681a      	ldr	r2, [r3, #0]
 8001e34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e36:	fa22 f303 	lsr.w	r3, r2, r3
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	f47f aed0 	bne.w	8001be0 <HAL_GPIO_Init+0x14>
  }
}
 8001e40:	bf00      	nop
 8001e42:	372c      	adds	r7, #44	; 0x2c
 8001e44:	46bd      	mov	sp, r7
 8001e46:	bc80      	pop	{r7}
 8001e48:	4770      	bx	lr
 8001e4a:	bf00      	nop
 8001e4c:	10210000 	.word	0x10210000
 8001e50:	10110000 	.word	0x10110000
 8001e54:	10120000 	.word	0x10120000
 8001e58:	10310000 	.word	0x10310000
 8001e5c:	10320000 	.word	0x10320000
 8001e60:	10220000 	.word	0x10220000
 8001e64:	40021000 	.word	0x40021000
 8001e68:	40010000 	.word	0x40010000
 8001e6c:	40010800 	.word	0x40010800
 8001e70:	40010c00 	.word	0x40010c00
 8001e74:	40011000 	.word	0x40011000
 8001e78:	40011400 	.word	0x40011400
 8001e7c:	40010400 	.word	0x40010400

08001e80 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001e80:	b480      	push	{r7}
 8001e82:	b083      	sub	sp, #12
 8001e84:	af00      	add	r7, sp, #0
 8001e86:	6078      	str	r0, [r7, #4]
 8001e88:	460b      	mov	r3, r1
 8001e8a:	807b      	strh	r3, [r7, #2]
 8001e8c:	4613      	mov	r3, r2
 8001e8e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001e90:	787b      	ldrb	r3, [r7, #1]
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d003      	beq.n	8001e9e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001e96:	887a      	ldrh	r2, [r7, #2]
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001e9c:	e003      	b.n	8001ea6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001e9e:	887b      	ldrh	r3, [r7, #2]
 8001ea0:	041a      	lsls	r2, r3, #16
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	611a      	str	r2, [r3, #16]
}
 8001ea6:	bf00      	nop
 8001ea8:	370c      	adds	r7, #12
 8001eaa:	46bd      	mov	sp, r7
 8001eac:	bc80      	pop	{r7}
 8001eae:	4770      	bx	lr

08001eb0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001eb0:	b580      	push	{r7, lr}
 8001eb2:	b082      	sub	sp, #8
 8001eb4:	af00      	add	r7, sp, #0
 8001eb6:	4603      	mov	r3, r0
 8001eb8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001eba:	4b08      	ldr	r3, [pc, #32]	; (8001edc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001ebc:	695a      	ldr	r2, [r3, #20]
 8001ebe:	88fb      	ldrh	r3, [r7, #6]
 8001ec0:	4013      	ands	r3, r2
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d006      	beq.n	8001ed4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001ec6:	4a05      	ldr	r2, [pc, #20]	; (8001edc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001ec8:	88fb      	ldrh	r3, [r7, #6]
 8001eca:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001ecc:	88fb      	ldrh	r3, [r7, #6]
 8001ece:	4618      	mov	r0, r3
 8001ed0:	f000 f806 	bl	8001ee0 <HAL_GPIO_EXTI_Callback>
  }
}
 8001ed4:	bf00      	nop
 8001ed6:	3708      	adds	r7, #8
 8001ed8:	46bd      	mov	sp, r7
 8001eda:	bd80      	pop	{r7, pc}
 8001edc:	40010400 	.word	0x40010400

08001ee0 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001ee0:	b480      	push	{r7}
 8001ee2:	b083      	sub	sp, #12
 8001ee4:	af00      	add	r7, sp, #0
 8001ee6:	4603      	mov	r3, r0
 8001ee8:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8001eea:	bf00      	nop
 8001eec:	370c      	adds	r7, #12
 8001eee:	46bd      	mov	sp, r7
 8001ef0:	bc80      	pop	{r7}
 8001ef2:	4770      	bx	lr

08001ef4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001ef4:	b580      	push	{r7, lr}
 8001ef6:	b086      	sub	sp, #24
 8001ef8:	af00      	add	r7, sp, #0
 8001efa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d101      	bne.n	8001f06 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001f02:	2301      	movs	r3, #1
 8001f04:	e26c      	b.n	80023e0 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	f003 0301 	and.w	r3, r3, #1
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	f000 8087 	beq.w	8002022 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001f14:	4b92      	ldr	r3, [pc, #584]	; (8002160 <HAL_RCC_OscConfig+0x26c>)
 8001f16:	685b      	ldr	r3, [r3, #4]
 8001f18:	f003 030c 	and.w	r3, r3, #12
 8001f1c:	2b04      	cmp	r3, #4
 8001f1e:	d00c      	beq.n	8001f3a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001f20:	4b8f      	ldr	r3, [pc, #572]	; (8002160 <HAL_RCC_OscConfig+0x26c>)
 8001f22:	685b      	ldr	r3, [r3, #4]
 8001f24:	f003 030c 	and.w	r3, r3, #12
 8001f28:	2b08      	cmp	r3, #8
 8001f2a:	d112      	bne.n	8001f52 <HAL_RCC_OscConfig+0x5e>
 8001f2c:	4b8c      	ldr	r3, [pc, #560]	; (8002160 <HAL_RCC_OscConfig+0x26c>)
 8001f2e:	685b      	ldr	r3, [r3, #4]
 8001f30:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f34:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001f38:	d10b      	bne.n	8001f52 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f3a:	4b89      	ldr	r3, [pc, #548]	; (8002160 <HAL_RCC_OscConfig+0x26c>)
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d06c      	beq.n	8002020 <HAL_RCC_OscConfig+0x12c>
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	685b      	ldr	r3, [r3, #4]
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d168      	bne.n	8002020 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001f4e:	2301      	movs	r3, #1
 8001f50:	e246      	b.n	80023e0 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	685b      	ldr	r3, [r3, #4]
 8001f56:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001f5a:	d106      	bne.n	8001f6a <HAL_RCC_OscConfig+0x76>
 8001f5c:	4b80      	ldr	r3, [pc, #512]	; (8002160 <HAL_RCC_OscConfig+0x26c>)
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	4a7f      	ldr	r2, [pc, #508]	; (8002160 <HAL_RCC_OscConfig+0x26c>)
 8001f62:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f66:	6013      	str	r3, [r2, #0]
 8001f68:	e02e      	b.n	8001fc8 <HAL_RCC_OscConfig+0xd4>
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	685b      	ldr	r3, [r3, #4]
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d10c      	bne.n	8001f8c <HAL_RCC_OscConfig+0x98>
 8001f72:	4b7b      	ldr	r3, [pc, #492]	; (8002160 <HAL_RCC_OscConfig+0x26c>)
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	4a7a      	ldr	r2, [pc, #488]	; (8002160 <HAL_RCC_OscConfig+0x26c>)
 8001f78:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001f7c:	6013      	str	r3, [r2, #0]
 8001f7e:	4b78      	ldr	r3, [pc, #480]	; (8002160 <HAL_RCC_OscConfig+0x26c>)
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	4a77      	ldr	r2, [pc, #476]	; (8002160 <HAL_RCC_OscConfig+0x26c>)
 8001f84:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001f88:	6013      	str	r3, [r2, #0]
 8001f8a:	e01d      	b.n	8001fc8 <HAL_RCC_OscConfig+0xd4>
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	685b      	ldr	r3, [r3, #4]
 8001f90:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001f94:	d10c      	bne.n	8001fb0 <HAL_RCC_OscConfig+0xbc>
 8001f96:	4b72      	ldr	r3, [pc, #456]	; (8002160 <HAL_RCC_OscConfig+0x26c>)
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	4a71      	ldr	r2, [pc, #452]	; (8002160 <HAL_RCC_OscConfig+0x26c>)
 8001f9c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001fa0:	6013      	str	r3, [r2, #0]
 8001fa2:	4b6f      	ldr	r3, [pc, #444]	; (8002160 <HAL_RCC_OscConfig+0x26c>)
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	4a6e      	ldr	r2, [pc, #440]	; (8002160 <HAL_RCC_OscConfig+0x26c>)
 8001fa8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001fac:	6013      	str	r3, [r2, #0]
 8001fae:	e00b      	b.n	8001fc8 <HAL_RCC_OscConfig+0xd4>
 8001fb0:	4b6b      	ldr	r3, [pc, #428]	; (8002160 <HAL_RCC_OscConfig+0x26c>)
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	4a6a      	ldr	r2, [pc, #424]	; (8002160 <HAL_RCC_OscConfig+0x26c>)
 8001fb6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001fba:	6013      	str	r3, [r2, #0]
 8001fbc:	4b68      	ldr	r3, [pc, #416]	; (8002160 <HAL_RCC_OscConfig+0x26c>)
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	4a67      	ldr	r2, [pc, #412]	; (8002160 <HAL_RCC_OscConfig+0x26c>)
 8001fc2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001fc6:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	685b      	ldr	r3, [r3, #4]
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d013      	beq.n	8001ff8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fd0:	f7ff f8b2 	bl	8001138 <HAL_GetTick>
 8001fd4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001fd6:	e008      	b.n	8001fea <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001fd8:	f7ff f8ae 	bl	8001138 <HAL_GetTick>
 8001fdc:	4602      	mov	r2, r0
 8001fde:	693b      	ldr	r3, [r7, #16]
 8001fe0:	1ad3      	subs	r3, r2, r3
 8001fe2:	2b64      	cmp	r3, #100	; 0x64
 8001fe4:	d901      	bls.n	8001fea <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001fe6:	2303      	movs	r3, #3
 8001fe8:	e1fa      	b.n	80023e0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001fea:	4b5d      	ldr	r3, [pc, #372]	; (8002160 <HAL_RCC_OscConfig+0x26c>)
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d0f0      	beq.n	8001fd8 <HAL_RCC_OscConfig+0xe4>
 8001ff6:	e014      	b.n	8002022 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ff8:	f7ff f89e 	bl	8001138 <HAL_GetTick>
 8001ffc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001ffe:	e008      	b.n	8002012 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002000:	f7ff f89a 	bl	8001138 <HAL_GetTick>
 8002004:	4602      	mov	r2, r0
 8002006:	693b      	ldr	r3, [r7, #16]
 8002008:	1ad3      	subs	r3, r2, r3
 800200a:	2b64      	cmp	r3, #100	; 0x64
 800200c:	d901      	bls.n	8002012 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800200e:	2303      	movs	r3, #3
 8002010:	e1e6      	b.n	80023e0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002012:	4b53      	ldr	r3, [pc, #332]	; (8002160 <HAL_RCC_OscConfig+0x26c>)
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800201a:	2b00      	cmp	r3, #0
 800201c:	d1f0      	bne.n	8002000 <HAL_RCC_OscConfig+0x10c>
 800201e:	e000      	b.n	8002022 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002020:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	f003 0302 	and.w	r3, r3, #2
 800202a:	2b00      	cmp	r3, #0
 800202c:	d063      	beq.n	80020f6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800202e:	4b4c      	ldr	r3, [pc, #304]	; (8002160 <HAL_RCC_OscConfig+0x26c>)
 8002030:	685b      	ldr	r3, [r3, #4]
 8002032:	f003 030c 	and.w	r3, r3, #12
 8002036:	2b00      	cmp	r3, #0
 8002038:	d00b      	beq.n	8002052 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800203a:	4b49      	ldr	r3, [pc, #292]	; (8002160 <HAL_RCC_OscConfig+0x26c>)
 800203c:	685b      	ldr	r3, [r3, #4]
 800203e:	f003 030c 	and.w	r3, r3, #12
 8002042:	2b08      	cmp	r3, #8
 8002044:	d11c      	bne.n	8002080 <HAL_RCC_OscConfig+0x18c>
 8002046:	4b46      	ldr	r3, [pc, #280]	; (8002160 <HAL_RCC_OscConfig+0x26c>)
 8002048:	685b      	ldr	r3, [r3, #4]
 800204a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800204e:	2b00      	cmp	r3, #0
 8002050:	d116      	bne.n	8002080 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002052:	4b43      	ldr	r3, [pc, #268]	; (8002160 <HAL_RCC_OscConfig+0x26c>)
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	f003 0302 	and.w	r3, r3, #2
 800205a:	2b00      	cmp	r3, #0
 800205c:	d005      	beq.n	800206a <HAL_RCC_OscConfig+0x176>
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	691b      	ldr	r3, [r3, #16]
 8002062:	2b01      	cmp	r3, #1
 8002064:	d001      	beq.n	800206a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002066:	2301      	movs	r3, #1
 8002068:	e1ba      	b.n	80023e0 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800206a:	4b3d      	ldr	r3, [pc, #244]	; (8002160 <HAL_RCC_OscConfig+0x26c>)
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	695b      	ldr	r3, [r3, #20]
 8002076:	00db      	lsls	r3, r3, #3
 8002078:	4939      	ldr	r1, [pc, #228]	; (8002160 <HAL_RCC_OscConfig+0x26c>)
 800207a:	4313      	orrs	r3, r2
 800207c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800207e:	e03a      	b.n	80020f6 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	691b      	ldr	r3, [r3, #16]
 8002084:	2b00      	cmp	r3, #0
 8002086:	d020      	beq.n	80020ca <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002088:	4b36      	ldr	r3, [pc, #216]	; (8002164 <HAL_RCC_OscConfig+0x270>)
 800208a:	2201      	movs	r2, #1
 800208c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800208e:	f7ff f853 	bl	8001138 <HAL_GetTick>
 8002092:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002094:	e008      	b.n	80020a8 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002096:	f7ff f84f 	bl	8001138 <HAL_GetTick>
 800209a:	4602      	mov	r2, r0
 800209c:	693b      	ldr	r3, [r7, #16]
 800209e:	1ad3      	subs	r3, r2, r3
 80020a0:	2b02      	cmp	r3, #2
 80020a2:	d901      	bls.n	80020a8 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80020a4:	2303      	movs	r3, #3
 80020a6:	e19b      	b.n	80023e0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80020a8:	4b2d      	ldr	r3, [pc, #180]	; (8002160 <HAL_RCC_OscConfig+0x26c>)
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	f003 0302 	and.w	r3, r3, #2
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d0f0      	beq.n	8002096 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80020b4:	4b2a      	ldr	r3, [pc, #168]	; (8002160 <HAL_RCC_OscConfig+0x26c>)
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	695b      	ldr	r3, [r3, #20]
 80020c0:	00db      	lsls	r3, r3, #3
 80020c2:	4927      	ldr	r1, [pc, #156]	; (8002160 <HAL_RCC_OscConfig+0x26c>)
 80020c4:	4313      	orrs	r3, r2
 80020c6:	600b      	str	r3, [r1, #0]
 80020c8:	e015      	b.n	80020f6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80020ca:	4b26      	ldr	r3, [pc, #152]	; (8002164 <HAL_RCC_OscConfig+0x270>)
 80020cc:	2200      	movs	r2, #0
 80020ce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020d0:	f7ff f832 	bl	8001138 <HAL_GetTick>
 80020d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80020d6:	e008      	b.n	80020ea <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80020d8:	f7ff f82e 	bl	8001138 <HAL_GetTick>
 80020dc:	4602      	mov	r2, r0
 80020de:	693b      	ldr	r3, [r7, #16]
 80020e0:	1ad3      	subs	r3, r2, r3
 80020e2:	2b02      	cmp	r3, #2
 80020e4:	d901      	bls.n	80020ea <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80020e6:	2303      	movs	r3, #3
 80020e8:	e17a      	b.n	80023e0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80020ea:	4b1d      	ldr	r3, [pc, #116]	; (8002160 <HAL_RCC_OscConfig+0x26c>)
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	f003 0302 	and.w	r3, r3, #2
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d1f0      	bne.n	80020d8 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	f003 0308 	and.w	r3, r3, #8
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d03a      	beq.n	8002178 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	699b      	ldr	r3, [r3, #24]
 8002106:	2b00      	cmp	r3, #0
 8002108:	d019      	beq.n	800213e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800210a:	4b17      	ldr	r3, [pc, #92]	; (8002168 <HAL_RCC_OscConfig+0x274>)
 800210c:	2201      	movs	r2, #1
 800210e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002110:	f7ff f812 	bl	8001138 <HAL_GetTick>
 8002114:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002116:	e008      	b.n	800212a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002118:	f7ff f80e 	bl	8001138 <HAL_GetTick>
 800211c:	4602      	mov	r2, r0
 800211e:	693b      	ldr	r3, [r7, #16]
 8002120:	1ad3      	subs	r3, r2, r3
 8002122:	2b02      	cmp	r3, #2
 8002124:	d901      	bls.n	800212a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002126:	2303      	movs	r3, #3
 8002128:	e15a      	b.n	80023e0 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800212a:	4b0d      	ldr	r3, [pc, #52]	; (8002160 <HAL_RCC_OscConfig+0x26c>)
 800212c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800212e:	f003 0302 	and.w	r3, r3, #2
 8002132:	2b00      	cmp	r3, #0
 8002134:	d0f0      	beq.n	8002118 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002136:	2001      	movs	r0, #1
 8002138:	f000 fada 	bl	80026f0 <RCC_Delay>
 800213c:	e01c      	b.n	8002178 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800213e:	4b0a      	ldr	r3, [pc, #40]	; (8002168 <HAL_RCC_OscConfig+0x274>)
 8002140:	2200      	movs	r2, #0
 8002142:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002144:	f7fe fff8 	bl	8001138 <HAL_GetTick>
 8002148:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800214a:	e00f      	b.n	800216c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800214c:	f7fe fff4 	bl	8001138 <HAL_GetTick>
 8002150:	4602      	mov	r2, r0
 8002152:	693b      	ldr	r3, [r7, #16]
 8002154:	1ad3      	subs	r3, r2, r3
 8002156:	2b02      	cmp	r3, #2
 8002158:	d908      	bls.n	800216c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800215a:	2303      	movs	r3, #3
 800215c:	e140      	b.n	80023e0 <HAL_RCC_OscConfig+0x4ec>
 800215e:	bf00      	nop
 8002160:	40021000 	.word	0x40021000
 8002164:	42420000 	.word	0x42420000
 8002168:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800216c:	4b9e      	ldr	r3, [pc, #632]	; (80023e8 <HAL_RCC_OscConfig+0x4f4>)
 800216e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002170:	f003 0302 	and.w	r3, r3, #2
 8002174:	2b00      	cmp	r3, #0
 8002176:	d1e9      	bne.n	800214c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	f003 0304 	and.w	r3, r3, #4
 8002180:	2b00      	cmp	r3, #0
 8002182:	f000 80a6 	beq.w	80022d2 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002186:	2300      	movs	r3, #0
 8002188:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800218a:	4b97      	ldr	r3, [pc, #604]	; (80023e8 <HAL_RCC_OscConfig+0x4f4>)
 800218c:	69db      	ldr	r3, [r3, #28]
 800218e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002192:	2b00      	cmp	r3, #0
 8002194:	d10d      	bne.n	80021b2 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002196:	4b94      	ldr	r3, [pc, #592]	; (80023e8 <HAL_RCC_OscConfig+0x4f4>)
 8002198:	69db      	ldr	r3, [r3, #28]
 800219a:	4a93      	ldr	r2, [pc, #588]	; (80023e8 <HAL_RCC_OscConfig+0x4f4>)
 800219c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80021a0:	61d3      	str	r3, [r2, #28]
 80021a2:	4b91      	ldr	r3, [pc, #580]	; (80023e8 <HAL_RCC_OscConfig+0x4f4>)
 80021a4:	69db      	ldr	r3, [r3, #28]
 80021a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021aa:	60bb      	str	r3, [r7, #8]
 80021ac:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80021ae:	2301      	movs	r3, #1
 80021b0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80021b2:	4b8e      	ldr	r3, [pc, #568]	; (80023ec <HAL_RCC_OscConfig+0x4f8>)
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d118      	bne.n	80021f0 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80021be:	4b8b      	ldr	r3, [pc, #556]	; (80023ec <HAL_RCC_OscConfig+0x4f8>)
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	4a8a      	ldr	r2, [pc, #552]	; (80023ec <HAL_RCC_OscConfig+0x4f8>)
 80021c4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80021c8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80021ca:	f7fe ffb5 	bl	8001138 <HAL_GetTick>
 80021ce:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80021d0:	e008      	b.n	80021e4 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80021d2:	f7fe ffb1 	bl	8001138 <HAL_GetTick>
 80021d6:	4602      	mov	r2, r0
 80021d8:	693b      	ldr	r3, [r7, #16]
 80021da:	1ad3      	subs	r3, r2, r3
 80021dc:	2b64      	cmp	r3, #100	; 0x64
 80021de:	d901      	bls.n	80021e4 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80021e0:	2303      	movs	r3, #3
 80021e2:	e0fd      	b.n	80023e0 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80021e4:	4b81      	ldr	r3, [pc, #516]	; (80023ec <HAL_RCC_OscConfig+0x4f8>)
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d0f0      	beq.n	80021d2 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	68db      	ldr	r3, [r3, #12]
 80021f4:	2b01      	cmp	r3, #1
 80021f6:	d106      	bne.n	8002206 <HAL_RCC_OscConfig+0x312>
 80021f8:	4b7b      	ldr	r3, [pc, #492]	; (80023e8 <HAL_RCC_OscConfig+0x4f4>)
 80021fa:	6a1b      	ldr	r3, [r3, #32]
 80021fc:	4a7a      	ldr	r2, [pc, #488]	; (80023e8 <HAL_RCC_OscConfig+0x4f4>)
 80021fe:	f043 0301 	orr.w	r3, r3, #1
 8002202:	6213      	str	r3, [r2, #32]
 8002204:	e02d      	b.n	8002262 <HAL_RCC_OscConfig+0x36e>
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	68db      	ldr	r3, [r3, #12]
 800220a:	2b00      	cmp	r3, #0
 800220c:	d10c      	bne.n	8002228 <HAL_RCC_OscConfig+0x334>
 800220e:	4b76      	ldr	r3, [pc, #472]	; (80023e8 <HAL_RCC_OscConfig+0x4f4>)
 8002210:	6a1b      	ldr	r3, [r3, #32]
 8002212:	4a75      	ldr	r2, [pc, #468]	; (80023e8 <HAL_RCC_OscConfig+0x4f4>)
 8002214:	f023 0301 	bic.w	r3, r3, #1
 8002218:	6213      	str	r3, [r2, #32]
 800221a:	4b73      	ldr	r3, [pc, #460]	; (80023e8 <HAL_RCC_OscConfig+0x4f4>)
 800221c:	6a1b      	ldr	r3, [r3, #32]
 800221e:	4a72      	ldr	r2, [pc, #456]	; (80023e8 <HAL_RCC_OscConfig+0x4f4>)
 8002220:	f023 0304 	bic.w	r3, r3, #4
 8002224:	6213      	str	r3, [r2, #32]
 8002226:	e01c      	b.n	8002262 <HAL_RCC_OscConfig+0x36e>
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	68db      	ldr	r3, [r3, #12]
 800222c:	2b05      	cmp	r3, #5
 800222e:	d10c      	bne.n	800224a <HAL_RCC_OscConfig+0x356>
 8002230:	4b6d      	ldr	r3, [pc, #436]	; (80023e8 <HAL_RCC_OscConfig+0x4f4>)
 8002232:	6a1b      	ldr	r3, [r3, #32]
 8002234:	4a6c      	ldr	r2, [pc, #432]	; (80023e8 <HAL_RCC_OscConfig+0x4f4>)
 8002236:	f043 0304 	orr.w	r3, r3, #4
 800223a:	6213      	str	r3, [r2, #32]
 800223c:	4b6a      	ldr	r3, [pc, #424]	; (80023e8 <HAL_RCC_OscConfig+0x4f4>)
 800223e:	6a1b      	ldr	r3, [r3, #32]
 8002240:	4a69      	ldr	r2, [pc, #420]	; (80023e8 <HAL_RCC_OscConfig+0x4f4>)
 8002242:	f043 0301 	orr.w	r3, r3, #1
 8002246:	6213      	str	r3, [r2, #32]
 8002248:	e00b      	b.n	8002262 <HAL_RCC_OscConfig+0x36e>
 800224a:	4b67      	ldr	r3, [pc, #412]	; (80023e8 <HAL_RCC_OscConfig+0x4f4>)
 800224c:	6a1b      	ldr	r3, [r3, #32]
 800224e:	4a66      	ldr	r2, [pc, #408]	; (80023e8 <HAL_RCC_OscConfig+0x4f4>)
 8002250:	f023 0301 	bic.w	r3, r3, #1
 8002254:	6213      	str	r3, [r2, #32]
 8002256:	4b64      	ldr	r3, [pc, #400]	; (80023e8 <HAL_RCC_OscConfig+0x4f4>)
 8002258:	6a1b      	ldr	r3, [r3, #32]
 800225a:	4a63      	ldr	r2, [pc, #396]	; (80023e8 <HAL_RCC_OscConfig+0x4f4>)
 800225c:	f023 0304 	bic.w	r3, r3, #4
 8002260:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	68db      	ldr	r3, [r3, #12]
 8002266:	2b00      	cmp	r3, #0
 8002268:	d015      	beq.n	8002296 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800226a:	f7fe ff65 	bl	8001138 <HAL_GetTick>
 800226e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002270:	e00a      	b.n	8002288 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002272:	f7fe ff61 	bl	8001138 <HAL_GetTick>
 8002276:	4602      	mov	r2, r0
 8002278:	693b      	ldr	r3, [r7, #16]
 800227a:	1ad3      	subs	r3, r2, r3
 800227c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002280:	4293      	cmp	r3, r2
 8002282:	d901      	bls.n	8002288 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002284:	2303      	movs	r3, #3
 8002286:	e0ab      	b.n	80023e0 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002288:	4b57      	ldr	r3, [pc, #348]	; (80023e8 <HAL_RCC_OscConfig+0x4f4>)
 800228a:	6a1b      	ldr	r3, [r3, #32]
 800228c:	f003 0302 	and.w	r3, r3, #2
 8002290:	2b00      	cmp	r3, #0
 8002292:	d0ee      	beq.n	8002272 <HAL_RCC_OscConfig+0x37e>
 8002294:	e014      	b.n	80022c0 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002296:	f7fe ff4f 	bl	8001138 <HAL_GetTick>
 800229a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800229c:	e00a      	b.n	80022b4 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800229e:	f7fe ff4b 	bl	8001138 <HAL_GetTick>
 80022a2:	4602      	mov	r2, r0
 80022a4:	693b      	ldr	r3, [r7, #16]
 80022a6:	1ad3      	subs	r3, r2, r3
 80022a8:	f241 3288 	movw	r2, #5000	; 0x1388
 80022ac:	4293      	cmp	r3, r2
 80022ae:	d901      	bls.n	80022b4 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80022b0:	2303      	movs	r3, #3
 80022b2:	e095      	b.n	80023e0 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80022b4:	4b4c      	ldr	r3, [pc, #304]	; (80023e8 <HAL_RCC_OscConfig+0x4f4>)
 80022b6:	6a1b      	ldr	r3, [r3, #32]
 80022b8:	f003 0302 	and.w	r3, r3, #2
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d1ee      	bne.n	800229e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80022c0:	7dfb      	ldrb	r3, [r7, #23]
 80022c2:	2b01      	cmp	r3, #1
 80022c4:	d105      	bne.n	80022d2 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80022c6:	4b48      	ldr	r3, [pc, #288]	; (80023e8 <HAL_RCC_OscConfig+0x4f4>)
 80022c8:	69db      	ldr	r3, [r3, #28]
 80022ca:	4a47      	ldr	r2, [pc, #284]	; (80023e8 <HAL_RCC_OscConfig+0x4f4>)
 80022cc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80022d0:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	69db      	ldr	r3, [r3, #28]
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	f000 8081 	beq.w	80023de <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80022dc:	4b42      	ldr	r3, [pc, #264]	; (80023e8 <HAL_RCC_OscConfig+0x4f4>)
 80022de:	685b      	ldr	r3, [r3, #4]
 80022e0:	f003 030c 	and.w	r3, r3, #12
 80022e4:	2b08      	cmp	r3, #8
 80022e6:	d061      	beq.n	80023ac <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	69db      	ldr	r3, [r3, #28]
 80022ec:	2b02      	cmp	r3, #2
 80022ee:	d146      	bne.n	800237e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80022f0:	4b3f      	ldr	r3, [pc, #252]	; (80023f0 <HAL_RCC_OscConfig+0x4fc>)
 80022f2:	2200      	movs	r2, #0
 80022f4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022f6:	f7fe ff1f 	bl	8001138 <HAL_GetTick>
 80022fa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80022fc:	e008      	b.n	8002310 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80022fe:	f7fe ff1b 	bl	8001138 <HAL_GetTick>
 8002302:	4602      	mov	r2, r0
 8002304:	693b      	ldr	r3, [r7, #16]
 8002306:	1ad3      	subs	r3, r2, r3
 8002308:	2b02      	cmp	r3, #2
 800230a:	d901      	bls.n	8002310 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800230c:	2303      	movs	r3, #3
 800230e:	e067      	b.n	80023e0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002310:	4b35      	ldr	r3, [pc, #212]	; (80023e8 <HAL_RCC_OscConfig+0x4f4>)
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002318:	2b00      	cmp	r3, #0
 800231a:	d1f0      	bne.n	80022fe <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	6a1b      	ldr	r3, [r3, #32]
 8002320:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002324:	d108      	bne.n	8002338 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002326:	4b30      	ldr	r3, [pc, #192]	; (80023e8 <HAL_RCC_OscConfig+0x4f4>)
 8002328:	685b      	ldr	r3, [r3, #4]
 800232a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	689b      	ldr	r3, [r3, #8]
 8002332:	492d      	ldr	r1, [pc, #180]	; (80023e8 <HAL_RCC_OscConfig+0x4f4>)
 8002334:	4313      	orrs	r3, r2
 8002336:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002338:	4b2b      	ldr	r3, [pc, #172]	; (80023e8 <HAL_RCC_OscConfig+0x4f4>)
 800233a:	685b      	ldr	r3, [r3, #4]
 800233c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	6a19      	ldr	r1, [r3, #32]
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002348:	430b      	orrs	r3, r1
 800234a:	4927      	ldr	r1, [pc, #156]	; (80023e8 <HAL_RCC_OscConfig+0x4f4>)
 800234c:	4313      	orrs	r3, r2
 800234e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002350:	4b27      	ldr	r3, [pc, #156]	; (80023f0 <HAL_RCC_OscConfig+0x4fc>)
 8002352:	2201      	movs	r2, #1
 8002354:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002356:	f7fe feef 	bl	8001138 <HAL_GetTick>
 800235a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800235c:	e008      	b.n	8002370 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800235e:	f7fe feeb 	bl	8001138 <HAL_GetTick>
 8002362:	4602      	mov	r2, r0
 8002364:	693b      	ldr	r3, [r7, #16]
 8002366:	1ad3      	subs	r3, r2, r3
 8002368:	2b02      	cmp	r3, #2
 800236a:	d901      	bls.n	8002370 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800236c:	2303      	movs	r3, #3
 800236e:	e037      	b.n	80023e0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002370:	4b1d      	ldr	r3, [pc, #116]	; (80023e8 <HAL_RCC_OscConfig+0x4f4>)
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002378:	2b00      	cmp	r3, #0
 800237a:	d0f0      	beq.n	800235e <HAL_RCC_OscConfig+0x46a>
 800237c:	e02f      	b.n	80023de <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800237e:	4b1c      	ldr	r3, [pc, #112]	; (80023f0 <HAL_RCC_OscConfig+0x4fc>)
 8002380:	2200      	movs	r2, #0
 8002382:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002384:	f7fe fed8 	bl	8001138 <HAL_GetTick>
 8002388:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800238a:	e008      	b.n	800239e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800238c:	f7fe fed4 	bl	8001138 <HAL_GetTick>
 8002390:	4602      	mov	r2, r0
 8002392:	693b      	ldr	r3, [r7, #16]
 8002394:	1ad3      	subs	r3, r2, r3
 8002396:	2b02      	cmp	r3, #2
 8002398:	d901      	bls.n	800239e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800239a:	2303      	movs	r3, #3
 800239c:	e020      	b.n	80023e0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800239e:	4b12      	ldr	r3, [pc, #72]	; (80023e8 <HAL_RCC_OscConfig+0x4f4>)
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d1f0      	bne.n	800238c <HAL_RCC_OscConfig+0x498>
 80023aa:	e018      	b.n	80023de <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	69db      	ldr	r3, [r3, #28]
 80023b0:	2b01      	cmp	r3, #1
 80023b2:	d101      	bne.n	80023b8 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 80023b4:	2301      	movs	r3, #1
 80023b6:	e013      	b.n	80023e0 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80023b8:	4b0b      	ldr	r3, [pc, #44]	; (80023e8 <HAL_RCC_OscConfig+0x4f4>)
 80023ba:	685b      	ldr	r3, [r3, #4]
 80023bc:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	6a1b      	ldr	r3, [r3, #32]
 80023c8:	429a      	cmp	r2, r3
 80023ca:	d106      	bne.n	80023da <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80023d6:	429a      	cmp	r2, r3
 80023d8:	d001      	beq.n	80023de <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 80023da:	2301      	movs	r3, #1
 80023dc:	e000      	b.n	80023e0 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 80023de:	2300      	movs	r3, #0
}
 80023e0:	4618      	mov	r0, r3
 80023e2:	3718      	adds	r7, #24
 80023e4:	46bd      	mov	sp, r7
 80023e6:	bd80      	pop	{r7, pc}
 80023e8:	40021000 	.word	0x40021000
 80023ec:	40007000 	.word	0x40007000
 80023f0:	42420060 	.word	0x42420060

080023f4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80023f4:	b580      	push	{r7, lr}
 80023f6:	b084      	sub	sp, #16
 80023f8:	af00      	add	r7, sp, #0
 80023fa:	6078      	str	r0, [r7, #4]
 80023fc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	2b00      	cmp	r3, #0
 8002402:	d101      	bne.n	8002408 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002404:	2301      	movs	r3, #1
 8002406:	e0d0      	b.n	80025aa <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002408:	4b6a      	ldr	r3, [pc, #424]	; (80025b4 <HAL_RCC_ClockConfig+0x1c0>)
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	f003 0307 	and.w	r3, r3, #7
 8002410:	683a      	ldr	r2, [r7, #0]
 8002412:	429a      	cmp	r2, r3
 8002414:	d910      	bls.n	8002438 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002416:	4b67      	ldr	r3, [pc, #412]	; (80025b4 <HAL_RCC_ClockConfig+0x1c0>)
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	f023 0207 	bic.w	r2, r3, #7
 800241e:	4965      	ldr	r1, [pc, #404]	; (80025b4 <HAL_RCC_ClockConfig+0x1c0>)
 8002420:	683b      	ldr	r3, [r7, #0]
 8002422:	4313      	orrs	r3, r2
 8002424:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002426:	4b63      	ldr	r3, [pc, #396]	; (80025b4 <HAL_RCC_ClockConfig+0x1c0>)
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	f003 0307 	and.w	r3, r3, #7
 800242e:	683a      	ldr	r2, [r7, #0]
 8002430:	429a      	cmp	r2, r3
 8002432:	d001      	beq.n	8002438 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002434:	2301      	movs	r3, #1
 8002436:	e0b8      	b.n	80025aa <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	f003 0302 	and.w	r3, r3, #2
 8002440:	2b00      	cmp	r3, #0
 8002442:	d020      	beq.n	8002486 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	f003 0304 	and.w	r3, r3, #4
 800244c:	2b00      	cmp	r3, #0
 800244e:	d005      	beq.n	800245c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002450:	4b59      	ldr	r3, [pc, #356]	; (80025b8 <HAL_RCC_ClockConfig+0x1c4>)
 8002452:	685b      	ldr	r3, [r3, #4]
 8002454:	4a58      	ldr	r2, [pc, #352]	; (80025b8 <HAL_RCC_ClockConfig+0x1c4>)
 8002456:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800245a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	f003 0308 	and.w	r3, r3, #8
 8002464:	2b00      	cmp	r3, #0
 8002466:	d005      	beq.n	8002474 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002468:	4b53      	ldr	r3, [pc, #332]	; (80025b8 <HAL_RCC_ClockConfig+0x1c4>)
 800246a:	685b      	ldr	r3, [r3, #4]
 800246c:	4a52      	ldr	r2, [pc, #328]	; (80025b8 <HAL_RCC_ClockConfig+0x1c4>)
 800246e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002472:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002474:	4b50      	ldr	r3, [pc, #320]	; (80025b8 <HAL_RCC_ClockConfig+0x1c4>)
 8002476:	685b      	ldr	r3, [r3, #4]
 8002478:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	689b      	ldr	r3, [r3, #8]
 8002480:	494d      	ldr	r1, [pc, #308]	; (80025b8 <HAL_RCC_ClockConfig+0x1c4>)
 8002482:	4313      	orrs	r3, r2
 8002484:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	f003 0301 	and.w	r3, r3, #1
 800248e:	2b00      	cmp	r3, #0
 8002490:	d040      	beq.n	8002514 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	685b      	ldr	r3, [r3, #4]
 8002496:	2b01      	cmp	r3, #1
 8002498:	d107      	bne.n	80024aa <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800249a:	4b47      	ldr	r3, [pc, #284]	; (80025b8 <HAL_RCC_ClockConfig+0x1c4>)
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d115      	bne.n	80024d2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80024a6:	2301      	movs	r3, #1
 80024a8:	e07f      	b.n	80025aa <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	685b      	ldr	r3, [r3, #4]
 80024ae:	2b02      	cmp	r3, #2
 80024b0:	d107      	bne.n	80024c2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80024b2:	4b41      	ldr	r3, [pc, #260]	; (80025b8 <HAL_RCC_ClockConfig+0x1c4>)
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d109      	bne.n	80024d2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80024be:	2301      	movs	r3, #1
 80024c0:	e073      	b.n	80025aa <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80024c2:	4b3d      	ldr	r3, [pc, #244]	; (80025b8 <HAL_RCC_ClockConfig+0x1c4>)
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	f003 0302 	and.w	r3, r3, #2
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d101      	bne.n	80024d2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80024ce:	2301      	movs	r3, #1
 80024d0:	e06b      	b.n	80025aa <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80024d2:	4b39      	ldr	r3, [pc, #228]	; (80025b8 <HAL_RCC_ClockConfig+0x1c4>)
 80024d4:	685b      	ldr	r3, [r3, #4]
 80024d6:	f023 0203 	bic.w	r2, r3, #3
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	685b      	ldr	r3, [r3, #4]
 80024de:	4936      	ldr	r1, [pc, #216]	; (80025b8 <HAL_RCC_ClockConfig+0x1c4>)
 80024e0:	4313      	orrs	r3, r2
 80024e2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80024e4:	f7fe fe28 	bl	8001138 <HAL_GetTick>
 80024e8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80024ea:	e00a      	b.n	8002502 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80024ec:	f7fe fe24 	bl	8001138 <HAL_GetTick>
 80024f0:	4602      	mov	r2, r0
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	1ad3      	subs	r3, r2, r3
 80024f6:	f241 3288 	movw	r2, #5000	; 0x1388
 80024fa:	4293      	cmp	r3, r2
 80024fc:	d901      	bls.n	8002502 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80024fe:	2303      	movs	r3, #3
 8002500:	e053      	b.n	80025aa <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002502:	4b2d      	ldr	r3, [pc, #180]	; (80025b8 <HAL_RCC_ClockConfig+0x1c4>)
 8002504:	685b      	ldr	r3, [r3, #4]
 8002506:	f003 020c 	and.w	r2, r3, #12
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	685b      	ldr	r3, [r3, #4]
 800250e:	009b      	lsls	r3, r3, #2
 8002510:	429a      	cmp	r2, r3
 8002512:	d1eb      	bne.n	80024ec <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002514:	4b27      	ldr	r3, [pc, #156]	; (80025b4 <HAL_RCC_ClockConfig+0x1c0>)
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	f003 0307 	and.w	r3, r3, #7
 800251c:	683a      	ldr	r2, [r7, #0]
 800251e:	429a      	cmp	r2, r3
 8002520:	d210      	bcs.n	8002544 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002522:	4b24      	ldr	r3, [pc, #144]	; (80025b4 <HAL_RCC_ClockConfig+0x1c0>)
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	f023 0207 	bic.w	r2, r3, #7
 800252a:	4922      	ldr	r1, [pc, #136]	; (80025b4 <HAL_RCC_ClockConfig+0x1c0>)
 800252c:	683b      	ldr	r3, [r7, #0]
 800252e:	4313      	orrs	r3, r2
 8002530:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002532:	4b20      	ldr	r3, [pc, #128]	; (80025b4 <HAL_RCC_ClockConfig+0x1c0>)
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	f003 0307 	and.w	r3, r3, #7
 800253a:	683a      	ldr	r2, [r7, #0]
 800253c:	429a      	cmp	r2, r3
 800253e:	d001      	beq.n	8002544 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002540:	2301      	movs	r3, #1
 8002542:	e032      	b.n	80025aa <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	f003 0304 	and.w	r3, r3, #4
 800254c:	2b00      	cmp	r3, #0
 800254e:	d008      	beq.n	8002562 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002550:	4b19      	ldr	r3, [pc, #100]	; (80025b8 <HAL_RCC_ClockConfig+0x1c4>)
 8002552:	685b      	ldr	r3, [r3, #4]
 8002554:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	68db      	ldr	r3, [r3, #12]
 800255c:	4916      	ldr	r1, [pc, #88]	; (80025b8 <HAL_RCC_ClockConfig+0x1c4>)
 800255e:	4313      	orrs	r3, r2
 8002560:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	f003 0308 	and.w	r3, r3, #8
 800256a:	2b00      	cmp	r3, #0
 800256c:	d009      	beq.n	8002582 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800256e:	4b12      	ldr	r3, [pc, #72]	; (80025b8 <HAL_RCC_ClockConfig+0x1c4>)
 8002570:	685b      	ldr	r3, [r3, #4]
 8002572:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	691b      	ldr	r3, [r3, #16]
 800257a:	00db      	lsls	r3, r3, #3
 800257c:	490e      	ldr	r1, [pc, #56]	; (80025b8 <HAL_RCC_ClockConfig+0x1c4>)
 800257e:	4313      	orrs	r3, r2
 8002580:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002582:	f000 f821 	bl	80025c8 <HAL_RCC_GetSysClockFreq>
 8002586:	4601      	mov	r1, r0
 8002588:	4b0b      	ldr	r3, [pc, #44]	; (80025b8 <HAL_RCC_ClockConfig+0x1c4>)
 800258a:	685b      	ldr	r3, [r3, #4]
 800258c:	091b      	lsrs	r3, r3, #4
 800258e:	f003 030f 	and.w	r3, r3, #15
 8002592:	4a0a      	ldr	r2, [pc, #40]	; (80025bc <HAL_RCC_ClockConfig+0x1c8>)
 8002594:	5cd3      	ldrb	r3, [r2, r3]
 8002596:	fa21 f303 	lsr.w	r3, r1, r3
 800259a:	4a09      	ldr	r2, [pc, #36]	; (80025c0 <HAL_RCC_ClockConfig+0x1cc>)
 800259c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800259e:	4b09      	ldr	r3, [pc, #36]	; (80025c4 <HAL_RCC_ClockConfig+0x1d0>)
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	4618      	mov	r0, r3
 80025a4:	f7fe fd86 	bl	80010b4 <HAL_InitTick>

  return HAL_OK;
 80025a8:	2300      	movs	r3, #0
}
 80025aa:	4618      	mov	r0, r3
 80025ac:	3710      	adds	r7, #16
 80025ae:	46bd      	mov	sp, r7
 80025b0:	bd80      	pop	{r7, pc}
 80025b2:	bf00      	nop
 80025b4:	40022000 	.word	0x40022000
 80025b8:	40021000 	.word	0x40021000
 80025bc:	08004ea8 	.word	0x08004ea8
 80025c0:	20000008 	.word	0x20000008
 80025c4:	2000000c 	.word	0x2000000c

080025c8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80025c8:	b490      	push	{r4, r7}
 80025ca:	b08a      	sub	sp, #40	; 0x28
 80025cc:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80025ce:	4b2a      	ldr	r3, [pc, #168]	; (8002678 <HAL_RCC_GetSysClockFreq+0xb0>)
 80025d0:	1d3c      	adds	r4, r7, #4
 80025d2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80025d4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80025d8:	4b28      	ldr	r3, [pc, #160]	; (800267c <HAL_RCC_GetSysClockFreq+0xb4>)
 80025da:	881b      	ldrh	r3, [r3, #0]
 80025dc:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80025de:	2300      	movs	r3, #0
 80025e0:	61fb      	str	r3, [r7, #28]
 80025e2:	2300      	movs	r3, #0
 80025e4:	61bb      	str	r3, [r7, #24]
 80025e6:	2300      	movs	r3, #0
 80025e8:	627b      	str	r3, [r7, #36]	; 0x24
 80025ea:	2300      	movs	r3, #0
 80025ec:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80025ee:	2300      	movs	r3, #0
 80025f0:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80025f2:	4b23      	ldr	r3, [pc, #140]	; (8002680 <HAL_RCC_GetSysClockFreq+0xb8>)
 80025f4:	685b      	ldr	r3, [r3, #4]
 80025f6:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80025f8:	69fb      	ldr	r3, [r7, #28]
 80025fa:	f003 030c 	and.w	r3, r3, #12
 80025fe:	2b04      	cmp	r3, #4
 8002600:	d002      	beq.n	8002608 <HAL_RCC_GetSysClockFreq+0x40>
 8002602:	2b08      	cmp	r3, #8
 8002604:	d003      	beq.n	800260e <HAL_RCC_GetSysClockFreq+0x46>
 8002606:	e02d      	b.n	8002664 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002608:	4b1e      	ldr	r3, [pc, #120]	; (8002684 <HAL_RCC_GetSysClockFreq+0xbc>)
 800260a:	623b      	str	r3, [r7, #32]
      break;
 800260c:	e02d      	b.n	800266a <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800260e:	69fb      	ldr	r3, [r7, #28]
 8002610:	0c9b      	lsrs	r3, r3, #18
 8002612:	f003 030f 	and.w	r3, r3, #15
 8002616:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800261a:	4413      	add	r3, r2
 800261c:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8002620:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002622:	69fb      	ldr	r3, [r7, #28]
 8002624:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002628:	2b00      	cmp	r3, #0
 800262a:	d013      	beq.n	8002654 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800262c:	4b14      	ldr	r3, [pc, #80]	; (8002680 <HAL_RCC_GetSysClockFreq+0xb8>)
 800262e:	685b      	ldr	r3, [r3, #4]
 8002630:	0c5b      	lsrs	r3, r3, #17
 8002632:	f003 0301 	and.w	r3, r3, #1
 8002636:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800263a:	4413      	add	r3, r2
 800263c:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002640:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002642:	697b      	ldr	r3, [r7, #20]
 8002644:	4a0f      	ldr	r2, [pc, #60]	; (8002684 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002646:	fb02 f203 	mul.w	r2, r2, r3
 800264a:	69bb      	ldr	r3, [r7, #24]
 800264c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002650:	627b      	str	r3, [r7, #36]	; 0x24
 8002652:	e004      	b.n	800265e <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002654:	697b      	ldr	r3, [r7, #20]
 8002656:	4a0c      	ldr	r2, [pc, #48]	; (8002688 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002658:	fb02 f303 	mul.w	r3, r2, r3
 800265c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 800265e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002660:	623b      	str	r3, [r7, #32]
      break;
 8002662:	e002      	b.n	800266a <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002664:	4b07      	ldr	r3, [pc, #28]	; (8002684 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002666:	623b      	str	r3, [r7, #32]
      break;
 8002668:	bf00      	nop
    }
  }
  return sysclockfreq;
 800266a:	6a3b      	ldr	r3, [r7, #32]
}
 800266c:	4618      	mov	r0, r3
 800266e:	3728      	adds	r7, #40	; 0x28
 8002670:	46bd      	mov	sp, r7
 8002672:	bc90      	pop	{r4, r7}
 8002674:	4770      	bx	lr
 8002676:	bf00      	nop
 8002678:	08004e80 	.word	0x08004e80
 800267c:	08004e90 	.word	0x08004e90
 8002680:	40021000 	.word	0x40021000
 8002684:	007a1200 	.word	0x007a1200
 8002688:	003d0900 	.word	0x003d0900

0800268c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800268c:	b480      	push	{r7}
 800268e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002690:	4b02      	ldr	r3, [pc, #8]	; (800269c <HAL_RCC_GetHCLKFreq+0x10>)
 8002692:	681b      	ldr	r3, [r3, #0]
}
 8002694:	4618      	mov	r0, r3
 8002696:	46bd      	mov	sp, r7
 8002698:	bc80      	pop	{r7}
 800269a:	4770      	bx	lr
 800269c:	20000008 	.word	0x20000008

080026a0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80026a0:	b580      	push	{r7, lr}
 80026a2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80026a4:	f7ff fff2 	bl	800268c <HAL_RCC_GetHCLKFreq>
 80026a8:	4601      	mov	r1, r0
 80026aa:	4b05      	ldr	r3, [pc, #20]	; (80026c0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80026ac:	685b      	ldr	r3, [r3, #4]
 80026ae:	0a1b      	lsrs	r3, r3, #8
 80026b0:	f003 0307 	and.w	r3, r3, #7
 80026b4:	4a03      	ldr	r2, [pc, #12]	; (80026c4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80026b6:	5cd3      	ldrb	r3, [r2, r3]
 80026b8:	fa21 f303 	lsr.w	r3, r1, r3
}
 80026bc:	4618      	mov	r0, r3
 80026be:	bd80      	pop	{r7, pc}
 80026c0:	40021000 	.word	0x40021000
 80026c4:	08004eb8 	.word	0x08004eb8

080026c8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80026c8:	b580      	push	{r7, lr}
 80026ca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80026cc:	f7ff ffde 	bl	800268c <HAL_RCC_GetHCLKFreq>
 80026d0:	4601      	mov	r1, r0
 80026d2:	4b05      	ldr	r3, [pc, #20]	; (80026e8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80026d4:	685b      	ldr	r3, [r3, #4]
 80026d6:	0adb      	lsrs	r3, r3, #11
 80026d8:	f003 0307 	and.w	r3, r3, #7
 80026dc:	4a03      	ldr	r2, [pc, #12]	; (80026ec <HAL_RCC_GetPCLK2Freq+0x24>)
 80026de:	5cd3      	ldrb	r3, [r2, r3]
 80026e0:	fa21 f303 	lsr.w	r3, r1, r3
}
 80026e4:	4618      	mov	r0, r3
 80026e6:	bd80      	pop	{r7, pc}
 80026e8:	40021000 	.word	0x40021000
 80026ec:	08004eb8 	.word	0x08004eb8

080026f0 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80026f0:	b480      	push	{r7}
 80026f2:	b085      	sub	sp, #20
 80026f4:	af00      	add	r7, sp, #0
 80026f6:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80026f8:	4b0a      	ldr	r3, [pc, #40]	; (8002724 <RCC_Delay+0x34>)
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	4a0a      	ldr	r2, [pc, #40]	; (8002728 <RCC_Delay+0x38>)
 80026fe:	fba2 2303 	umull	r2, r3, r2, r3
 8002702:	0a5b      	lsrs	r3, r3, #9
 8002704:	687a      	ldr	r2, [r7, #4]
 8002706:	fb02 f303 	mul.w	r3, r2, r3
 800270a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800270c:	bf00      	nop
  }
  while (Delay --);
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	1e5a      	subs	r2, r3, #1
 8002712:	60fa      	str	r2, [r7, #12]
 8002714:	2b00      	cmp	r3, #0
 8002716:	d1f9      	bne.n	800270c <RCC_Delay+0x1c>
}
 8002718:	bf00      	nop
 800271a:	3714      	adds	r7, #20
 800271c:	46bd      	mov	sp, r7
 800271e:	bc80      	pop	{r7}
 8002720:	4770      	bx	lr
 8002722:	bf00      	nop
 8002724:	20000008 	.word	0x20000008
 8002728:	10624dd3 	.word	0x10624dd3

0800272c <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800272c:	b580      	push	{r7, lr}
 800272e:	b086      	sub	sp, #24
 8002730:	af00      	add	r7, sp, #0
 8002732:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8002734:	2300      	movs	r3, #0
 8002736:	613b      	str	r3, [r7, #16]
 8002738:	2300      	movs	r3, #0
 800273a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	f003 0301 	and.w	r3, r3, #1
 8002744:	2b00      	cmp	r3, #0
 8002746:	d07d      	beq.n	8002844 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 8002748:	2300      	movs	r3, #0
 800274a:	75fb      	strb	r3, [r7, #23]

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800274c:	4b4f      	ldr	r3, [pc, #316]	; (800288c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800274e:	69db      	ldr	r3, [r3, #28]
 8002750:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002754:	2b00      	cmp	r3, #0
 8002756:	d10d      	bne.n	8002774 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002758:	4b4c      	ldr	r3, [pc, #304]	; (800288c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800275a:	69db      	ldr	r3, [r3, #28]
 800275c:	4a4b      	ldr	r2, [pc, #300]	; (800288c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800275e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002762:	61d3      	str	r3, [r2, #28]
 8002764:	4b49      	ldr	r3, [pc, #292]	; (800288c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002766:	69db      	ldr	r3, [r3, #28]
 8002768:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800276c:	60bb      	str	r3, [r7, #8]
 800276e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002770:	2301      	movs	r3, #1
 8002772:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002774:	4b46      	ldr	r3, [pc, #280]	; (8002890 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800277c:	2b00      	cmp	r3, #0
 800277e:	d118      	bne.n	80027b2 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002780:	4b43      	ldr	r3, [pc, #268]	; (8002890 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	4a42      	ldr	r2, [pc, #264]	; (8002890 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002786:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800278a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800278c:	f7fe fcd4 	bl	8001138 <HAL_GetTick>
 8002790:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002792:	e008      	b.n	80027a6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002794:	f7fe fcd0 	bl	8001138 <HAL_GetTick>
 8002798:	4602      	mov	r2, r0
 800279a:	693b      	ldr	r3, [r7, #16]
 800279c:	1ad3      	subs	r3, r2, r3
 800279e:	2b64      	cmp	r3, #100	; 0x64
 80027a0:	d901      	bls.n	80027a6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 80027a2:	2303      	movs	r3, #3
 80027a4:	e06d      	b.n	8002882 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80027a6:	4b3a      	ldr	r3, [pc, #232]	; (8002890 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d0f0      	beq.n	8002794 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80027b2:	4b36      	ldr	r3, [pc, #216]	; (800288c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80027b4:	6a1b      	ldr	r3, [r3, #32]
 80027b6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80027ba:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d02e      	beq.n	8002820 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	685b      	ldr	r3, [r3, #4]
 80027c6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80027ca:	68fa      	ldr	r2, [r7, #12]
 80027cc:	429a      	cmp	r2, r3
 80027ce:	d027      	beq.n	8002820 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80027d0:	4b2e      	ldr	r3, [pc, #184]	; (800288c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80027d2:	6a1b      	ldr	r3, [r3, #32]
 80027d4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80027d8:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80027da:	4b2e      	ldr	r3, [pc, #184]	; (8002894 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80027dc:	2201      	movs	r2, #1
 80027de:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80027e0:	4b2c      	ldr	r3, [pc, #176]	; (8002894 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80027e2:	2200      	movs	r2, #0
 80027e4:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80027e6:	4a29      	ldr	r2, [pc, #164]	; (800288c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	f003 0301 	and.w	r3, r3, #1
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d014      	beq.n	8002820 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027f6:	f7fe fc9f 	bl	8001138 <HAL_GetTick>
 80027fa:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80027fc:	e00a      	b.n	8002814 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80027fe:	f7fe fc9b 	bl	8001138 <HAL_GetTick>
 8002802:	4602      	mov	r2, r0
 8002804:	693b      	ldr	r3, [r7, #16]
 8002806:	1ad3      	subs	r3, r2, r3
 8002808:	f241 3288 	movw	r2, #5000	; 0x1388
 800280c:	4293      	cmp	r3, r2
 800280e:	d901      	bls.n	8002814 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8002810:	2303      	movs	r3, #3
 8002812:	e036      	b.n	8002882 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002814:	4b1d      	ldr	r3, [pc, #116]	; (800288c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002816:	6a1b      	ldr	r3, [r3, #32]
 8002818:	f003 0302 	and.w	r3, r3, #2
 800281c:	2b00      	cmp	r3, #0
 800281e:	d0ee      	beq.n	80027fe <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002820:	4b1a      	ldr	r3, [pc, #104]	; (800288c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002822:	6a1b      	ldr	r3, [r3, #32]
 8002824:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	685b      	ldr	r3, [r3, #4]
 800282c:	4917      	ldr	r1, [pc, #92]	; (800288c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800282e:	4313      	orrs	r3, r2
 8002830:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002832:	7dfb      	ldrb	r3, [r7, #23]
 8002834:	2b01      	cmp	r3, #1
 8002836:	d105      	bne.n	8002844 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002838:	4b14      	ldr	r3, [pc, #80]	; (800288c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800283a:	69db      	ldr	r3, [r3, #28]
 800283c:	4a13      	ldr	r2, [pc, #76]	; (800288c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800283e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002842:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	f003 0302 	and.w	r3, r3, #2
 800284c:	2b00      	cmp	r3, #0
 800284e:	d008      	beq.n	8002862 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002850:	4b0e      	ldr	r3, [pc, #56]	; (800288c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002852:	685b      	ldr	r3, [r3, #4]
 8002854:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	689b      	ldr	r3, [r3, #8]
 800285c:	490b      	ldr	r1, [pc, #44]	; (800288c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800285e:	4313      	orrs	r3, r2
 8002860:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	f003 0310 	and.w	r3, r3, #16
 800286a:	2b00      	cmp	r3, #0
 800286c:	d008      	beq.n	8002880 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800286e:	4b07      	ldr	r3, [pc, #28]	; (800288c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002870:	685b      	ldr	r3, [r3, #4]
 8002872:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	68db      	ldr	r3, [r3, #12]
 800287a:	4904      	ldr	r1, [pc, #16]	; (800288c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800287c:	4313      	orrs	r3, r2
 800287e:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8002880:	2300      	movs	r3, #0
}
 8002882:	4618      	mov	r0, r3
 8002884:	3718      	adds	r7, #24
 8002886:	46bd      	mov	sp, r7
 8002888:	bd80      	pop	{r7, pc}
 800288a:	bf00      	nop
 800288c:	40021000 	.word	0x40021000
 8002890:	40007000 	.word	0x40007000
 8002894:	42420440 	.word	0x42420440

08002898 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8002898:	b590      	push	{r4, r7, lr}
 800289a:	b08d      	sub	sp, #52	; 0x34
 800289c:	af00      	add	r7, sp, #0
 800289e:	6078      	str	r0, [r7, #4]
  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t pll2mul = 0U, pll3mul = 0U, prediv2 = 0U;
#endif /* STM32F105xC || STM32F107xC */
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80028a0:	4b55      	ldr	r3, [pc, #340]	; (80029f8 <HAL_RCCEx_GetPeriphCLKFreq+0x160>)
 80028a2:	f107 040c 	add.w	r4, r7, #12
 80028a6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80028a8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80028ac:	4b53      	ldr	r3, [pc, #332]	; (80029fc <HAL_RCCEx_GetPeriphCLKFreq+0x164>)
 80028ae:	881b      	ldrh	r3, [r3, #0]
 80028b0:	813b      	strh	r3, [r7, #8]

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 80028b2:	2300      	movs	r3, #0
 80028b4:	627b      	str	r3, [r7, #36]	; 0x24
 80028b6:	2300      	movs	r3, #0
 80028b8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80028ba:	2300      	movs	r3, #0
 80028bc:	623b      	str	r3, [r7, #32]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 80028be:	2300      	movs	r3, #0
 80028c0:	61fb      	str	r3, [r7, #28]
 80028c2:	2300      	movs	r3, #0
 80028c4:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	2b02      	cmp	r3, #2
 80028ca:	d07f      	beq.n	80029cc <HAL_RCCEx_GetPeriphCLKFreq+0x134>
 80028cc:	2b10      	cmp	r3, #16
 80028ce:	d002      	beq.n	80028d6 <HAL_RCCEx_GetPeriphCLKFreq+0x3e>
 80028d0:	2b01      	cmp	r3, #1
 80028d2:	d048      	beq.n	8002966 <HAL_RCCEx_GetPeriphCLKFreq+0xce>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 80028d4:	e08b      	b.n	80029ee <HAL_RCCEx_GetPeriphCLKFreq+0x156>
      temp_reg = RCC->CFGR;
 80028d6:	4b4a      	ldr	r3, [pc, #296]	; (8002a00 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 80028d8:	685b      	ldr	r3, [r3, #4]
 80028da:	61fb      	str	r3, [r7, #28]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 80028dc:	4b48      	ldr	r3, [pc, #288]	; (8002a00 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d07f      	beq.n	80029e8 <HAL_RCCEx_GetPeriphCLKFreq+0x150>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80028e8:	69fb      	ldr	r3, [r7, #28]
 80028ea:	0c9b      	lsrs	r3, r3, #18
 80028ec:	f003 030f 	and.w	r3, r3, #15
 80028f0:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80028f4:	4413      	add	r3, r2
 80028f6:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80028fa:	623b      	str	r3, [r7, #32]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80028fc:	69fb      	ldr	r3, [r7, #28]
 80028fe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002902:	2b00      	cmp	r3, #0
 8002904:	d018      	beq.n	8002938 <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002906:	4b3e      	ldr	r3, [pc, #248]	; (8002a00 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8002908:	685b      	ldr	r3, [r3, #4]
 800290a:	0c5b      	lsrs	r3, r3, #17
 800290c:	f003 0301 	and.w	r3, r3, #1
 8002910:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8002914:	4413      	add	r3, r2
 8002916:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800291a:	627b      	str	r3, [r7, #36]	; 0x24
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800291c:	69fb      	ldr	r3, [r7, #28]
 800291e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002922:	2b00      	cmp	r3, #0
 8002924:	d00d      	beq.n	8002942 <HAL_RCCEx_GetPeriphCLKFreq+0xaa>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8002926:	4a37      	ldr	r2, [pc, #220]	; (8002a04 <HAL_RCCEx_GetPeriphCLKFreq+0x16c>)
 8002928:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800292a:	fbb2 f2f3 	udiv	r2, r2, r3
 800292e:	6a3b      	ldr	r3, [r7, #32]
 8002930:	fb02 f303 	mul.w	r3, r2, r3
 8002934:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002936:	e004      	b.n	8002942 <HAL_RCCEx_GetPeriphCLKFreq+0xaa>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002938:	6a3b      	ldr	r3, [r7, #32]
 800293a:	4a33      	ldr	r2, [pc, #204]	; (8002a08 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 800293c:	fb02 f303 	mul.w	r3, r2, r3
 8002940:	62fb      	str	r3, [r7, #44]	; 0x2c
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8002942:	4b2f      	ldr	r3, [pc, #188]	; (8002a00 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8002944:	685b      	ldr	r3, [r3, #4]
 8002946:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800294a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800294e:	d102      	bne.n	8002956 <HAL_RCCEx_GetPeriphCLKFreq+0xbe>
          frequency = pllclk;
 8002950:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002952:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8002954:	e048      	b.n	80029e8 <HAL_RCCEx_GetPeriphCLKFreq+0x150>
          frequency = (pllclk * 2) / 3;
 8002956:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002958:	005b      	lsls	r3, r3, #1
 800295a:	4a2c      	ldr	r2, [pc, #176]	; (8002a0c <HAL_RCCEx_GetPeriphCLKFreq+0x174>)
 800295c:	fba2 2303 	umull	r2, r3, r2, r3
 8002960:	085b      	lsrs	r3, r3, #1
 8002962:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8002964:	e040      	b.n	80029e8 <HAL_RCCEx_GetPeriphCLKFreq+0x150>
      temp_reg = RCC->BDCR;
 8002966:	4b26      	ldr	r3, [pc, #152]	; (8002a00 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8002968:	6a1b      	ldr	r3, [r3, #32]
 800296a:	61fb      	str	r3, [r7, #28]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 800296c:	69fb      	ldr	r3, [r7, #28]
 800296e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002972:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002976:	d108      	bne.n	800298a <HAL_RCCEx_GetPeriphCLKFreq+0xf2>
 8002978:	69fb      	ldr	r3, [r7, #28]
 800297a:	f003 0302 	and.w	r3, r3, #2
 800297e:	2b00      	cmp	r3, #0
 8002980:	d003      	beq.n	800298a <HAL_RCCEx_GetPeriphCLKFreq+0xf2>
        frequency = LSE_VALUE;
 8002982:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002986:	62bb      	str	r3, [r7, #40]	; 0x28
 8002988:	e01f      	b.n	80029ca <HAL_RCCEx_GetPeriphCLKFreq+0x132>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 800298a:	69fb      	ldr	r3, [r7, #28]
 800298c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002990:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002994:	d109      	bne.n	80029aa <HAL_RCCEx_GetPeriphCLKFreq+0x112>
 8002996:	4b1a      	ldr	r3, [pc, #104]	; (8002a00 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8002998:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800299a:	f003 0302 	and.w	r3, r3, #2
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d003      	beq.n	80029aa <HAL_RCCEx_GetPeriphCLKFreq+0x112>
        frequency = LSI_VALUE;
 80029a2:	f649 4340 	movw	r3, #40000	; 0x9c40
 80029a6:	62bb      	str	r3, [r7, #40]	; 0x28
 80029a8:	e00f      	b.n	80029ca <HAL_RCCEx_GetPeriphCLKFreq+0x132>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 80029aa:	69fb      	ldr	r3, [r7, #28]
 80029ac:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80029b0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80029b4:	d11a      	bne.n	80029ec <HAL_RCCEx_GetPeriphCLKFreq+0x154>
 80029b6:	4b12      	ldr	r3, [pc, #72]	; (8002a00 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d014      	beq.n	80029ec <HAL_RCCEx_GetPeriphCLKFreq+0x154>
        frequency = HSE_VALUE / 128U;
 80029c2:	f24f 4324 	movw	r3, #62500	; 0xf424
 80029c6:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 80029c8:	e010      	b.n	80029ec <HAL_RCCEx_GetPeriphCLKFreq+0x154>
 80029ca:	e00f      	b.n	80029ec <HAL_RCCEx_GetPeriphCLKFreq+0x154>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 80029cc:	f7ff fe7c 	bl	80026c8 <HAL_RCC_GetPCLK2Freq>
 80029d0:	4602      	mov	r2, r0
 80029d2:	4b0b      	ldr	r3, [pc, #44]	; (8002a00 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 80029d4:	685b      	ldr	r3, [r3, #4]
 80029d6:	0b9b      	lsrs	r3, r3, #14
 80029d8:	f003 0303 	and.w	r3, r3, #3
 80029dc:	3301      	adds	r3, #1
 80029de:	005b      	lsls	r3, r3, #1
 80029e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80029e4:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 80029e6:	e002      	b.n	80029ee <HAL_RCCEx_GetPeriphCLKFreq+0x156>
      break;
 80029e8:	bf00      	nop
 80029ea:	e000      	b.n	80029ee <HAL_RCCEx_GetPeriphCLKFreq+0x156>
      break;
 80029ec:	bf00      	nop
    }
  }
  return (frequency);
 80029ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 80029f0:	4618      	mov	r0, r3
 80029f2:	3734      	adds	r7, #52	; 0x34
 80029f4:	46bd      	mov	sp, r7
 80029f6:	bd90      	pop	{r4, r7, pc}
 80029f8:	08004e94 	.word	0x08004e94
 80029fc:	08004ea4 	.word	0x08004ea4
 8002a00:	40021000 	.word	0x40021000
 8002a04:	007a1200 	.word	0x007a1200
 8002a08:	003d0900 	.word	0x003d0900
 8002a0c:	aaaaaaab 	.word	0xaaaaaaab

08002a10 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002a10:	b580      	push	{r7, lr}
 8002a12:	b082      	sub	sp, #8
 8002a14:	af00      	add	r7, sp, #0
 8002a16:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d101      	bne.n	8002a22 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002a1e:	2301      	movs	r3, #1
 8002a20:	e03f      	b.n	8002aa2 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002a28:	b2db      	uxtb	r3, r3
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d106      	bne.n	8002a3c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	2200      	movs	r2, #0
 8002a32:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002a36:	6878      	ldr	r0, [r7, #4]
 8002a38:	f7fe fa54 	bl	8000ee4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	2224      	movs	r2, #36	; 0x24
 8002a40:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	68da      	ldr	r2, [r3, #12]
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002a52:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002a54:	6878      	ldr	r0, [r7, #4]
 8002a56:	f000 f905 	bl	8002c64 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	691a      	ldr	r2, [r3, #16]
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002a68:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	695a      	ldr	r2, [r3, #20]
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002a78:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	68da      	ldr	r2, [r3, #12]
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002a88:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	2200      	movs	r2, #0
 8002a8e:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	2220      	movs	r2, #32
 8002a94:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	2220      	movs	r2, #32
 8002a9c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8002aa0:	2300      	movs	r3, #0
}
 8002aa2:	4618      	mov	r0, r3
 8002aa4:	3708      	adds	r7, #8
 8002aa6:	46bd      	mov	sp, r7
 8002aa8:	bd80      	pop	{r7, pc}

08002aaa <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002aaa:	b580      	push	{r7, lr}
 8002aac:	b08a      	sub	sp, #40	; 0x28
 8002aae:	af02      	add	r7, sp, #8
 8002ab0:	60f8      	str	r0, [r7, #12]
 8002ab2:	60b9      	str	r1, [r7, #8]
 8002ab4:	603b      	str	r3, [r7, #0]
 8002ab6:	4613      	mov	r3, r2
 8002ab8:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002aba:	2300      	movs	r3, #0
 8002abc:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002ac4:	b2db      	uxtb	r3, r3
 8002ac6:	2b20      	cmp	r3, #32
 8002ac8:	d17c      	bne.n	8002bc4 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002aca:	68bb      	ldr	r3, [r7, #8]
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d002      	beq.n	8002ad6 <HAL_UART_Transmit+0x2c>
 8002ad0:	88fb      	ldrh	r3, [r7, #6]
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d101      	bne.n	8002ada <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002ad6:	2301      	movs	r3, #1
 8002ad8:	e075      	b.n	8002bc6 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002ae0:	2b01      	cmp	r3, #1
 8002ae2:	d101      	bne.n	8002ae8 <HAL_UART_Transmit+0x3e>
 8002ae4:	2302      	movs	r3, #2
 8002ae6:	e06e      	b.n	8002bc6 <HAL_UART_Transmit+0x11c>
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	2201      	movs	r2, #1
 8002aec:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	2200      	movs	r2, #0
 8002af4:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	2221      	movs	r2, #33	; 0x21
 8002afa:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8002afe:	f7fe fb1b 	bl	8001138 <HAL_GetTick>
 8002b02:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	88fa      	ldrh	r2, [r7, #6]
 8002b08:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	88fa      	ldrh	r2, [r7, #6]
 8002b0e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	689b      	ldr	r3, [r3, #8]
 8002b14:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002b18:	d108      	bne.n	8002b2c <HAL_UART_Transmit+0x82>
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	691b      	ldr	r3, [r3, #16]
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d104      	bne.n	8002b2c <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8002b22:	2300      	movs	r3, #0
 8002b24:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002b26:	68bb      	ldr	r3, [r7, #8]
 8002b28:	61bb      	str	r3, [r7, #24]
 8002b2a:	e003      	b.n	8002b34 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8002b2c:	68bb      	ldr	r3, [r7, #8]
 8002b2e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002b30:	2300      	movs	r3, #0
 8002b32:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	2200      	movs	r2, #0
 8002b38:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 8002b3c:	e02a      	b.n	8002b94 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002b3e:	683b      	ldr	r3, [r7, #0]
 8002b40:	9300      	str	r3, [sp, #0]
 8002b42:	697b      	ldr	r3, [r7, #20]
 8002b44:	2200      	movs	r2, #0
 8002b46:	2180      	movs	r1, #128	; 0x80
 8002b48:	68f8      	ldr	r0, [r7, #12]
 8002b4a:	f000 f840 	bl	8002bce <UART_WaitOnFlagUntilTimeout>
 8002b4e:	4603      	mov	r3, r0
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d001      	beq.n	8002b58 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8002b54:	2303      	movs	r3, #3
 8002b56:	e036      	b.n	8002bc6 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8002b58:	69fb      	ldr	r3, [r7, #28]
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d10b      	bne.n	8002b76 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002b5e:	69bb      	ldr	r3, [r7, #24]
 8002b60:	881b      	ldrh	r3, [r3, #0]
 8002b62:	461a      	mov	r2, r3
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002b6c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002b6e:	69bb      	ldr	r3, [r7, #24]
 8002b70:	3302      	adds	r3, #2
 8002b72:	61bb      	str	r3, [r7, #24]
 8002b74:	e007      	b.n	8002b86 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002b76:	69fb      	ldr	r3, [r7, #28]
 8002b78:	781a      	ldrb	r2, [r3, #0]
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002b80:	69fb      	ldr	r3, [r7, #28]
 8002b82:	3301      	adds	r3, #1
 8002b84:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002b8a:	b29b      	uxth	r3, r3
 8002b8c:	3b01      	subs	r3, #1
 8002b8e:	b29a      	uxth	r2, r3
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002b98:	b29b      	uxth	r3, r3
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d1cf      	bne.n	8002b3e <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002b9e:	683b      	ldr	r3, [r7, #0]
 8002ba0:	9300      	str	r3, [sp, #0]
 8002ba2:	697b      	ldr	r3, [r7, #20]
 8002ba4:	2200      	movs	r2, #0
 8002ba6:	2140      	movs	r1, #64	; 0x40
 8002ba8:	68f8      	ldr	r0, [r7, #12]
 8002baa:	f000 f810 	bl	8002bce <UART_WaitOnFlagUntilTimeout>
 8002bae:	4603      	mov	r3, r0
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d001      	beq.n	8002bb8 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8002bb4:	2303      	movs	r3, #3
 8002bb6:	e006      	b.n	8002bc6 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	2220      	movs	r2, #32
 8002bbc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 8002bc0:	2300      	movs	r3, #0
 8002bc2:	e000      	b.n	8002bc6 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8002bc4:	2302      	movs	r3, #2
  }
}
 8002bc6:	4618      	mov	r0, r3
 8002bc8:	3720      	adds	r7, #32
 8002bca:	46bd      	mov	sp, r7
 8002bcc:	bd80      	pop	{r7, pc}

08002bce <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8002bce:	b580      	push	{r7, lr}
 8002bd0:	b084      	sub	sp, #16
 8002bd2:	af00      	add	r7, sp, #0
 8002bd4:	60f8      	str	r0, [r7, #12]
 8002bd6:	60b9      	str	r1, [r7, #8]
 8002bd8:	603b      	str	r3, [r7, #0]
 8002bda:	4613      	mov	r3, r2
 8002bdc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002bde:	e02c      	b.n	8002c3a <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002be0:	69bb      	ldr	r3, [r7, #24]
 8002be2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002be6:	d028      	beq.n	8002c3a <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002be8:	69bb      	ldr	r3, [r7, #24]
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d007      	beq.n	8002bfe <UART_WaitOnFlagUntilTimeout+0x30>
 8002bee:	f7fe faa3 	bl	8001138 <HAL_GetTick>
 8002bf2:	4602      	mov	r2, r0
 8002bf4:	683b      	ldr	r3, [r7, #0]
 8002bf6:	1ad3      	subs	r3, r2, r3
 8002bf8:	69ba      	ldr	r2, [r7, #24]
 8002bfa:	429a      	cmp	r2, r3
 8002bfc:	d21d      	bcs.n	8002c3a <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	68da      	ldr	r2, [r3, #12]
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8002c0c:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	695a      	ldr	r2, [r3, #20]
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	f022 0201 	bic.w	r2, r2, #1
 8002c1c:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	2220      	movs	r2, #32
 8002c22:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	2220      	movs	r2, #32
 8002c2a:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	2200      	movs	r2, #0
 8002c32:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8002c36:	2303      	movs	r3, #3
 8002c38:	e00f      	b.n	8002c5a <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	681a      	ldr	r2, [r3, #0]
 8002c40:	68bb      	ldr	r3, [r7, #8]
 8002c42:	4013      	ands	r3, r2
 8002c44:	68ba      	ldr	r2, [r7, #8]
 8002c46:	429a      	cmp	r2, r3
 8002c48:	bf0c      	ite	eq
 8002c4a:	2301      	moveq	r3, #1
 8002c4c:	2300      	movne	r3, #0
 8002c4e:	b2db      	uxtb	r3, r3
 8002c50:	461a      	mov	r2, r3
 8002c52:	79fb      	ldrb	r3, [r7, #7]
 8002c54:	429a      	cmp	r2, r3
 8002c56:	d0c3      	beq.n	8002be0 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002c58:	2300      	movs	r3, #0
}
 8002c5a:	4618      	mov	r0, r3
 8002c5c:	3710      	adds	r7, #16
 8002c5e:	46bd      	mov	sp, r7
 8002c60:	bd80      	pop	{r7, pc}
	...

08002c64 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002c64:	b580      	push	{r7, lr}
 8002c66:	b084      	sub	sp, #16
 8002c68:	af00      	add	r7, sp, #0
 8002c6a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	691b      	ldr	r3, [r3, #16]
 8002c72:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	68da      	ldr	r2, [r3, #12]
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	430a      	orrs	r2, r1
 8002c80:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	689a      	ldr	r2, [r3, #8]
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	691b      	ldr	r3, [r3, #16]
 8002c8a:	431a      	orrs	r2, r3
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	695b      	ldr	r3, [r3, #20]
 8002c90:	4313      	orrs	r3, r2
 8002c92:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	68db      	ldr	r3, [r3, #12]
 8002c9a:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8002c9e:	f023 030c 	bic.w	r3, r3, #12
 8002ca2:	687a      	ldr	r2, [r7, #4]
 8002ca4:	6812      	ldr	r2, [r2, #0]
 8002ca6:	68b9      	ldr	r1, [r7, #8]
 8002ca8:	430b      	orrs	r3, r1
 8002caa:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	695b      	ldr	r3, [r3, #20]
 8002cb2:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	699a      	ldr	r2, [r3, #24]
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	430a      	orrs	r2, r1
 8002cc0:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	4a2c      	ldr	r2, [pc, #176]	; (8002d78 <UART_SetConfig+0x114>)
 8002cc8:	4293      	cmp	r3, r2
 8002cca:	d103      	bne.n	8002cd4 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8002ccc:	f7ff fcfc 	bl	80026c8 <HAL_RCC_GetPCLK2Freq>
 8002cd0:	60f8      	str	r0, [r7, #12]
 8002cd2:	e002      	b.n	8002cda <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8002cd4:	f7ff fce4 	bl	80026a0 <HAL_RCC_GetPCLK1Freq>
 8002cd8:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002cda:	68fa      	ldr	r2, [r7, #12]
 8002cdc:	4613      	mov	r3, r2
 8002cde:	009b      	lsls	r3, r3, #2
 8002ce0:	4413      	add	r3, r2
 8002ce2:	009a      	lsls	r2, r3, #2
 8002ce4:	441a      	add	r2, r3
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	685b      	ldr	r3, [r3, #4]
 8002cea:	009b      	lsls	r3, r3, #2
 8002cec:	fbb2 f3f3 	udiv	r3, r2, r3
 8002cf0:	4a22      	ldr	r2, [pc, #136]	; (8002d7c <UART_SetConfig+0x118>)
 8002cf2:	fba2 2303 	umull	r2, r3, r2, r3
 8002cf6:	095b      	lsrs	r3, r3, #5
 8002cf8:	0119      	lsls	r1, r3, #4
 8002cfa:	68fa      	ldr	r2, [r7, #12]
 8002cfc:	4613      	mov	r3, r2
 8002cfe:	009b      	lsls	r3, r3, #2
 8002d00:	4413      	add	r3, r2
 8002d02:	009a      	lsls	r2, r3, #2
 8002d04:	441a      	add	r2, r3
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	685b      	ldr	r3, [r3, #4]
 8002d0a:	009b      	lsls	r3, r3, #2
 8002d0c:	fbb2 f2f3 	udiv	r2, r2, r3
 8002d10:	4b1a      	ldr	r3, [pc, #104]	; (8002d7c <UART_SetConfig+0x118>)
 8002d12:	fba3 0302 	umull	r0, r3, r3, r2
 8002d16:	095b      	lsrs	r3, r3, #5
 8002d18:	2064      	movs	r0, #100	; 0x64
 8002d1a:	fb00 f303 	mul.w	r3, r0, r3
 8002d1e:	1ad3      	subs	r3, r2, r3
 8002d20:	011b      	lsls	r3, r3, #4
 8002d22:	3332      	adds	r3, #50	; 0x32
 8002d24:	4a15      	ldr	r2, [pc, #84]	; (8002d7c <UART_SetConfig+0x118>)
 8002d26:	fba2 2303 	umull	r2, r3, r2, r3
 8002d2a:	095b      	lsrs	r3, r3, #5
 8002d2c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002d30:	4419      	add	r1, r3
 8002d32:	68fa      	ldr	r2, [r7, #12]
 8002d34:	4613      	mov	r3, r2
 8002d36:	009b      	lsls	r3, r3, #2
 8002d38:	4413      	add	r3, r2
 8002d3a:	009a      	lsls	r2, r3, #2
 8002d3c:	441a      	add	r2, r3
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	685b      	ldr	r3, [r3, #4]
 8002d42:	009b      	lsls	r3, r3, #2
 8002d44:	fbb2 f2f3 	udiv	r2, r2, r3
 8002d48:	4b0c      	ldr	r3, [pc, #48]	; (8002d7c <UART_SetConfig+0x118>)
 8002d4a:	fba3 0302 	umull	r0, r3, r3, r2
 8002d4e:	095b      	lsrs	r3, r3, #5
 8002d50:	2064      	movs	r0, #100	; 0x64
 8002d52:	fb00 f303 	mul.w	r3, r0, r3
 8002d56:	1ad3      	subs	r3, r2, r3
 8002d58:	011b      	lsls	r3, r3, #4
 8002d5a:	3332      	adds	r3, #50	; 0x32
 8002d5c:	4a07      	ldr	r2, [pc, #28]	; (8002d7c <UART_SetConfig+0x118>)
 8002d5e:	fba2 2303 	umull	r2, r3, r2, r3
 8002d62:	095b      	lsrs	r3, r3, #5
 8002d64:	f003 020f 	and.w	r2, r3, #15
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	440a      	add	r2, r1
 8002d6e:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8002d70:	bf00      	nop
 8002d72:	3710      	adds	r7, #16
 8002d74:	46bd      	mov	sp, r7
 8002d76:	bd80      	pop	{r7, pc}
 8002d78:	40013800 	.word	0x40013800
 8002d7c:	51eb851f 	.word	0x51eb851f

08002d80 <__errno>:
 8002d80:	4b01      	ldr	r3, [pc, #4]	; (8002d88 <__errno+0x8>)
 8002d82:	6818      	ldr	r0, [r3, #0]
 8002d84:	4770      	bx	lr
 8002d86:	bf00      	nop
 8002d88:	20000014 	.word	0x20000014

08002d8c <__libc_init_array>:
 8002d8c:	b570      	push	{r4, r5, r6, lr}
 8002d8e:	2500      	movs	r5, #0
 8002d90:	4e0c      	ldr	r6, [pc, #48]	; (8002dc4 <__libc_init_array+0x38>)
 8002d92:	4c0d      	ldr	r4, [pc, #52]	; (8002dc8 <__libc_init_array+0x3c>)
 8002d94:	1ba4      	subs	r4, r4, r6
 8002d96:	10a4      	asrs	r4, r4, #2
 8002d98:	42a5      	cmp	r5, r4
 8002d9a:	d109      	bne.n	8002db0 <__libc_init_array+0x24>
 8002d9c:	f002 f85e 	bl	8004e5c <_init>
 8002da0:	2500      	movs	r5, #0
 8002da2:	4e0a      	ldr	r6, [pc, #40]	; (8002dcc <__libc_init_array+0x40>)
 8002da4:	4c0a      	ldr	r4, [pc, #40]	; (8002dd0 <__libc_init_array+0x44>)
 8002da6:	1ba4      	subs	r4, r4, r6
 8002da8:	10a4      	asrs	r4, r4, #2
 8002daa:	42a5      	cmp	r5, r4
 8002dac:	d105      	bne.n	8002dba <__libc_init_array+0x2e>
 8002dae:	bd70      	pop	{r4, r5, r6, pc}
 8002db0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002db4:	4798      	blx	r3
 8002db6:	3501      	adds	r5, #1
 8002db8:	e7ee      	b.n	8002d98 <__libc_init_array+0xc>
 8002dba:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002dbe:	4798      	blx	r3
 8002dc0:	3501      	adds	r5, #1
 8002dc2:	e7f2      	b.n	8002daa <__libc_init_array+0x1e>
 8002dc4:	08005120 	.word	0x08005120
 8002dc8:	08005120 	.word	0x08005120
 8002dcc:	08005120 	.word	0x08005120
 8002dd0:	08005124 	.word	0x08005124

08002dd4 <memset>:
 8002dd4:	4603      	mov	r3, r0
 8002dd6:	4402      	add	r2, r0
 8002dd8:	4293      	cmp	r3, r2
 8002dda:	d100      	bne.n	8002dde <memset+0xa>
 8002ddc:	4770      	bx	lr
 8002dde:	f803 1b01 	strb.w	r1, [r3], #1
 8002de2:	e7f9      	b.n	8002dd8 <memset+0x4>

08002de4 <__cvt>:
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002dea:	461e      	mov	r6, r3
 8002dec:	bfbb      	ittet	lt
 8002dee:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 8002df2:	461e      	movlt	r6, r3
 8002df4:	2300      	movge	r3, #0
 8002df6:	232d      	movlt	r3, #45	; 0x2d
 8002df8:	b088      	sub	sp, #32
 8002dfa:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8002dfc:	e9dd 1a12 	ldrd	r1, sl, [sp, #72]	; 0x48
 8002e00:	f027 0720 	bic.w	r7, r7, #32
 8002e04:	2f46      	cmp	r7, #70	; 0x46
 8002e06:	4614      	mov	r4, r2
 8002e08:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8002e0a:	700b      	strb	r3, [r1, #0]
 8002e0c:	d004      	beq.n	8002e18 <__cvt+0x34>
 8002e0e:	2f45      	cmp	r7, #69	; 0x45
 8002e10:	d100      	bne.n	8002e14 <__cvt+0x30>
 8002e12:	3501      	adds	r5, #1
 8002e14:	2302      	movs	r3, #2
 8002e16:	e000      	b.n	8002e1a <__cvt+0x36>
 8002e18:	2303      	movs	r3, #3
 8002e1a:	aa07      	add	r2, sp, #28
 8002e1c:	9204      	str	r2, [sp, #16]
 8002e1e:	aa06      	add	r2, sp, #24
 8002e20:	e9cd a202 	strd	sl, r2, [sp, #8]
 8002e24:	e9cd 3500 	strd	r3, r5, [sp]
 8002e28:	4622      	mov	r2, r4
 8002e2a:	4633      	mov	r3, r6
 8002e2c:	f000 fcd8 	bl	80037e0 <_dtoa_r>
 8002e30:	2f47      	cmp	r7, #71	; 0x47
 8002e32:	4680      	mov	r8, r0
 8002e34:	d102      	bne.n	8002e3c <__cvt+0x58>
 8002e36:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8002e38:	07db      	lsls	r3, r3, #31
 8002e3a:	d526      	bpl.n	8002e8a <__cvt+0xa6>
 8002e3c:	2f46      	cmp	r7, #70	; 0x46
 8002e3e:	eb08 0905 	add.w	r9, r8, r5
 8002e42:	d111      	bne.n	8002e68 <__cvt+0x84>
 8002e44:	f898 3000 	ldrb.w	r3, [r8]
 8002e48:	2b30      	cmp	r3, #48	; 0x30
 8002e4a:	d10a      	bne.n	8002e62 <__cvt+0x7e>
 8002e4c:	2200      	movs	r2, #0
 8002e4e:	2300      	movs	r3, #0
 8002e50:	4620      	mov	r0, r4
 8002e52:	4631      	mov	r1, r6
 8002e54:	f7fd fda8 	bl	80009a8 <__aeabi_dcmpeq>
 8002e58:	b918      	cbnz	r0, 8002e62 <__cvt+0x7e>
 8002e5a:	f1c5 0501 	rsb	r5, r5, #1
 8002e5e:	f8ca 5000 	str.w	r5, [sl]
 8002e62:	f8da 3000 	ldr.w	r3, [sl]
 8002e66:	4499      	add	r9, r3
 8002e68:	2200      	movs	r2, #0
 8002e6a:	2300      	movs	r3, #0
 8002e6c:	4620      	mov	r0, r4
 8002e6e:	4631      	mov	r1, r6
 8002e70:	f7fd fd9a 	bl	80009a8 <__aeabi_dcmpeq>
 8002e74:	b938      	cbnz	r0, 8002e86 <__cvt+0xa2>
 8002e76:	2230      	movs	r2, #48	; 0x30
 8002e78:	9b07      	ldr	r3, [sp, #28]
 8002e7a:	454b      	cmp	r3, r9
 8002e7c:	d205      	bcs.n	8002e8a <__cvt+0xa6>
 8002e7e:	1c59      	adds	r1, r3, #1
 8002e80:	9107      	str	r1, [sp, #28]
 8002e82:	701a      	strb	r2, [r3, #0]
 8002e84:	e7f8      	b.n	8002e78 <__cvt+0x94>
 8002e86:	f8cd 901c 	str.w	r9, [sp, #28]
 8002e8a:	4640      	mov	r0, r8
 8002e8c:	9b07      	ldr	r3, [sp, #28]
 8002e8e:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8002e90:	eba3 0308 	sub.w	r3, r3, r8
 8002e94:	6013      	str	r3, [r2, #0]
 8002e96:	b008      	add	sp, #32
 8002e98:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08002e9c <__exponent>:
 8002e9c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002e9e:	2900      	cmp	r1, #0
 8002ea0:	bfb4      	ite	lt
 8002ea2:	232d      	movlt	r3, #45	; 0x2d
 8002ea4:	232b      	movge	r3, #43	; 0x2b
 8002ea6:	4604      	mov	r4, r0
 8002ea8:	bfb8      	it	lt
 8002eaa:	4249      	neglt	r1, r1
 8002eac:	2909      	cmp	r1, #9
 8002eae:	f804 2b02 	strb.w	r2, [r4], #2
 8002eb2:	7043      	strb	r3, [r0, #1]
 8002eb4:	dd21      	ble.n	8002efa <__exponent+0x5e>
 8002eb6:	f10d 0307 	add.w	r3, sp, #7
 8002eba:	461f      	mov	r7, r3
 8002ebc:	260a      	movs	r6, #10
 8002ebe:	fb91 f5f6 	sdiv	r5, r1, r6
 8002ec2:	fb06 1115 	mls	r1, r6, r5, r1
 8002ec6:	2d09      	cmp	r5, #9
 8002ec8:	f101 0130 	add.w	r1, r1, #48	; 0x30
 8002ecc:	f803 1c01 	strb.w	r1, [r3, #-1]
 8002ed0:	f103 32ff 	add.w	r2, r3, #4294967295	; 0xffffffff
 8002ed4:	4629      	mov	r1, r5
 8002ed6:	dc09      	bgt.n	8002eec <__exponent+0x50>
 8002ed8:	3130      	adds	r1, #48	; 0x30
 8002eda:	3b02      	subs	r3, #2
 8002edc:	f802 1c01 	strb.w	r1, [r2, #-1]
 8002ee0:	42bb      	cmp	r3, r7
 8002ee2:	4622      	mov	r2, r4
 8002ee4:	d304      	bcc.n	8002ef0 <__exponent+0x54>
 8002ee6:	1a10      	subs	r0, r2, r0
 8002ee8:	b003      	add	sp, #12
 8002eea:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002eec:	4613      	mov	r3, r2
 8002eee:	e7e6      	b.n	8002ebe <__exponent+0x22>
 8002ef0:	f813 2b01 	ldrb.w	r2, [r3], #1
 8002ef4:	f804 2b01 	strb.w	r2, [r4], #1
 8002ef8:	e7f2      	b.n	8002ee0 <__exponent+0x44>
 8002efa:	2330      	movs	r3, #48	; 0x30
 8002efc:	4419      	add	r1, r3
 8002efe:	7083      	strb	r3, [r0, #2]
 8002f00:	1d02      	adds	r2, r0, #4
 8002f02:	70c1      	strb	r1, [r0, #3]
 8002f04:	e7ef      	b.n	8002ee6 <__exponent+0x4a>
	...

08002f08 <_printf_float>:
 8002f08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002f0c:	b091      	sub	sp, #68	; 0x44
 8002f0e:	460c      	mov	r4, r1
 8002f10:	9f1a      	ldr	r7, [sp, #104]	; 0x68
 8002f12:	4693      	mov	fp, r2
 8002f14:	461e      	mov	r6, r3
 8002f16:	4605      	mov	r5, r0
 8002f18:	f001 fa16 	bl	8004348 <_localeconv_r>
 8002f1c:	6803      	ldr	r3, [r0, #0]
 8002f1e:	4618      	mov	r0, r3
 8002f20:	9309      	str	r3, [sp, #36]	; 0x24
 8002f22:	f7fd f915 	bl	8000150 <strlen>
 8002f26:	2300      	movs	r3, #0
 8002f28:	930e      	str	r3, [sp, #56]	; 0x38
 8002f2a:	683b      	ldr	r3, [r7, #0]
 8002f2c:	900a      	str	r0, [sp, #40]	; 0x28
 8002f2e:	3307      	adds	r3, #7
 8002f30:	f023 0307 	bic.w	r3, r3, #7
 8002f34:	f103 0208 	add.w	r2, r3, #8
 8002f38:	f894 8018 	ldrb.w	r8, [r4, #24]
 8002f3c:	f8d4 a000 	ldr.w	sl, [r4]
 8002f40:	603a      	str	r2, [r7, #0]
 8002f42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f46:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8002f4a:	e9d4 7912 	ldrd	r7, r9, [r4, #72]	; 0x48
 8002f4e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8002f52:	930b      	str	r3, [sp, #44]	; 0x2c
 8002f54:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002f58:	4ba6      	ldr	r3, [pc, #664]	; (80031f4 <_printf_float+0x2ec>)
 8002f5a:	4638      	mov	r0, r7
 8002f5c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8002f5e:	f7fd fd55 	bl	8000a0c <__aeabi_dcmpun>
 8002f62:	bb68      	cbnz	r0, 8002fc0 <_printf_float+0xb8>
 8002f64:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002f68:	4ba2      	ldr	r3, [pc, #648]	; (80031f4 <_printf_float+0x2ec>)
 8002f6a:	4638      	mov	r0, r7
 8002f6c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8002f6e:	f7fd fd2f 	bl	80009d0 <__aeabi_dcmple>
 8002f72:	bb28      	cbnz	r0, 8002fc0 <_printf_float+0xb8>
 8002f74:	2200      	movs	r2, #0
 8002f76:	2300      	movs	r3, #0
 8002f78:	4638      	mov	r0, r7
 8002f7a:	4649      	mov	r1, r9
 8002f7c:	f7fd fd1e 	bl	80009bc <__aeabi_dcmplt>
 8002f80:	b110      	cbz	r0, 8002f88 <_printf_float+0x80>
 8002f82:	232d      	movs	r3, #45	; 0x2d
 8002f84:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002f88:	4f9b      	ldr	r7, [pc, #620]	; (80031f8 <_printf_float+0x2f0>)
 8002f8a:	4b9c      	ldr	r3, [pc, #624]	; (80031fc <_printf_float+0x2f4>)
 8002f8c:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8002f90:	bf98      	it	ls
 8002f92:	461f      	movls	r7, r3
 8002f94:	2303      	movs	r3, #3
 8002f96:	f04f 0900 	mov.w	r9, #0
 8002f9a:	6123      	str	r3, [r4, #16]
 8002f9c:	f02a 0304 	bic.w	r3, sl, #4
 8002fa0:	6023      	str	r3, [r4, #0]
 8002fa2:	9600      	str	r6, [sp, #0]
 8002fa4:	465b      	mov	r3, fp
 8002fa6:	aa0f      	add	r2, sp, #60	; 0x3c
 8002fa8:	4621      	mov	r1, r4
 8002faa:	4628      	mov	r0, r5
 8002fac:	f000 f9e2 	bl	8003374 <_printf_common>
 8002fb0:	3001      	adds	r0, #1
 8002fb2:	f040 8090 	bne.w	80030d6 <_printf_float+0x1ce>
 8002fb6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002fba:	b011      	add	sp, #68	; 0x44
 8002fbc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002fc0:	463a      	mov	r2, r7
 8002fc2:	464b      	mov	r3, r9
 8002fc4:	4638      	mov	r0, r7
 8002fc6:	4649      	mov	r1, r9
 8002fc8:	f7fd fd20 	bl	8000a0c <__aeabi_dcmpun>
 8002fcc:	b110      	cbz	r0, 8002fd4 <_printf_float+0xcc>
 8002fce:	4f8c      	ldr	r7, [pc, #560]	; (8003200 <_printf_float+0x2f8>)
 8002fd0:	4b8c      	ldr	r3, [pc, #560]	; (8003204 <_printf_float+0x2fc>)
 8002fd2:	e7db      	b.n	8002f8c <_printf_float+0x84>
 8002fd4:	6863      	ldr	r3, [r4, #4]
 8002fd6:	f44a 6280 	orr.w	r2, sl, #1024	; 0x400
 8002fda:	1c59      	adds	r1, r3, #1
 8002fdc:	a80d      	add	r0, sp, #52	; 0x34
 8002fde:	a90e      	add	r1, sp, #56	; 0x38
 8002fe0:	d140      	bne.n	8003064 <_printf_float+0x15c>
 8002fe2:	2306      	movs	r3, #6
 8002fe4:	6063      	str	r3, [r4, #4]
 8002fe6:	f04f 0c00 	mov.w	ip, #0
 8002fea:	f10d 0333 	add.w	r3, sp, #51	; 0x33
 8002fee:	e9cd 2301 	strd	r2, r3, [sp, #4]
 8002ff2:	6863      	ldr	r3, [r4, #4]
 8002ff4:	6022      	str	r2, [r4, #0]
 8002ff6:	e9cd 0803 	strd	r0, r8, [sp, #12]
 8002ffa:	9300      	str	r3, [sp, #0]
 8002ffc:	463a      	mov	r2, r7
 8002ffe:	464b      	mov	r3, r9
 8003000:	e9cd 1c05 	strd	r1, ip, [sp, #20]
 8003004:	4628      	mov	r0, r5
 8003006:	f7ff feed 	bl	8002de4 <__cvt>
 800300a:	f008 03df 	and.w	r3, r8, #223	; 0xdf
 800300e:	2b47      	cmp	r3, #71	; 0x47
 8003010:	4607      	mov	r7, r0
 8003012:	d109      	bne.n	8003028 <_printf_float+0x120>
 8003014:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8003016:	1cd8      	adds	r0, r3, #3
 8003018:	db02      	blt.n	8003020 <_printf_float+0x118>
 800301a:	6862      	ldr	r2, [r4, #4]
 800301c:	4293      	cmp	r3, r2
 800301e:	dd47      	ble.n	80030b0 <_printf_float+0x1a8>
 8003020:	f1a8 0802 	sub.w	r8, r8, #2
 8003024:	fa5f f888 	uxtb.w	r8, r8
 8003028:	f1b8 0f65 	cmp.w	r8, #101	; 0x65
 800302c:	990d      	ldr	r1, [sp, #52]	; 0x34
 800302e:	d824      	bhi.n	800307a <_printf_float+0x172>
 8003030:	3901      	subs	r1, #1
 8003032:	4642      	mov	r2, r8
 8003034:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8003038:	910d      	str	r1, [sp, #52]	; 0x34
 800303a:	f7ff ff2f 	bl	8002e9c <__exponent>
 800303e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8003040:	4681      	mov	r9, r0
 8003042:	1813      	adds	r3, r2, r0
 8003044:	2a01      	cmp	r2, #1
 8003046:	6123      	str	r3, [r4, #16]
 8003048:	dc02      	bgt.n	8003050 <_printf_float+0x148>
 800304a:	6822      	ldr	r2, [r4, #0]
 800304c:	07d1      	lsls	r1, r2, #31
 800304e:	d501      	bpl.n	8003054 <_printf_float+0x14c>
 8003050:	3301      	adds	r3, #1
 8003052:	6123      	str	r3, [r4, #16]
 8003054:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 8003058:	2b00      	cmp	r3, #0
 800305a:	d0a2      	beq.n	8002fa2 <_printf_float+0x9a>
 800305c:	232d      	movs	r3, #45	; 0x2d
 800305e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003062:	e79e      	b.n	8002fa2 <_printf_float+0x9a>
 8003064:	f1b8 0f67 	cmp.w	r8, #103	; 0x67
 8003068:	f000 816e 	beq.w	8003348 <_printf_float+0x440>
 800306c:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8003070:	d1b9      	bne.n	8002fe6 <_printf_float+0xde>
 8003072:	2b00      	cmp	r3, #0
 8003074:	d1b7      	bne.n	8002fe6 <_printf_float+0xde>
 8003076:	2301      	movs	r3, #1
 8003078:	e7b4      	b.n	8002fe4 <_printf_float+0xdc>
 800307a:	f1b8 0f66 	cmp.w	r8, #102	; 0x66
 800307e:	d119      	bne.n	80030b4 <_printf_float+0x1ac>
 8003080:	2900      	cmp	r1, #0
 8003082:	6863      	ldr	r3, [r4, #4]
 8003084:	dd0c      	ble.n	80030a0 <_printf_float+0x198>
 8003086:	6121      	str	r1, [r4, #16]
 8003088:	b913      	cbnz	r3, 8003090 <_printf_float+0x188>
 800308a:	6822      	ldr	r2, [r4, #0]
 800308c:	07d2      	lsls	r2, r2, #31
 800308e:	d502      	bpl.n	8003096 <_printf_float+0x18e>
 8003090:	3301      	adds	r3, #1
 8003092:	440b      	add	r3, r1
 8003094:	6123      	str	r3, [r4, #16]
 8003096:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8003098:	f04f 0900 	mov.w	r9, #0
 800309c:	65a3      	str	r3, [r4, #88]	; 0x58
 800309e:	e7d9      	b.n	8003054 <_printf_float+0x14c>
 80030a0:	b913      	cbnz	r3, 80030a8 <_printf_float+0x1a0>
 80030a2:	6822      	ldr	r2, [r4, #0]
 80030a4:	07d0      	lsls	r0, r2, #31
 80030a6:	d501      	bpl.n	80030ac <_printf_float+0x1a4>
 80030a8:	3302      	adds	r3, #2
 80030aa:	e7f3      	b.n	8003094 <_printf_float+0x18c>
 80030ac:	2301      	movs	r3, #1
 80030ae:	e7f1      	b.n	8003094 <_printf_float+0x18c>
 80030b0:	f04f 0867 	mov.w	r8, #103	; 0x67
 80030b4:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 80030b8:	4293      	cmp	r3, r2
 80030ba:	db05      	blt.n	80030c8 <_printf_float+0x1c0>
 80030bc:	6822      	ldr	r2, [r4, #0]
 80030be:	6123      	str	r3, [r4, #16]
 80030c0:	07d1      	lsls	r1, r2, #31
 80030c2:	d5e8      	bpl.n	8003096 <_printf_float+0x18e>
 80030c4:	3301      	adds	r3, #1
 80030c6:	e7e5      	b.n	8003094 <_printf_float+0x18c>
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	bfcc      	ite	gt
 80030cc:	2301      	movgt	r3, #1
 80030ce:	f1c3 0302 	rsble	r3, r3, #2
 80030d2:	4413      	add	r3, r2
 80030d4:	e7de      	b.n	8003094 <_printf_float+0x18c>
 80030d6:	6823      	ldr	r3, [r4, #0]
 80030d8:	055a      	lsls	r2, r3, #21
 80030da:	d407      	bmi.n	80030ec <_printf_float+0x1e4>
 80030dc:	6923      	ldr	r3, [r4, #16]
 80030de:	463a      	mov	r2, r7
 80030e0:	4659      	mov	r1, fp
 80030e2:	4628      	mov	r0, r5
 80030e4:	47b0      	blx	r6
 80030e6:	3001      	adds	r0, #1
 80030e8:	d129      	bne.n	800313e <_printf_float+0x236>
 80030ea:	e764      	b.n	8002fb6 <_printf_float+0xae>
 80030ec:	f1b8 0f65 	cmp.w	r8, #101	; 0x65
 80030f0:	f240 80d7 	bls.w	80032a2 <_printf_float+0x39a>
 80030f4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80030f8:	2200      	movs	r2, #0
 80030fa:	2300      	movs	r3, #0
 80030fc:	f7fd fc54 	bl	80009a8 <__aeabi_dcmpeq>
 8003100:	b388      	cbz	r0, 8003166 <_printf_float+0x25e>
 8003102:	2301      	movs	r3, #1
 8003104:	4a40      	ldr	r2, [pc, #256]	; (8003208 <_printf_float+0x300>)
 8003106:	4659      	mov	r1, fp
 8003108:	4628      	mov	r0, r5
 800310a:	47b0      	blx	r6
 800310c:	3001      	adds	r0, #1
 800310e:	f43f af52 	beq.w	8002fb6 <_printf_float+0xae>
 8003112:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8003116:	429a      	cmp	r2, r3
 8003118:	db02      	blt.n	8003120 <_printf_float+0x218>
 800311a:	6823      	ldr	r3, [r4, #0]
 800311c:	07d8      	lsls	r0, r3, #31
 800311e:	d50e      	bpl.n	800313e <_printf_float+0x236>
 8003120:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8003124:	4659      	mov	r1, fp
 8003126:	4628      	mov	r0, r5
 8003128:	47b0      	blx	r6
 800312a:	3001      	adds	r0, #1
 800312c:	f43f af43 	beq.w	8002fb6 <_printf_float+0xae>
 8003130:	2700      	movs	r7, #0
 8003132:	f104 081a 	add.w	r8, r4, #26
 8003136:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003138:	3b01      	subs	r3, #1
 800313a:	42bb      	cmp	r3, r7
 800313c:	dc09      	bgt.n	8003152 <_printf_float+0x24a>
 800313e:	6823      	ldr	r3, [r4, #0]
 8003140:	079f      	lsls	r7, r3, #30
 8003142:	f100 80fd 	bmi.w	8003340 <_printf_float+0x438>
 8003146:	68e0      	ldr	r0, [r4, #12]
 8003148:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800314a:	4298      	cmp	r0, r3
 800314c:	bfb8      	it	lt
 800314e:	4618      	movlt	r0, r3
 8003150:	e733      	b.n	8002fba <_printf_float+0xb2>
 8003152:	2301      	movs	r3, #1
 8003154:	4642      	mov	r2, r8
 8003156:	4659      	mov	r1, fp
 8003158:	4628      	mov	r0, r5
 800315a:	47b0      	blx	r6
 800315c:	3001      	adds	r0, #1
 800315e:	f43f af2a 	beq.w	8002fb6 <_printf_float+0xae>
 8003162:	3701      	adds	r7, #1
 8003164:	e7e7      	b.n	8003136 <_printf_float+0x22e>
 8003166:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8003168:	2b00      	cmp	r3, #0
 800316a:	dc2b      	bgt.n	80031c4 <_printf_float+0x2bc>
 800316c:	2301      	movs	r3, #1
 800316e:	4a26      	ldr	r2, [pc, #152]	; (8003208 <_printf_float+0x300>)
 8003170:	4659      	mov	r1, fp
 8003172:	4628      	mov	r0, r5
 8003174:	47b0      	blx	r6
 8003176:	3001      	adds	r0, #1
 8003178:	f43f af1d 	beq.w	8002fb6 <_printf_float+0xae>
 800317c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800317e:	b923      	cbnz	r3, 800318a <_printf_float+0x282>
 8003180:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003182:	b913      	cbnz	r3, 800318a <_printf_float+0x282>
 8003184:	6823      	ldr	r3, [r4, #0]
 8003186:	07d9      	lsls	r1, r3, #31
 8003188:	d5d9      	bpl.n	800313e <_printf_float+0x236>
 800318a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800318e:	4659      	mov	r1, fp
 8003190:	4628      	mov	r0, r5
 8003192:	47b0      	blx	r6
 8003194:	3001      	adds	r0, #1
 8003196:	f43f af0e 	beq.w	8002fb6 <_printf_float+0xae>
 800319a:	f04f 0800 	mov.w	r8, #0
 800319e:	f104 091a 	add.w	r9, r4, #26
 80031a2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80031a4:	425b      	negs	r3, r3
 80031a6:	4543      	cmp	r3, r8
 80031a8:	dc01      	bgt.n	80031ae <_printf_float+0x2a6>
 80031aa:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80031ac:	e797      	b.n	80030de <_printf_float+0x1d6>
 80031ae:	2301      	movs	r3, #1
 80031b0:	464a      	mov	r2, r9
 80031b2:	4659      	mov	r1, fp
 80031b4:	4628      	mov	r0, r5
 80031b6:	47b0      	blx	r6
 80031b8:	3001      	adds	r0, #1
 80031ba:	f43f aefc 	beq.w	8002fb6 <_printf_float+0xae>
 80031be:	f108 0801 	add.w	r8, r8, #1
 80031c2:	e7ee      	b.n	80031a2 <_printf_float+0x29a>
 80031c4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80031c6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80031c8:	429a      	cmp	r2, r3
 80031ca:	bfa8      	it	ge
 80031cc:	461a      	movge	r2, r3
 80031ce:	2a00      	cmp	r2, #0
 80031d0:	4690      	mov	r8, r2
 80031d2:	dd07      	ble.n	80031e4 <_printf_float+0x2dc>
 80031d4:	4613      	mov	r3, r2
 80031d6:	4659      	mov	r1, fp
 80031d8:	463a      	mov	r2, r7
 80031da:	4628      	mov	r0, r5
 80031dc:	47b0      	blx	r6
 80031de:	3001      	adds	r0, #1
 80031e0:	f43f aee9 	beq.w	8002fb6 <_printf_float+0xae>
 80031e4:	f104 031a 	add.w	r3, r4, #26
 80031e8:	f04f 0a00 	mov.w	sl, #0
 80031ec:	ea28 78e8 	bic.w	r8, r8, r8, asr #31
 80031f0:	930b      	str	r3, [sp, #44]	; 0x2c
 80031f2:	e015      	b.n	8003220 <_printf_float+0x318>
 80031f4:	7fefffff 	.word	0x7fefffff
 80031f8:	08004ec4 	.word	0x08004ec4
 80031fc:	08004ec0 	.word	0x08004ec0
 8003200:	08004ecc 	.word	0x08004ecc
 8003204:	08004ec8 	.word	0x08004ec8
 8003208:	08004ed0 	.word	0x08004ed0
 800320c:	2301      	movs	r3, #1
 800320e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8003210:	4659      	mov	r1, fp
 8003212:	4628      	mov	r0, r5
 8003214:	47b0      	blx	r6
 8003216:	3001      	adds	r0, #1
 8003218:	f43f aecd 	beq.w	8002fb6 <_printf_float+0xae>
 800321c:	f10a 0a01 	add.w	sl, sl, #1
 8003220:	f8d4 9058 	ldr.w	r9, [r4, #88]	; 0x58
 8003224:	eba9 0308 	sub.w	r3, r9, r8
 8003228:	4553      	cmp	r3, sl
 800322a:	dcef      	bgt.n	800320c <_printf_float+0x304>
 800322c:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8003230:	429a      	cmp	r2, r3
 8003232:	444f      	add	r7, r9
 8003234:	db14      	blt.n	8003260 <_printf_float+0x358>
 8003236:	6823      	ldr	r3, [r4, #0]
 8003238:	07da      	lsls	r2, r3, #31
 800323a:	d411      	bmi.n	8003260 <_printf_float+0x358>
 800323c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800323e:	990d      	ldr	r1, [sp, #52]	; 0x34
 8003240:	eba3 0209 	sub.w	r2, r3, r9
 8003244:	eba3 0901 	sub.w	r9, r3, r1
 8003248:	4591      	cmp	r9, r2
 800324a:	bfa8      	it	ge
 800324c:	4691      	movge	r9, r2
 800324e:	f1b9 0f00 	cmp.w	r9, #0
 8003252:	dc0d      	bgt.n	8003270 <_printf_float+0x368>
 8003254:	2700      	movs	r7, #0
 8003256:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800325a:	f104 081a 	add.w	r8, r4, #26
 800325e:	e018      	b.n	8003292 <_printf_float+0x38a>
 8003260:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8003264:	4659      	mov	r1, fp
 8003266:	4628      	mov	r0, r5
 8003268:	47b0      	blx	r6
 800326a:	3001      	adds	r0, #1
 800326c:	d1e6      	bne.n	800323c <_printf_float+0x334>
 800326e:	e6a2      	b.n	8002fb6 <_printf_float+0xae>
 8003270:	464b      	mov	r3, r9
 8003272:	463a      	mov	r2, r7
 8003274:	4659      	mov	r1, fp
 8003276:	4628      	mov	r0, r5
 8003278:	47b0      	blx	r6
 800327a:	3001      	adds	r0, #1
 800327c:	d1ea      	bne.n	8003254 <_printf_float+0x34c>
 800327e:	e69a      	b.n	8002fb6 <_printf_float+0xae>
 8003280:	2301      	movs	r3, #1
 8003282:	4642      	mov	r2, r8
 8003284:	4659      	mov	r1, fp
 8003286:	4628      	mov	r0, r5
 8003288:	47b0      	blx	r6
 800328a:	3001      	adds	r0, #1
 800328c:	f43f ae93 	beq.w	8002fb6 <_printf_float+0xae>
 8003290:	3701      	adds	r7, #1
 8003292:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8003296:	1a9b      	subs	r3, r3, r2
 8003298:	eba3 0309 	sub.w	r3, r3, r9
 800329c:	42bb      	cmp	r3, r7
 800329e:	dcef      	bgt.n	8003280 <_printf_float+0x378>
 80032a0:	e74d      	b.n	800313e <_printf_float+0x236>
 80032a2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80032a4:	2a01      	cmp	r2, #1
 80032a6:	dc01      	bgt.n	80032ac <_printf_float+0x3a4>
 80032a8:	07db      	lsls	r3, r3, #31
 80032aa:	d538      	bpl.n	800331e <_printf_float+0x416>
 80032ac:	2301      	movs	r3, #1
 80032ae:	463a      	mov	r2, r7
 80032b0:	4659      	mov	r1, fp
 80032b2:	4628      	mov	r0, r5
 80032b4:	47b0      	blx	r6
 80032b6:	3001      	adds	r0, #1
 80032b8:	f43f ae7d 	beq.w	8002fb6 <_printf_float+0xae>
 80032bc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80032c0:	4659      	mov	r1, fp
 80032c2:	4628      	mov	r0, r5
 80032c4:	47b0      	blx	r6
 80032c6:	3001      	adds	r0, #1
 80032c8:	f107 0701 	add.w	r7, r7, #1
 80032cc:	f43f ae73 	beq.w	8002fb6 <_printf_float+0xae>
 80032d0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80032d4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80032d6:	2200      	movs	r2, #0
 80032d8:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 80032dc:	2300      	movs	r3, #0
 80032de:	f7fd fb63 	bl	80009a8 <__aeabi_dcmpeq>
 80032e2:	b9c0      	cbnz	r0, 8003316 <_printf_float+0x40e>
 80032e4:	4643      	mov	r3, r8
 80032e6:	463a      	mov	r2, r7
 80032e8:	4659      	mov	r1, fp
 80032ea:	4628      	mov	r0, r5
 80032ec:	47b0      	blx	r6
 80032ee:	3001      	adds	r0, #1
 80032f0:	d10d      	bne.n	800330e <_printf_float+0x406>
 80032f2:	e660      	b.n	8002fb6 <_printf_float+0xae>
 80032f4:	2301      	movs	r3, #1
 80032f6:	4642      	mov	r2, r8
 80032f8:	4659      	mov	r1, fp
 80032fa:	4628      	mov	r0, r5
 80032fc:	47b0      	blx	r6
 80032fe:	3001      	adds	r0, #1
 8003300:	f43f ae59 	beq.w	8002fb6 <_printf_float+0xae>
 8003304:	3701      	adds	r7, #1
 8003306:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003308:	3b01      	subs	r3, #1
 800330a:	42bb      	cmp	r3, r7
 800330c:	dcf2      	bgt.n	80032f4 <_printf_float+0x3ec>
 800330e:	464b      	mov	r3, r9
 8003310:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8003314:	e6e4      	b.n	80030e0 <_printf_float+0x1d8>
 8003316:	2700      	movs	r7, #0
 8003318:	f104 081a 	add.w	r8, r4, #26
 800331c:	e7f3      	b.n	8003306 <_printf_float+0x3fe>
 800331e:	2301      	movs	r3, #1
 8003320:	e7e1      	b.n	80032e6 <_printf_float+0x3de>
 8003322:	2301      	movs	r3, #1
 8003324:	4642      	mov	r2, r8
 8003326:	4659      	mov	r1, fp
 8003328:	4628      	mov	r0, r5
 800332a:	47b0      	blx	r6
 800332c:	3001      	adds	r0, #1
 800332e:	f43f ae42 	beq.w	8002fb6 <_printf_float+0xae>
 8003332:	3701      	adds	r7, #1
 8003334:	68e3      	ldr	r3, [r4, #12]
 8003336:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8003338:	1a9b      	subs	r3, r3, r2
 800333a:	42bb      	cmp	r3, r7
 800333c:	dcf1      	bgt.n	8003322 <_printf_float+0x41a>
 800333e:	e702      	b.n	8003146 <_printf_float+0x23e>
 8003340:	2700      	movs	r7, #0
 8003342:	f104 0819 	add.w	r8, r4, #25
 8003346:	e7f5      	b.n	8003334 <_printf_float+0x42c>
 8003348:	2b00      	cmp	r3, #0
 800334a:	f43f ae94 	beq.w	8003076 <_printf_float+0x16e>
 800334e:	f04f 0c00 	mov.w	ip, #0
 8003352:	e9cd 1c05 	strd	r1, ip, [sp, #20]
 8003356:	f10d 0133 	add.w	r1, sp, #51	; 0x33
 800335a:	6022      	str	r2, [r4, #0]
 800335c:	e9cd 0803 	strd	r0, r8, [sp, #12]
 8003360:	e9cd 2101 	strd	r2, r1, [sp, #4]
 8003364:	9300      	str	r3, [sp, #0]
 8003366:	463a      	mov	r2, r7
 8003368:	464b      	mov	r3, r9
 800336a:	4628      	mov	r0, r5
 800336c:	f7ff fd3a 	bl	8002de4 <__cvt>
 8003370:	4607      	mov	r7, r0
 8003372:	e64f      	b.n	8003014 <_printf_float+0x10c>

08003374 <_printf_common>:
 8003374:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003378:	4691      	mov	r9, r2
 800337a:	461f      	mov	r7, r3
 800337c:	688a      	ldr	r2, [r1, #8]
 800337e:	690b      	ldr	r3, [r1, #16]
 8003380:	4606      	mov	r6, r0
 8003382:	4293      	cmp	r3, r2
 8003384:	bfb8      	it	lt
 8003386:	4613      	movlt	r3, r2
 8003388:	f8c9 3000 	str.w	r3, [r9]
 800338c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003390:	460c      	mov	r4, r1
 8003392:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003396:	b112      	cbz	r2, 800339e <_printf_common+0x2a>
 8003398:	3301      	adds	r3, #1
 800339a:	f8c9 3000 	str.w	r3, [r9]
 800339e:	6823      	ldr	r3, [r4, #0]
 80033a0:	0699      	lsls	r1, r3, #26
 80033a2:	bf42      	ittt	mi
 80033a4:	f8d9 3000 	ldrmi.w	r3, [r9]
 80033a8:	3302      	addmi	r3, #2
 80033aa:	f8c9 3000 	strmi.w	r3, [r9]
 80033ae:	6825      	ldr	r5, [r4, #0]
 80033b0:	f015 0506 	ands.w	r5, r5, #6
 80033b4:	d107      	bne.n	80033c6 <_printf_common+0x52>
 80033b6:	f104 0a19 	add.w	sl, r4, #25
 80033ba:	68e3      	ldr	r3, [r4, #12]
 80033bc:	f8d9 2000 	ldr.w	r2, [r9]
 80033c0:	1a9b      	subs	r3, r3, r2
 80033c2:	42ab      	cmp	r3, r5
 80033c4:	dc29      	bgt.n	800341a <_printf_common+0xa6>
 80033c6:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80033ca:	6822      	ldr	r2, [r4, #0]
 80033cc:	3300      	adds	r3, #0
 80033ce:	bf18      	it	ne
 80033d0:	2301      	movne	r3, #1
 80033d2:	0692      	lsls	r2, r2, #26
 80033d4:	d42e      	bmi.n	8003434 <_printf_common+0xc0>
 80033d6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80033da:	4639      	mov	r1, r7
 80033dc:	4630      	mov	r0, r6
 80033de:	47c0      	blx	r8
 80033e0:	3001      	adds	r0, #1
 80033e2:	d021      	beq.n	8003428 <_printf_common+0xb4>
 80033e4:	6823      	ldr	r3, [r4, #0]
 80033e6:	68e5      	ldr	r5, [r4, #12]
 80033e8:	f003 0306 	and.w	r3, r3, #6
 80033ec:	2b04      	cmp	r3, #4
 80033ee:	bf18      	it	ne
 80033f0:	2500      	movne	r5, #0
 80033f2:	f8d9 2000 	ldr.w	r2, [r9]
 80033f6:	f04f 0900 	mov.w	r9, #0
 80033fa:	bf08      	it	eq
 80033fc:	1aad      	subeq	r5, r5, r2
 80033fe:	68a3      	ldr	r3, [r4, #8]
 8003400:	6922      	ldr	r2, [r4, #16]
 8003402:	bf08      	it	eq
 8003404:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003408:	4293      	cmp	r3, r2
 800340a:	bfc4      	itt	gt
 800340c:	1a9b      	subgt	r3, r3, r2
 800340e:	18ed      	addgt	r5, r5, r3
 8003410:	341a      	adds	r4, #26
 8003412:	454d      	cmp	r5, r9
 8003414:	d11a      	bne.n	800344c <_printf_common+0xd8>
 8003416:	2000      	movs	r0, #0
 8003418:	e008      	b.n	800342c <_printf_common+0xb8>
 800341a:	2301      	movs	r3, #1
 800341c:	4652      	mov	r2, sl
 800341e:	4639      	mov	r1, r7
 8003420:	4630      	mov	r0, r6
 8003422:	47c0      	blx	r8
 8003424:	3001      	adds	r0, #1
 8003426:	d103      	bne.n	8003430 <_printf_common+0xbc>
 8003428:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800342c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003430:	3501      	adds	r5, #1
 8003432:	e7c2      	b.n	80033ba <_printf_common+0x46>
 8003434:	2030      	movs	r0, #48	; 0x30
 8003436:	18e1      	adds	r1, r4, r3
 8003438:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800343c:	1c5a      	adds	r2, r3, #1
 800343e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003442:	4422      	add	r2, r4
 8003444:	3302      	adds	r3, #2
 8003446:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800344a:	e7c4      	b.n	80033d6 <_printf_common+0x62>
 800344c:	2301      	movs	r3, #1
 800344e:	4622      	mov	r2, r4
 8003450:	4639      	mov	r1, r7
 8003452:	4630      	mov	r0, r6
 8003454:	47c0      	blx	r8
 8003456:	3001      	adds	r0, #1
 8003458:	d0e6      	beq.n	8003428 <_printf_common+0xb4>
 800345a:	f109 0901 	add.w	r9, r9, #1
 800345e:	e7d8      	b.n	8003412 <_printf_common+0x9e>

08003460 <_printf_i>:
 8003460:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003464:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8003468:	460c      	mov	r4, r1
 800346a:	7e09      	ldrb	r1, [r1, #24]
 800346c:	b085      	sub	sp, #20
 800346e:	296e      	cmp	r1, #110	; 0x6e
 8003470:	4617      	mov	r7, r2
 8003472:	4606      	mov	r6, r0
 8003474:	4698      	mov	r8, r3
 8003476:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8003478:	f000 80b3 	beq.w	80035e2 <_printf_i+0x182>
 800347c:	d822      	bhi.n	80034c4 <_printf_i+0x64>
 800347e:	2963      	cmp	r1, #99	; 0x63
 8003480:	d036      	beq.n	80034f0 <_printf_i+0x90>
 8003482:	d80a      	bhi.n	800349a <_printf_i+0x3a>
 8003484:	2900      	cmp	r1, #0
 8003486:	f000 80b9 	beq.w	80035fc <_printf_i+0x19c>
 800348a:	2958      	cmp	r1, #88	; 0x58
 800348c:	f000 8083 	beq.w	8003596 <_printf_i+0x136>
 8003490:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003494:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8003498:	e032      	b.n	8003500 <_printf_i+0xa0>
 800349a:	2964      	cmp	r1, #100	; 0x64
 800349c:	d001      	beq.n	80034a2 <_printf_i+0x42>
 800349e:	2969      	cmp	r1, #105	; 0x69
 80034a0:	d1f6      	bne.n	8003490 <_printf_i+0x30>
 80034a2:	6820      	ldr	r0, [r4, #0]
 80034a4:	6813      	ldr	r3, [r2, #0]
 80034a6:	0605      	lsls	r5, r0, #24
 80034a8:	f103 0104 	add.w	r1, r3, #4
 80034ac:	d52a      	bpl.n	8003504 <_printf_i+0xa4>
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	6011      	str	r1, [r2, #0]
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	da03      	bge.n	80034be <_printf_i+0x5e>
 80034b6:	222d      	movs	r2, #45	; 0x2d
 80034b8:	425b      	negs	r3, r3
 80034ba:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 80034be:	486f      	ldr	r0, [pc, #444]	; (800367c <_printf_i+0x21c>)
 80034c0:	220a      	movs	r2, #10
 80034c2:	e039      	b.n	8003538 <_printf_i+0xd8>
 80034c4:	2973      	cmp	r1, #115	; 0x73
 80034c6:	f000 809d 	beq.w	8003604 <_printf_i+0x1a4>
 80034ca:	d808      	bhi.n	80034de <_printf_i+0x7e>
 80034cc:	296f      	cmp	r1, #111	; 0x6f
 80034ce:	d020      	beq.n	8003512 <_printf_i+0xb2>
 80034d0:	2970      	cmp	r1, #112	; 0x70
 80034d2:	d1dd      	bne.n	8003490 <_printf_i+0x30>
 80034d4:	6823      	ldr	r3, [r4, #0]
 80034d6:	f043 0320 	orr.w	r3, r3, #32
 80034da:	6023      	str	r3, [r4, #0]
 80034dc:	e003      	b.n	80034e6 <_printf_i+0x86>
 80034de:	2975      	cmp	r1, #117	; 0x75
 80034e0:	d017      	beq.n	8003512 <_printf_i+0xb2>
 80034e2:	2978      	cmp	r1, #120	; 0x78
 80034e4:	d1d4      	bne.n	8003490 <_printf_i+0x30>
 80034e6:	2378      	movs	r3, #120	; 0x78
 80034e8:	4865      	ldr	r0, [pc, #404]	; (8003680 <_printf_i+0x220>)
 80034ea:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80034ee:	e055      	b.n	800359c <_printf_i+0x13c>
 80034f0:	6813      	ldr	r3, [r2, #0]
 80034f2:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80034f6:	1d19      	adds	r1, r3, #4
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	6011      	str	r1, [r2, #0]
 80034fc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003500:	2301      	movs	r3, #1
 8003502:	e08c      	b.n	800361e <_printf_i+0x1be>
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	f010 0f40 	tst.w	r0, #64	; 0x40
 800350a:	6011      	str	r1, [r2, #0]
 800350c:	bf18      	it	ne
 800350e:	b21b      	sxthne	r3, r3
 8003510:	e7cf      	b.n	80034b2 <_printf_i+0x52>
 8003512:	6813      	ldr	r3, [r2, #0]
 8003514:	6825      	ldr	r5, [r4, #0]
 8003516:	1d18      	adds	r0, r3, #4
 8003518:	6010      	str	r0, [r2, #0]
 800351a:	0628      	lsls	r0, r5, #24
 800351c:	d501      	bpl.n	8003522 <_printf_i+0xc2>
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	e002      	b.n	8003528 <_printf_i+0xc8>
 8003522:	0668      	lsls	r0, r5, #25
 8003524:	d5fb      	bpl.n	800351e <_printf_i+0xbe>
 8003526:	881b      	ldrh	r3, [r3, #0]
 8003528:	296f      	cmp	r1, #111	; 0x6f
 800352a:	bf14      	ite	ne
 800352c:	220a      	movne	r2, #10
 800352e:	2208      	moveq	r2, #8
 8003530:	4852      	ldr	r0, [pc, #328]	; (800367c <_printf_i+0x21c>)
 8003532:	2100      	movs	r1, #0
 8003534:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003538:	6865      	ldr	r5, [r4, #4]
 800353a:	2d00      	cmp	r5, #0
 800353c:	60a5      	str	r5, [r4, #8]
 800353e:	f2c0 8095 	blt.w	800366c <_printf_i+0x20c>
 8003542:	6821      	ldr	r1, [r4, #0]
 8003544:	f021 0104 	bic.w	r1, r1, #4
 8003548:	6021      	str	r1, [r4, #0]
 800354a:	2b00      	cmp	r3, #0
 800354c:	d13d      	bne.n	80035ca <_printf_i+0x16a>
 800354e:	2d00      	cmp	r5, #0
 8003550:	f040 808e 	bne.w	8003670 <_printf_i+0x210>
 8003554:	4665      	mov	r5, ip
 8003556:	2a08      	cmp	r2, #8
 8003558:	d10b      	bne.n	8003572 <_printf_i+0x112>
 800355a:	6823      	ldr	r3, [r4, #0]
 800355c:	07db      	lsls	r3, r3, #31
 800355e:	d508      	bpl.n	8003572 <_printf_i+0x112>
 8003560:	6923      	ldr	r3, [r4, #16]
 8003562:	6862      	ldr	r2, [r4, #4]
 8003564:	429a      	cmp	r2, r3
 8003566:	bfde      	ittt	le
 8003568:	2330      	movle	r3, #48	; 0x30
 800356a:	f805 3c01 	strble.w	r3, [r5, #-1]
 800356e:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8003572:	ebac 0305 	sub.w	r3, ip, r5
 8003576:	6123      	str	r3, [r4, #16]
 8003578:	f8cd 8000 	str.w	r8, [sp]
 800357c:	463b      	mov	r3, r7
 800357e:	aa03      	add	r2, sp, #12
 8003580:	4621      	mov	r1, r4
 8003582:	4630      	mov	r0, r6
 8003584:	f7ff fef6 	bl	8003374 <_printf_common>
 8003588:	3001      	adds	r0, #1
 800358a:	d14d      	bne.n	8003628 <_printf_i+0x1c8>
 800358c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003590:	b005      	add	sp, #20
 8003592:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8003596:	4839      	ldr	r0, [pc, #228]	; (800367c <_printf_i+0x21c>)
 8003598:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800359c:	6813      	ldr	r3, [r2, #0]
 800359e:	6821      	ldr	r1, [r4, #0]
 80035a0:	1d1d      	adds	r5, r3, #4
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	6015      	str	r5, [r2, #0]
 80035a6:	060a      	lsls	r2, r1, #24
 80035a8:	d50b      	bpl.n	80035c2 <_printf_i+0x162>
 80035aa:	07ca      	lsls	r2, r1, #31
 80035ac:	bf44      	itt	mi
 80035ae:	f041 0120 	orrmi.w	r1, r1, #32
 80035b2:	6021      	strmi	r1, [r4, #0]
 80035b4:	b91b      	cbnz	r3, 80035be <_printf_i+0x15e>
 80035b6:	6822      	ldr	r2, [r4, #0]
 80035b8:	f022 0220 	bic.w	r2, r2, #32
 80035bc:	6022      	str	r2, [r4, #0]
 80035be:	2210      	movs	r2, #16
 80035c0:	e7b7      	b.n	8003532 <_printf_i+0xd2>
 80035c2:	064d      	lsls	r5, r1, #25
 80035c4:	bf48      	it	mi
 80035c6:	b29b      	uxthmi	r3, r3
 80035c8:	e7ef      	b.n	80035aa <_printf_i+0x14a>
 80035ca:	4665      	mov	r5, ip
 80035cc:	fbb3 f1f2 	udiv	r1, r3, r2
 80035d0:	fb02 3311 	mls	r3, r2, r1, r3
 80035d4:	5cc3      	ldrb	r3, [r0, r3]
 80035d6:	f805 3d01 	strb.w	r3, [r5, #-1]!
 80035da:	460b      	mov	r3, r1
 80035dc:	2900      	cmp	r1, #0
 80035de:	d1f5      	bne.n	80035cc <_printf_i+0x16c>
 80035e0:	e7b9      	b.n	8003556 <_printf_i+0xf6>
 80035e2:	6813      	ldr	r3, [r2, #0]
 80035e4:	6825      	ldr	r5, [r4, #0]
 80035e6:	1d18      	adds	r0, r3, #4
 80035e8:	6961      	ldr	r1, [r4, #20]
 80035ea:	6010      	str	r0, [r2, #0]
 80035ec:	0628      	lsls	r0, r5, #24
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	d501      	bpl.n	80035f6 <_printf_i+0x196>
 80035f2:	6019      	str	r1, [r3, #0]
 80035f4:	e002      	b.n	80035fc <_printf_i+0x19c>
 80035f6:	066a      	lsls	r2, r5, #25
 80035f8:	d5fb      	bpl.n	80035f2 <_printf_i+0x192>
 80035fa:	8019      	strh	r1, [r3, #0]
 80035fc:	2300      	movs	r3, #0
 80035fe:	4665      	mov	r5, ip
 8003600:	6123      	str	r3, [r4, #16]
 8003602:	e7b9      	b.n	8003578 <_printf_i+0x118>
 8003604:	6813      	ldr	r3, [r2, #0]
 8003606:	1d19      	adds	r1, r3, #4
 8003608:	6011      	str	r1, [r2, #0]
 800360a:	681d      	ldr	r5, [r3, #0]
 800360c:	6862      	ldr	r2, [r4, #4]
 800360e:	2100      	movs	r1, #0
 8003610:	4628      	mov	r0, r5
 8003612:	f000 feaf 	bl	8004374 <memchr>
 8003616:	b108      	cbz	r0, 800361c <_printf_i+0x1bc>
 8003618:	1b40      	subs	r0, r0, r5
 800361a:	6060      	str	r0, [r4, #4]
 800361c:	6863      	ldr	r3, [r4, #4]
 800361e:	6123      	str	r3, [r4, #16]
 8003620:	2300      	movs	r3, #0
 8003622:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003626:	e7a7      	b.n	8003578 <_printf_i+0x118>
 8003628:	6923      	ldr	r3, [r4, #16]
 800362a:	462a      	mov	r2, r5
 800362c:	4639      	mov	r1, r7
 800362e:	4630      	mov	r0, r6
 8003630:	47c0      	blx	r8
 8003632:	3001      	adds	r0, #1
 8003634:	d0aa      	beq.n	800358c <_printf_i+0x12c>
 8003636:	6823      	ldr	r3, [r4, #0]
 8003638:	079b      	lsls	r3, r3, #30
 800363a:	d413      	bmi.n	8003664 <_printf_i+0x204>
 800363c:	68e0      	ldr	r0, [r4, #12]
 800363e:	9b03      	ldr	r3, [sp, #12]
 8003640:	4298      	cmp	r0, r3
 8003642:	bfb8      	it	lt
 8003644:	4618      	movlt	r0, r3
 8003646:	e7a3      	b.n	8003590 <_printf_i+0x130>
 8003648:	2301      	movs	r3, #1
 800364a:	464a      	mov	r2, r9
 800364c:	4639      	mov	r1, r7
 800364e:	4630      	mov	r0, r6
 8003650:	47c0      	blx	r8
 8003652:	3001      	adds	r0, #1
 8003654:	d09a      	beq.n	800358c <_printf_i+0x12c>
 8003656:	3501      	adds	r5, #1
 8003658:	68e3      	ldr	r3, [r4, #12]
 800365a:	9a03      	ldr	r2, [sp, #12]
 800365c:	1a9b      	subs	r3, r3, r2
 800365e:	42ab      	cmp	r3, r5
 8003660:	dcf2      	bgt.n	8003648 <_printf_i+0x1e8>
 8003662:	e7eb      	b.n	800363c <_printf_i+0x1dc>
 8003664:	2500      	movs	r5, #0
 8003666:	f104 0919 	add.w	r9, r4, #25
 800366a:	e7f5      	b.n	8003658 <_printf_i+0x1f8>
 800366c:	2b00      	cmp	r3, #0
 800366e:	d1ac      	bne.n	80035ca <_printf_i+0x16a>
 8003670:	7803      	ldrb	r3, [r0, #0]
 8003672:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003676:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800367a:	e76c      	b.n	8003556 <_printf_i+0xf6>
 800367c:	08004ed2 	.word	0x08004ed2
 8003680:	08004ee3 	.word	0x08004ee3

08003684 <siprintf>:
 8003684:	b40e      	push	{r1, r2, r3}
 8003686:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800368a:	b500      	push	{lr}
 800368c:	b09c      	sub	sp, #112	; 0x70
 800368e:	ab1d      	add	r3, sp, #116	; 0x74
 8003690:	9002      	str	r0, [sp, #8]
 8003692:	9006      	str	r0, [sp, #24]
 8003694:	9107      	str	r1, [sp, #28]
 8003696:	9104      	str	r1, [sp, #16]
 8003698:	4808      	ldr	r0, [pc, #32]	; (80036bc <siprintf+0x38>)
 800369a:	4909      	ldr	r1, [pc, #36]	; (80036c0 <siprintf+0x3c>)
 800369c:	f853 2b04 	ldr.w	r2, [r3], #4
 80036a0:	9105      	str	r1, [sp, #20]
 80036a2:	6800      	ldr	r0, [r0, #0]
 80036a4:	a902      	add	r1, sp, #8
 80036a6:	9301      	str	r3, [sp, #4]
 80036a8:	f001 fa68 	bl	8004b7c <_svfiprintf_r>
 80036ac:	2200      	movs	r2, #0
 80036ae:	9b02      	ldr	r3, [sp, #8]
 80036b0:	701a      	strb	r2, [r3, #0]
 80036b2:	b01c      	add	sp, #112	; 0x70
 80036b4:	f85d eb04 	ldr.w	lr, [sp], #4
 80036b8:	b003      	add	sp, #12
 80036ba:	4770      	bx	lr
 80036bc:	20000014 	.word	0x20000014
 80036c0:	ffff0208 	.word	0xffff0208

080036c4 <quorem>:
 80036c4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80036c8:	6903      	ldr	r3, [r0, #16]
 80036ca:	690c      	ldr	r4, [r1, #16]
 80036cc:	4680      	mov	r8, r0
 80036ce:	42a3      	cmp	r3, r4
 80036d0:	f2c0 8084 	blt.w	80037dc <quorem+0x118>
 80036d4:	3c01      	subs	r4, #1
 80036d6:	f101 0714 	add.w	r7, r1, #20
 80036da:	f100 0614 	add.w	r6, r0, #20
 80036de:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 80036e2:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 80036e6:	3501      	adds	r5, #1
 80036e8:	fbb0 f5f5 	udiv	r5, r0, r5
 80036ec:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 80036f0:	eb06 030c 	add.w	r3, r6, ip
 80036f4:	eb07 090c 	add.w	r9, r7, ip
 80036f8:	9301      	str	r3, [sp, #4]
 80036fa:	b39d      	cbz	r5, 8003764 <quorem+0xa0>
 80036fc:	f04f 0a00 	mov.w	sl, #0
 8003700:	4638      	mov	r0, r7
 8003702:	46b6      	mov	lr, r6
 8003704:	46d3      	mov	fp, sl
 8003706:	f850 2b04 	ldr.w	r2, [r0], #4
 800370a:	b293      	uxth	r3, r2
 800370c:	fb05 a303 	mla	r3, r5, r3, sl
 8003710:	0c12      	lsrs	r2, r2, #16
 8003712:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8003716:	fb05 a202 	mla	r2, r5, r2, sl
 800371a:	b29b      	uxth	r3, r3
 800371c:	ebab 0303 	sub.w	r3, fp, r3
 8003720:	f8de b000 	ldr.w	fp, [lr]
 8003724:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 8003728:	fa1f fb8b 	uxth.w	fp, fp
 800372c:	445b      	add	r3, fp
 800372e:	fa1f fb82 	uxth.w	fp, r2
 8003732:	f8de 2000 	ldr.w	r2, [lr]
 8003736:	4581      	cmp	r9, r0
 8003738:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 800373c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8003740:	b29b      	uxth	r3, r3
 8003742:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8003746:	ea4f 4b22 	mov.w	fp, r2, asr #16
 800374a:	f84e 3b04 	str.w	r3, [lr], #4
 800374e:	d2da      	bcs.n	8003706 <quorem+0x42>
 8003750:	f856 300c 	ldr.w	r3, [r6, ip]
 8003754:	b933      	cbnz	r3, 8003764 <quorem+0xa0>
 8003756:	9b01      	ldr	r3, [sp, #4]
 8003758:	3b04      	subs	r3, #4
 800375a:	429e      	cmp	r6, r3
 800375c:	461a      	mov	r2, r3
 800375e:	d331      	bcc.n	80037c4 <quorem+0x100>
 8003760:	f8c8 4010 	str.w	r4, [r8, #16]
 8003764:	4640      	mov	r0, r8
 8003766:	f001 f833 	bl	80047d0 <__mcmp>
 800376a:	2800      	cmp	r0, #0
 800376c:	db26      	blt.n	80037bc <quorem+0xf8>
 800376e:	4630      	mov	r0, r6
 8003770:	f04f 0c00 	mov.w	ip, #0
 8003774:	3501      	adds	r5, #1
 8003776:	f857 1b04 	ldr.w	r1, [r7], #4
 800377a:	f8d0 e000 	ldr.w	lr, [r0]
 800377e:	b28b      	uxth	r3, r1
 8003780:	ebac 0303 	sub.w	r3, ip, r3
 8003784:	fa1f f28e 	uxth.w	r2, lr
 8003788:	4413      	add	r3, r2
 800378a:	0c0a      	lsrs	r2, r1, #16
 800378c:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8003790:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8003794:	b29b      	uxth	r3, r3
 8003796:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800379a:	45b9      	cmp	r9, r7
 800379c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80037a0:	f840 3b04 	str.w	r3, [r0], #4
 80037a4:	d2e7      	bcs.n	8003776 <quorem+0xb2>
 80037a6:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 80037aa:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 80037ae:	b92a      	cbnz	r2, 80037bc <quorem+0xf8>
 80037b0:	3b04      	subs	r3, #4
 80037b2:	429e      	cmp	r6, r3
 80037b4:	461a      	mov	r2, r3
 80037b6:	d30b      	bcc.n	80037d0 <quorem+0x10c>
 80037b8:	f8c8 4010 	str.w	r4, [r8, #16]
 80037bc:	4628      	mov	r0, r5
 80037be:	b003      	add	sp, #12
 80037c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80037c4:	6812      	ldr	r2, [r2, #0]
 80037c6:	3b04      	subs	r3, #4
 80037c8:	2a00      	cmp	r2, #0
 80037ca:	d1c9      	bne.n	8003760 <quorem+0x9c>
 80037cc:	3c01      	subs	r4, #1
 80037ce:	e7c4      	b.n	800375a <quorem+0x96>
 80037d0:	6812      	ldr	r2, [r2, #0]
 80037d2:	3b04      	subs	r3, #4
 80037d4:	2a00      	cmp	r2, #0
 80037d6:	d1ef      	bne.n	80037b8 <quorem+0xf4>
 80037d8:	3c01      	subs	r4, #1
 80037da:	e7ea      	b.n	80037b2 <quorem+0xee>
 80037dc:	2000      	movs	r0, #0
 80037de:	e7ee      	b.n	80037be <quorem+0xfa>

080037e0 <_dtoa_r>:
 80037e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80037e4:	4616      	mov	r6, r2
 80037e6:	461f      	mov	r7, r3
 80037e8:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80037ea:	b095      	sub	sp, #84	; 0x54
 80037ec:	4604      	mov	r4, r0
 80037ee:	f8dd 8084 	ldr.w	r8, [sp, #132]	; 0x84
 80037f2:	e9cd 6702 	strd	r6, r7, [sp, #8]
 80037f6:	b93d      	cbnz	r5, 8003808 <_dtoa_r+0x28>
 80037f8:	2010      	movs	r0, #16
 80037fa:	f000 fdb3 	bl	8004364 <malloc>
 80037fe:	6260      	str	r0, [r4, #36]	; 0x24
 8003800:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8003804:	6005      	str	r5, [r0, #0]
 8003806:	60c5      	str	r5, [r0, #12]
 8003808:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800380a:	6819      	ldr	r1, [r3, #0]
 800380c:	b151      	cbz	r1, 8003824 <_dtoa_r+0x44>
 800380e:	685a      	ldr	r2, [r3, #4]
 8003810:	2301      	movs	r3, #1
 8003812:	4093      	lsls	r3, r2
 8003814:	604a      	str	r2, [r1, #4]
 8003816:	608b      	str	r3, [r1, #8]
 8003818:	4620      	mov	r0, r4
 800381a:	f000 fdf8 	bl	800440e <_Bfree>
 800381e:	2200      	movs	r2, #0
 8003820:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003822:	601a      	str	r2, [r3, #0]
 8003824:	1e3b      	subs	r3, r7, #0
 8003826:	bfaf      	iteee	ge
 8003828:	2300      	movge	r3, #0
 800382a:	2201      	movlt	r2, #1
 800382c:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8003830:	9303      	strlt	r3, [sp, #12]
 8003832:	bfac      	ite	ge
 8003834:	f8c8 3000 	strge.w	r3, [r8]
 8003838:	f8c8 2000 	strlt.w	r2, [r8]
 800383c:	4bae      	ldr	r3, [pc, #696]	; (8003af8 <_dtoa_r+0x318>)
 800383e:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8003842:	ea33 0308 	bics.w	r3, r3, r8
 8003846:	d11b      	bne.n	8003880 <_dtoa_r+0xa0>
 8003848:	f242 730f 	movw	r3, #9999	; 0x270f
 800384c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800384e:	6013      	str	r3, [r2, #0]
 8003850:	9b02      	ldr	r3, [sp, #8]
 8003852:	b923      	cbnz	r3, 800385e <_dtoa_r+0x7e>
 8003854:	f3c8 0013 	ubfx	r0, r8, #0, #20
 8003858:	2800      	cmp	r0, #0
 800385a:	f000 8545 	beq.w	80042e8 <_dtoa_r+0xb08>
 800385e:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8003860:	b953      	cbnz	r3, 8003878 <_dtoa_r+0x98>
 8003862:	4ba6      	ldr	r3, [pc, #664]	; (8003afc <_dtoa_r+0x31c>)
 8003864:	e021      	b.n	80038aa <_dtoa_r+0xca>
 8003866:	4ba6      	ldr	r3, [pc, #664]	; (8003b00 <_dtoa_r+0x320>)
 8003868:	9306      	str	r3, [sp, #24]
 800386a:	3308      	adds	r3, #8
 800386c:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800386e:	6013      	str	r3, [r2, #0]
 8003870:	9806      	ldr	r0, [sp, #24]
 8003872:	b015      	add	sp, #84	; 0x54
 8003874:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003878:	4ba0      	ldr	r3, [pc, #640]	; (8003afc <_dtoa_r+0x31c>)
 800387a:	9306      	str	r3, [sp, #24]
 800387c:	3303      	adds	r3, #3
 800387e:	e7f5      	b.n	800386c <_dtoa_r+0x8c>
 8003880:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8003884:	2200      	movs	r2, #0
 8003886:	2300      	movs	r3, #0
 8003888:	4630      	mov	r0, r6
 800388a:	4639      	mov	r1, r7
 800388c:	f7fd f88c 	bl	80009a8 <__aeabi_dcmpeq>
 8003890:	4682      	mov	sl, r0
 8003892:	b160      	cbz	r0, 80038ae <_dtoa_r+0xce>
 8003894:	2301      	movs	r3, #1
 8003896:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8003898:	6013      	str	r3, [r2, #0]
 800389a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800389c:	2b00      	cmp	r3, #0
 800389e:	f000 8520 	beq.w	80042e2 <_dtoa_r+0xb02>
 80038a2:	4b98      	ldr	r3, [pc, #608]	; (8003b04 <_dtoa_r+0x324>)
 80038a4:	9a22      	ldr	r2, [sp, #136]	; 0x88
 80038a6:	6013      	str	r3, [r2, #0]
 80038a8:	3b01      	subs	r3, #1
 80038aa:	9306      	str	r3, [sp, #24]
 80038ac:	e7e0      	b.n	8003870 <_dtoa_r+0x90>
 80038ae:	ab12      	add	r3, sp, #72	; 0x48
 80038b0:	9301      	str	r3, [sp, #4]
 80038b2:	ab13      	add	r3, sp, #76	; 0x4c
 80038b4:	9300      	str	r3, [sp, #0]
 80038b6:	4632      	mov	r2, r6
 80038b8:	463b      	mov	r3, r7
 80038ba:	4620      	mov	r0, r4
 80038bc:	f001 f800 	bl	80048c0 <__d2b>
 80038c0:	f3c8 550a 	ubfx	r5, r8, #20, #11
 80038c4:	4683      	mov	fp, r0
 80038c6:	2d00      	cmp	r5, #0
 80038c8:	d07d      	beq.n	80039c6 <_dtoa_r+0x1e6>
 80038ca:	46b0      	mov	r8, r6
 80038cc:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80038d0:	f043 597f 	orr.w	r9, r3, #1069547520	; 0x3fc00000
 80038d4:	f449 1940 	orr.w	r9, r9, #3145728	; 0x300000
 80038d8:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80038dc:	f8cd a040 	str.w	sl, [sp, #64]	; 0x40
 80038e0:	2200      	movs	r2, #0
 80038e2:	4b89      	ldr	r3, [pc, #548]	; (8003b08 <_dtoa_r+0x328>)
 80038e4:	4640      	mov	r0, r8
 80038e6:	4649      	mov	r1, r9
 80038e8:	f7fc fc3e 	bl	8000168 <__aeabi_dsub>
 80038ec:	a37c      	add	r3, pc, #496	; (adr r3, 8003ae0 <_dtoa_r+0x300>)
 80038ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038f2:	f7fc fdf1 	bl	80004d8 <__aeabi_dmul>
 80038f6:	a37c      	add	r3, pc, #496	; (adr r3, 8003ae8 <_dtoa_r+0x308>)
 80038f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038fc:	f7fc fc36 	bl	800016c <__adddf3>
 8003900:	4606      	mov	r6, r0
 8003902:	4628      	mov	r0, r5
 8003904:	460f      	mov	r7, r1
 8003906:	f7fc fd7d 	bl	8000404 <__aeabi_i2d>
 800390a:	a379      	add	r3, pc, #484	; (adr r3, 8003af0 <_dtoa_r+0x310>)
 800390c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003910:	f7fc fde2 	bl	80004d8 <__aeabi_dmul>
 8003914:	4602      	mov	r2, r0
 8003916:	460b      	mov	r3, r1
 8003918:	4630      	mov	r0, r6
 800391a:	4639      	mov	r1, r7
 800391c:	f7fc fc26 	bl	800016c <__adddf3>
 8003920:	4606      	mov	r6, r0
 8003922:	460f      	mov	r7, r1
 8003924:	f7fd f888 	bl	8000a38 <__aeabi_d2iz>
 8003928:	2200      	movs	r2, #0
 800392a:	4682      	mov	sl, r0
 800392c:	2300      	movs	r3, #0
 800392e:	4630      	mov	r0, r6
 8003930:	4639      	mov	r1, r7
 8003932:	f7fd f843 	bl	80009bc <__aeabi_dcmplt>
 8003936:	b148      	cbz	r0, 800394c <_dtoa_r+0x16c>
 8003938:	4650      	mov	r0, sl
 800393a:	f7fc fd63 	bl	8000404 <__aeabi_i2d>
 800393e:	4632      	mov	r2, r6
 8003940:	463b      	mov	r3, r7
 8003942:	f7fd f831 	bl	80009a8 <__aeabi_dcmpeq>
 8003946:	b908      	cbnz	r0, 800394c <_dtoa_r+0x16c>
 8003948:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800394c:	f1ba 0f16 	cmp.w	sl, #22
 8003950:	d85a      	bhi.n	8003a08 <_dtoa_r+0x228>
 8003952:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8003956:	496d      	ldr	r1, [pc, #436]	; (8003b0c <_dtoa_r+0x32c>)
 8003958:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 800395c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003960:	f7fd f84a 	bl	80009f8 <__aeabi_dcmpgt>
 8003964:	2800      	cmp	r0, #0
 8003966:	d051      	beq.n	8003a0c <_dtoa_r+0x22c>
 8003968:	2300      	movs	r3, #0
 800396a:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800396e:	930d      	str	r3, [sp, #52]	; 0x34
 8003970:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8003972:	1b5d      	subs	r5, r3, r5
 8003974:	1e6b      	subs	r3, r5, #1
 8003976:	9307      	str	r3, [sp, #28]
 8003978:	bf43      	ittte	mi
 800397a:	2300      	movmi	r3, #0
 800397c:	f1c5 0901 	rsbmi	r9, r5, #1
 8003980:	9307      	strmi	r3, [sp, #28]
 8003982:	f04f 0900 	movpl.w	r9, #0
 8003986:	f1ba 0f00 	cmp.w	sl, #0
 800398a:	db41      	blt.n	8003a10 <_dtoa_r+0x230>
 800398c:	9b07      	ldr	r3, [sp, #28]
 800398e:	f8cd a030 	str.w	sl, [sp, #48]	; 0x30
 8003992:	4453      	add	r3, sl
 8003994:	9307      	str	r3, [sp, #28]
 8003996:	2300      	movs	r3, #0
 8003998:	9308      	str	r3, [sp, #32]
 800399a:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800399c:	2b09      	cmp	r3, #9
 800399e:	f200 808f 	bhi.w	8003ac0 <_dtoa_r+0x2e0>
 80039a2:	2b05      	cmp	r3, #5
 80039a4:	bfc4      	itt	gt
 80039a6:	3b04      	subgt	r3, #4
 80039a8:	931e      	strgt	r3, [sp, #120]	; 0x78
 80039aa:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80039ac:	bfc8      	it	gt
 80039ae:	2500      	movgt	r5, #0
 80039b0:	f1a3 0302 	sub.w	r3, r3, #2
 80039b4:	bfd8      	it	le
 80039b6:	2501      	movle	r5, #1
 80039b8:	2b03      	cmp	r3, #3
 80039ba:	f200 808d 	bhi.w	8003ad8 <_dtoa_r+0x2f8>
 80039be:	e8df f003 	tbb	[pc, r3]
 80039c2:	7d7b      	.short	0x7d7b
 80039c4:	6f2f      	.short	0x6f2f
 80039c6:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 80039ca:	441d      	add	r5, r3
 80039cc:	f205 4032 	addw	r0, r5, #1074	; 0x432
 80039d0:	2820      	cmp	r0, #32
 80039d2:	dd13      	ble.n	80039fc <_dtoa_r+0x21c>
 80039d4:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 80039d8:	9b02      	ldr	r3, [sp, #8]
 80039da:	fa08 f800 	lsl.w	r8, r8, r0
 80039de:	f205 4012 	addw	r0, r5, #1042	; 0x412
 80039e2:	fa23 f000 	lsr.w	r0, r3, r0
 80039e6:	ea48 0000 	orr.w	r0, r8, r0
 80039ea:	f7fc fcfb 	bl	80003e4 <__aeabi_ui2d>
 80039ee:	2301      	movs	r3, #1
 80039f0:	4680      	mov	r8, r0
 80039f2:	f1a1 79f8 	sub.w	r9, r1, #32505856	; 0x1f00000
 80039f6:	3d01      	subs	r5, #1
 80039f8:	9310      	str	r3, [sp, #64]	; 0x40
 80039fa:	e771      	b.n	80038e0 <_dtoa_r+0x100>
 80039fc:	9b02      	ldr	r3, [sp, #8]
 80039fe:	f1c0 0020 	rsb	r0, r0, #32
 8003a02:	fa03 f000 	lsl.w	r0, r3, r0
 8003a06:	e7f0      	b.n	80039ea <_dtoa_r+0x20a>
 8003a08:	2301      	movs	r3, #1
 8003a0a:	e7b0      	b.n	800396e <_dtoa_r+0x18e>
 8003a0c:	900d      	str	r0, [sp, #52]	; 0x34
 8003a0e:	e7af      	b.n	8003970 <_dtoa_r+0x190>
 8003a10:	f1ca 0300 	rsb	r3, sl, #0
 8003a14:	9308      	str	r3, [sp, #32]
 8003a16:	2300      	movs	r3, #0
 8003a18:	eba9 090a 	sub.w	r9, r9, sl
 8003a1c:	930c      	str	r3, [sp, #48]	; 0x30
 8003a1e:	e7bc      	b.n	800399a <_dtoa_r+0x1ba>
 8003a20:	2301      	movs	r3, #1
 8003a22:	9309      	str	r3, [sp, #36]	; 0x24
 8003a24:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	dd74      	ble.n	8003b14 <_dtoa_r+0x334>
 8003a2a:	4698      	mov	r8, r3
 8003a2c:	9304      	str	r3, [sp, #16]
 8003a2e:	2200      	movs	r2, #0
 8003a30:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8003a32:	6072      	str	r2, [r6, #4]
 8003a34:	2204      	movs	r2, #4
 8003a36:	f102 0014 	add.w	r0, r2, #20
 8003a3a:	4298      	cmp	r0, r3
 8003a3c:	6871      	ldr	r1, [r6, #4]
 8003a3e:	d96e      	bls.n	8003b1e <_dtoa_r+0x33e>
 8003a40:	4620      	mov	r0, r4
 8003a42:	f000 fcb0 	bl	80043a6 <_Balloc>
 8003a46:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003a48:	6030      	str	r0, [r6, #0]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	f1b8 0f0e 	cmp.w	r8, #14
 8003a50:	9306      	str	r3, [sp, #24]
 8003a52:	f200 80ed 	bhi.w	8003c30 <_dtoa_r+0x450>
 8003a56:	2d00      	cmp	r5, #0
 8003a58:	f000 80ea 	beq.w	8003c30 <_dtoa_r+0x450>
 8003a5c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8003a60:	f1ba 0f00 	cmp.w	sl, #0
 8003a64:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 8003a68:	dd77      	ble.n	8003b5a <_dtoa_r+0x37a>
 8003a6a:	4a28      	ldr	r2, [pc, #160]	; (8003b0c <_dtoa_r+0x32c>)
 8003a6c:	f00a 030f 	and.w	r3, sl, #15
 8003a70:	ea4f 162a 	mov.w	r6, sl, asr #4
 8003a74:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8003a78:	06f0      	lsls	r0, r6, #27
 8003a7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a7e:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8003a82:	d568      	bpl.n	8003b56 <_dtoa_r+0x376>
 8003a84:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8003a88:	4b21      	ldr	r3, [pc, #132]	; (8003b10 <_dtoa_r+0x330>)
 8003a8a:	2503      	movs	r5, #3
 8003a8c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8003a90:	f7fc fe4c 	bl	800072c <__aeabi_ddiv>
 8003a94:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8003a98:	f006 060f 	and.w	r6, r6, #15
 8003a9c:	4f1c      	ldr	r7, [pc, #112]	; (8003b10 <_dtoa_r+0x330>)
 8003a9e:	e04f      	b.n	8003b40 <_dtoa_r+0x360>
 8003aa0:	2301      	movs	r3, #1
 8003aa2:	9309      	str	r3, [sp, #36]	; 0x24
 8003aa4:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8003aa6:	4453      	add	r3, sl
 8003aa8:	f103 0801 	add.w	r8, r3, #1
 8003aac:	9304      	str	r3, [sp, #16]
 8003aae:	4643      	mov	r3, r8
 8003ab0:	2b01      	cmp	r3, #1
 8003ab2:	bfb8      	it	lt
 8003ab4:	2301      	movlt	r3, #1
 8003ab6:	e7ba      	b.n	8003a2e <_dtoa_r+0x24e>
 8003ab8:	2300      	movs	r3, #0
 8003aba:	e7b2      	b.n	8003a22 <_dtoa_r+0x242>
 8003abc:	2300      	movs	r3, #0
 8003abe:	e7f0      	b.n	8003aa2 <_dtoa_r+0x2c2>
 8003ac0:	2501      	movs	r5, #1
 8003ac2:	2300      	movs	r3, #0
 8003ac4:	9509      	str	r5, [sp, #36]	; 0x24
 8003ac6:	931e      	str	r3, [sp, #120]	; 0x78
 8003ac8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003acc:	2200      	movs	r2, #0
 8003ace:	9304      	str	r3, [sp, #16]
 8003ad0:	4698      	mov	r8, r3
 8003ad2:	2312      	movs	r3, #18
 8003ad4:	921f      	str	r2, [sp, #124]	; 0x7c
 8003ad6:	e7aa      	b.n	8003a2e <_dtoa_r+0x24e>
 8003ad8:	2301      	movs	r3, #1
 8003ada:	9309      	str	r3, [sp, #36]	; 0x24
 8003adc:	e7f4      	b.n	8003ac8 <_dtoa_r+0x2e8>
 8003ade:	bf00      	nop
 8003ae0:	636f4361 	.word	0x636f4361
 8003ae4:	3fd287a7 	.word	0x3fd287a7
 8003ae8:	8b60c8b3 	.word	0x8b60c8b3
 8003aec:	3fc68a28 	.word	0x3fc68a28
 8003af0:	509f79fb 	.word	0x509f79fb
 8003af4:	3fd34413 	.word	0x3fd34413
 8003af8:	7ff00000 	.word	0x7ff00000
 8003afc:	08004efd 	.word	0x08004efd
 8003b00:	08004ef4 	.word	0x08004ef4
 8003b04:	08004ed1 	.word	0x08004ed1
 8003b08:	3ff80000 	.word	0x3ff80000
 8003b0c:	08004f30 	.word	0x08004f30
 8003b10:	08004f08 	.word	0x08004f08
 8003b14:	2301      	movs	r3, #1
 8003b16:	9304      	str	r3, [sp, #16]
 8003b18:	4698      	mov	r8, r3
 8003b1a:	461a      	mov	r2, r3
 8003b1c:	e7da      	b.n	8003ad4 <_dtoa_r+0x2f4>
 8003b1e:	3101      	adds	r1, #1
 8003b20:	6071      	str	r1, [r6, #4]
 8003b22:	0052      	lsls	r2, r2, #1
 8003b24:	e787      	b.n	8003a36 <_dtoa_r+0x256>
 8003b26:	07f1      	lsls	r1, r6, #31
 8003b28:	d508      	bpl.n	8003b3c <_dtoa_r+0x35c>
 8003b2a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8003b2e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003b32:	f7fc fcd1 	bl	80004d8 <__aeabi_dmul>
 8003b36:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8003b3a:	3501      	adds	r5, #1
 8003b3c:	1076      	asrs	r6, r6, #1
 8003b3e:	3708      	adds	r7, #8
 8003b40:	2e00      	cmp	r6, #0
 8003b42:	d1f0      	bne.n	8003b26 <_dtoa_r+0x346>
 8003b44:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8003b48:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003b4c:	f7fc fdee 	bl	800072c <__aeabi_ddiv>
 8003b50:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8003b54:	e01b      	b.n	8003b8e <_dtoa_r+0x3ae>
 8003b56:	2502      	movs	r5, #2
 8003b58:	e7a0      	b.n	8003a9c <_dtoa_r+0x2bc>
 8003b5a:	f000 80a4 	beq.w	8003ca6 <_dtoa_r+0x4c6>
 8003b5e:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8003b62:	f1ca 0600 	rsb	r6, sl, #0
 8003b66:	4ba0      	ldr	r3, [pc, #640]	; (8003de8 <_dtoa_r+0x608>)
 8003b68:	f006 020f 	and.w	r2, r6, #15
 8003b6c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8003b70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b74:	f7fc fcb0 	bl	80004d8 <__aeabi_dmul>
 8003b78:	2502      	movs	r5, #2
 8003b7a:	2300      	movs	r3, #0
 8003b7c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8003b80:	4f9a      	ldr	r7, [pc, #616]	; (8003dec <_dtoa_r+0x60c>)
 8003b82:	1136      	asrs	r6, r6, #4
 8003b84:	2e00      	cmp	r6, #0
 8003b86:	f040 8083 	bne.w	8003c90 <_dtoa_r+0x4b0>
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d1e0      	bne.n	8003b50 <_dtoa_r+0x370>
 8003b8e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	f000 808a 	beq.w	8003caa <_dtoa_r+0x4ca>
 8003b96:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8003b9a:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8003b9e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8003ba2:	2200      	movs	r2, #0
 8003ba4:	4b92      	ldr	r3, [pc, #584]	; (8003df0 <_dtoa_r+0x610>)
 8003ba6:	f7fc ff09 	bl	80009bc <__aeabi_dcmplt>
 8003baa:	2800      	cmp	r0, #0
 8003bac:	d07d      	beq.n	8003caa <_dtoa_r+0x4ca>
 8003bae:	f1b8 0f00 	cmp.w	r8, #0
 8003bb2:	d07a      	beq.n	8003caa <_dtoa_r+0x4ca>
 8003bb4:	9b04      	ldr	r3, [sp, #16]
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	dd36      	ble.n	8003c28 <_dtoa_r+0x448>
 8003bba:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8003bbe:	2200      	movs	r2, #0
 8003bc0:	4b8c      	ldr	r3, [pc, #560]	; (8003df4 <_dtoa_r+0x614>)
 8003bc2:	f7fc fc89 	bl	80004d8 <__aeabi_dmul>
 8003bc6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8003bca:	9e04      	ldr	r6, [sp, #16]
 8003bcc:	f10a 37ff 	add.w	r7, sl, #4294967295	; 0xffffffff
 8003bd0:	3501      	adds	r5, #1
 8003bd2:	4628      	mov	r0, r5
 8003bd4:	f7fc fc16 	bl	8000404 <__aeabi_i2d>
 8003bd8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8003bdc:	f7fc fc7c 	bl	80004d8 <__aeabi_dmul>
 8003be0:	2200      	movs	r2, #0
 8003be2:	4b85      	ldr	r3, [pc, #532]	; (8003df8 <_dtoa_r+0x618>)
 8003be4:	f7fc fac2 	bl	800016c <__adddf3>
 8003be8:	f1a1 7550 	sub.w	r5, r1, #54525952	; 0x3400000
 8003bec:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8003bf0:	950b      	str	r5, [sp, #44]	; 0x2c
 8003bf2:	2e00      	cmp	r6, #0
 8003bf4:	d15c      	bne.n	8003cb0 <_dtoa_r+0x4d0>
 8003bf6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003bfa:	2200      	movs	r2, #0
 8003bfc:	4b7f      	ldr	r3, [pc, #508]	; (8003dfc <_dtoa_r+0x61c>)
 8003bfe:	f7fc fab3 	bl	8000168 <__aeabi_dsub>
 8003c02:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8003c04:	462b      	mov	r3, r5
 8003c06:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8003c0a:	f7fc fef5 	bl	80009f8 <__aeabi_dcmpgt>
 8003c0e:	2800      	cmp	r0, #0
 8003c10:	f040 8281 	bne.w	8004116 <_dtoa_r+0x936>
 8003c14:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003c18:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8003c1a:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 8003c1e:	f7fc fecd 	bl	80009bc <__aeabi_dcmplt>
 8003c22:	2800      	cmp	r0, #0
 8003c24:	f040 8275 	bne.w	8004112 <_dtoa_r+0x932>
 8003c28:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 8003c2c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8003c30:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	f2c0 814b 	blt.w	8003ece <_dtoa_r+0x6ee>
 8003c38:	f1ba 0f0e 	cmp.w	sl, #14
 8003c3c:	f300 8147 	bgt.w	8003ece <_dtoa_r+0x6ee>
 8003c40:	4b69      	ldr	r3, [pc, #420]	; (8003de8 <_dtoa_r+0x608>)
 8003c42:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8003c46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c4a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8003c4e:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	f280 80d7 	bge.w	8003e04 <_dtoa_r+0x624>
 8003c56:	f1b8 0f00 	cmp.w	r8, #0
 8003c5a:	f300 80d3 	bgt.w	8003e04 <_dtoa_r+0x624>
 8003c5e:	f040 8257 	bne.w	8004110 <_dtoa_r+0x930>
 8003c62:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8003c66:	2200      	movs	r2, #0
 8003c68:	4b64      	ldr	r3, [pc, #400]	; (8003dfc <_dtoa_r+0x61c>)
 8003c6a:	f7fc fc35 	bl	80004d8 <__aeabi_dmul>
 8003c6e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8003c72:	f7fc feb7 	bl	80009e4 <__aeabi_dcmpge>
 8003c76:	4646      	mov	r6, r8
 8003c78:	4647      	mov	r7, r8
 8003c7a:	2800      	cmp	r0, #0
 8003c7c:	f040 822d 	bne.w	80040da <_dtoa_r+0x8fa>
 8003c80:	9b06      	ldr	r3, [sp, #24]
 8003c82:	9a06      	ldr	r2, [sp, #24]
 8003c84:	1c5d      	adds	r5, r3, #1
 8003c86:	2331      	movs	r3, #49	; 0x31
 8003c88:	f10a 0a01 	add.w	sl, sl, #1
 8003c8c:	7013      	strb	r3, [r2, #0]
 8003c8e:	e228      	b.n	80040e2 <_dtoa_r+0x902>
 8003c90:	07f2      	lsls	r2, r6, #31
 8003c92:	d505      	bpl.n	8003ca0 <_dtoa_r+0x4c0>
 8003c94:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003c98:	f7fc fc1e 	bl	80004d8 <__aeabi_dmul>
 8003c9c:	2301      	movs	r3, #1
 8003c9e:	3501      	adds	r5, #1
 8003ca0:	1076      	asrs	r6, r6, #1
 8003ca2:	3708      	adds	r7, #8
 8003ca4:	e76e      	b.n	8003b84 <_dtoa_r+0x3a4>
 8003ca6:	2502      	movs	r5, #2
 8003ca8:	e771      	b.n	8003b8e <_dtoa_r+0x3ae>
 8003caa:	4657      	mov	r7, sl
 8003cac:	4646      	mov	r6, r8
 8003cae:	e790      	b.n	8003bd2 <_dtoa_r+0x3f2>
 8003cb0:	4b4d      	ldr	r3, [pc, #308]	; (8003de8 <_dtoa_r+0x608>)
 8003cb2:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8003cb6:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 8003cba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	d048      	beq.n	8003d52 <_dtoa_r+0x572>
 8003cc0:	4602      	mov	r2, r0
 8003cc2:	460b      	mov	r3, r1
 8003cc4:	2000      	movs	r0, #0
 8003cc6:	494e      	ldr	r1, [pc, #312]	; (8003e00 <_dtoa_r+0x620>)
 8003cc8:	f7fc fd30 	bl	800072c <__aeabi_ddiv>
 8003ccc:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8003cd0:	f7fc fa4a 	bl	8000168 <__aeabi_dsub>
 8003cd4:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8003cd8:	9d06      	ldr	r5, [sp, #24]
 8003cda:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003cde:	f7fc feab 	bl	8000a38 <__aeabi_d2iz>
 8003ce2:	9011      	str	r0, [sp, #68]	; 0x44
 8003ce4:	f7fc fb8e 	bl	8000404 <__aeabi_i2d>
 8003ce8:	4602      	mov	r2, r0
 8003cea:	460b      	mov	r3, r1
 8003cec:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003cf0:	f7fc fa3a 	bl	8000168 <__aeabi_dsub>
 8003cf4:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8003cf6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8003cfa:	3330      	adds	r3, #48	; 0x30
 8003cfc:	f805 3b01 	strb.w	r3, [r5], #1
 8003d00:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8003d04:	f7fc fe5a 	bl	80009bc <__aeabi_dcmplt>
 8003d08:	2800      	cmp	r0, #0
 8003d0a:	d163      	bne.n	8003dd4 <_dtoa_r+0x5f4>
 8003d0c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8003d10:	2000      	movs	r0, #0
 8003d12:	4937      	ldr	r1, [pc, #220]	; (8003df0 <_dtoa_r+0x610>)
 8003d14:	f7fc fa28 	bl	8000168 <__aeabi_dsub>
 8003d18:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8003d1c:	f7fc fe4e 	bl	80009bc <__aeabi_dcmplt>
 8003d20:	2800      	cmp	r0, #0
 8003d22:	f040 80b5 	bne.w	8003e90 <_dtoa_r+0x6b0>
 8003d26:	9b06      	ldr	r3, [sp, #24]
 8003d28:	1aeb      	subs	r3, r5, r3
 8003d2a:	429e      	cmp	r6, r3
 8003d2c:	f77f af7c 	ble.w	8003c28 <_dtoa_r+0x448>
 8003d30:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8003d34:	2200      	movs	r2, #0
 8003d36:	4b2f      	ldr	r3, [pc, #188]	; (8003df4 <_dtoa_r+0x614>)
 8003d38:	f7fc fbce 	bl	80004d8 <__aeabi_dmul>
 8003d3c:	2200      	movs	r2, #0
 8003d3e:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8003d42:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003d46:	4b2b      	ldr	r3, [pc, #172]	; (8003df4 <_dtoa_r+0x614>)
 8003d48:	f7fc fbc6 	bl	80004d8 <__aeabi_dmul>
 8003d4c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8003d50:	e7c3      	b.n	8003cda <_dtoa_r+0x4fa>
 8003d52:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8003d56:	f7fc fbbf 	bl	80004d8 <__aeabi_dmul>
 8003d5a:	9b06      	ldr	r3, [sp, #24]
 8003d5c:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8003d60:	199d      	adds	r5, r3, r6
 8003d62:	461e      	mov	r6, r3
 8003d64:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003d68:	f7fc fe66 	bl	8000a38 <__aeabi_d2iz>
 8003d6c:	9011      	str	r0, [sp, #68]	; 0x44
 8003d6e:	f7fc fb49 	bl	8000404 <__aeabi_i2d>
 8003d72:	4602      	mov	r2, r0
 8003d74:	460b      	mov	r3, r1
 8003d76:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003d7a:	f7fc f9f5 	bl	8000168 <__aeabi_dsub>
 8003d7e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8003d80:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8003d84:	3330      	adds	r3, #48	; 0x30
 8003d86:	f806 3b01 	strb.w	r3, [r6], #1
 8003d8a:	42ae      	cmp	r6, r5
 8003d8c:	f04f 0200 	mov.w	r2, #0
 8003d90:	d124      	bne.n	8003ddc <_dtoa_r+0x5fc>
 8003d92:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8003d96:	4b1a      	ldr	r3, [pc, #104]	; (8003e00 <_dtoa_r+0x620>)
 8003d98:	f7fc f9e8 	bl	800016c <__adddf3>
 8003d9c:	4602      	mov	r2, r0
 8003d9e:	460b      	mov	r3, r1
 8003da0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003da4:	f7fc fe28 	bl	80009f8 <__aeabi_dcmpgt>
 8003da8:	2800      	cmp	r0, #0
 8003daa:	d171      	bne.n	8003e90 <_dtoa_r+0x6b0>
 8003dac:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8003db0:	2000      	movs	r0, #0
 8003db2:	4913      	ldr	r1, [pc, #76]	; (8003e00 <_dtoa_r+0x620>)
 8003db4:	f7fc f9d8 	bl	8000168 <__aeabi_dsub>
 8003db8:	4602      	mov	r2, r0
 8003dba:	460b      	mov	r3, r1
 8003dbc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003dc0:	f7fc fdfc 	bl	80009bc <__aeabi_dcmplt>
 8003dc4:	2800      	cmp	r0, #0
 8003dc6:	f43f af2f 	beq.w	8003c28 <_dtoa_r+0x448>
 8003dca:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8003dce:	1e6a      	subs	r2, r5, #1
 8003dd0:	2b30      	cmp	r3, #48	; 0x30
 8003dd2:	d001      	beq.n	8003dd8 <_dtoa_r+0x5f8>
 8003dd4:	46ba      	mov	sl, r7
 8003dd6:	e04a      	b.n	8003e6e <_dtoa_r+0x68e>
 8003dd8:	4615      	mov	r5, r2
 8003dda:	e7f6      	b.n	8003dca <_dtoa_r+0x5ea>
 8003ddc:	4b05      	ldr	r3, [pc, #20]	; (8003df4 <_dtoa_r+0x614>)
 8003dde:	f7fc fb7b 	bl	80004d8 <__aeabi_dmul>
 8003de2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8003de6:	e7bd      	b.n	8003d64 <_dtoa_r+0x584>
 8003de8:	08004f30 	.word	0x08004f30
 8003dec:	08004f08 	.word	0x08004f08
 8003df0:	3ff00000 	.word	0x3ff00000
 8003df4:	40240000 	.word	0x40240000
 8003df8:	401c0000 	.word	0x401c0000
 8003dfc:	40140000 	.word	0x40140000
 8003e00:	3fe00000 	.word	0x3fe00000
 8003e04:	9d06      	ldr	r5, [sp, #24]
 8003e06:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8003e0a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8003e0e:	4630      	mov	r0, r6
 8003e10:	4639      	mov	r1, r7
 8003e12:	f7fc fc8b 	bl	800072c <__aeabi_ddiv>
 8003e16:	f7fc fe0f 	bl	8000a38 <__aeabi_d2iz>
 8003e1a:	4681      	mov	r9, r0
 8003e1c:	f7fc faf2 	bl	8000404 <__aeabi_i2d>
 8003e20:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8003e24:	f7fc fb58 	bl	80004d8 <__aeabi_dmul>
 8003e28:	4602      	mov	r2, r0
 8003e2a:	460b      	mov	r3, r1
 8003e2c:	4630      	mov	r0, r6
 8003e2e:	4639      	mov	r1, r7
 8003e30:	f7fc f99a 	bl	8000168 <__aeabi_dsub>
 8003e34:	f109 0630 	add.w	r6, r9, #48	; 0x30
 8003e38:	f805 6b01 	strb.w	r6, [r5], #1
 8003e3c:	9e06      	ldr	r6, [sp, #24]
 8003e3e:	4602      	mov	r2, r0
 8003e40:	1bae      	subs	r6, r5, r6
 8003e42:	45b0      	cmp	r8, r6
 8003e44:	460b      	mov	r3, r1
 8003e46:	d135      	bne.n	8003eb4 <_dtoa_r+0x6d4>
 8003e48:	f7fc f990 	bl	800016c <__adddf3>
 8003e4c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8003e50:	4606      	mov	r6, r0
 8003e52:	460f      	mov	r7, r1
 8003e54:	f7fc fdd0 	bl	80009f8 <__aeabi_dcmpgt>
 8003e58:	b9c8      	cbnz	r0, 8003e8e <_dtoa_r+0x6ae>
 8003e5a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8003e5e:	4630      	mov	r0, r6
 8003e60:	4639      	mov	r1, r7
 8003e62:	f7fc fda1 	bl	80009a8 <__aeabi_dcmpeq>
 8003e66:	b110      	cbz	r0, 8003e6e <_dtoa_r+0x68e>
 8003e68:	f019 0f01 	tst.w	r9, #1
 8003e6c:	d10f      	bne.n	8003e8e <_dtoa_r+0x6ae>
 8003e6e:	4659      	mov	r1, fp
 8003e70:	4620      	mov	r0, r4
 8003e72:	f000 facc 	bl	800440e <_Bfree>
 8003e76:	2300      	movs	r3, #0
 8003e78:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8003e7a:	702b      	strb	r3, [r5, #0]
 8003e7c:	f10a 0301 	add.w	r3, sl, #1
 8003e80:	6013      	str	r3, [r2, #0]
 8003e82:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	f43f acf3 	beq.w	8003870 <_dtoa_r+0x90>
 8003e8a:	601d      	str	r5, [r3, #0]
 8003e8c:	e4f0      	b.n	8003870 <_dtoa_r+0x90>
 8003e8e:	4657      	mov	r7, sl
 8003e90:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8003e94:	1e6b      	subs	r3, r5, #1
 8003e96:	2a39      	cmp	r2, #57	; 0x39
 8003e98:	d106      	bne.n	8003ea8 <_dtoa_r+0x6c8>
 8003e9a:	9a06      	ldr	r2, [sp, #24]
 8003e9c:	429a      	cmp	r2, r3
 8003e9e:	d107      	bne.n	8003eb0 <_dtoa_r+0x6d0>
 8003ea0:	2330      	movs	r3, #48	; 0x30
 8003ea2:	7013      	strb	r3, [r2, #0]
 8003ea4:	4613      	mov	r3, r2
 8003ea6:	3701      	adds	r7, #1
 8003ea8:	781a      	ldrb	r2, [r3, #0]
 8003eaa:	3201      	adds	r2, #1
 8003eac:	701a      	strb	r2, [r3, #0]
 8003eae:	e791      	b.n	8003dd4 <_dtoa_r+0x5f4>
 8003eb0:	461d      	mov	r5, r3
 8003eb2:	e7ed      	b.n	8003e90 <_dtoa_r+0x6b0>
 8003eb4:	2200      	movs	r2, #0
 8003eb6:	4b99      	ldr	r3, [pc, #612]	; (800411c <_dtoa_r+0x93c>)
 8003eb8:	f7fc fb0e 	bl	80004d8 <__aeabi_dmul>
 8003ebc:	2200      	movs	r2, #0
 8003ebe:	2300      	movs	r3, #0
 8003ec0:	4606      	mov	r6, r0
 8003ec2:	460f      	mov	r7, r1
 8003ec4:	f7fc fd70 	bl	80009a8 <__aeabi_dcmpeq>
 8003ec8:	2800      	cmp	r0, #0
 8003eca:	d09e      	beq.n	8003e0a <_dtoa_r+0x62a>
 8003ecc:	e7cf      	b.n	8003e6e <_dtoa_r+0x68e>
 8003ece:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003ed0:	2a00      	cmp	r2, #0
 8003ed2:	f000 8088 	beq.w	8003fe6 <_dtoa_r+0x806>
 8003ed6:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8003ed8:	2a01      	cmp	r2, #1
 8003eda:	dc6d      	bgt.n	8003fb8 <_dtoa_r+0x7d8>
 8003edc:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8003ede:	2a00      	cmp	r2, #0
 8003ee0:	d066      	beq.n	8003fb0 <_dtoa_r+0x7d0>
 8003ee2:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8003ee6:	464d      	mov	r5, r9
 8003ee8:	9e08      	ldr	r6, [sp, #32]
 8003eea:	9a07      	ldr	r2, [sp, #28]
 8003eec:	2101      	movs	r1, #1
 8003eee:	441a      	add	r2, r3
 8003ef0:	4620      	mov	r0, r4
 8003ef2:	4499      	add	r9, r3
 8003ef4:	9207      	str	r2, [sp, #28]
 8003ef6:	f000 fb2a 	bl	800454e <__i2b>
 8003efa:	4607      	mov	r7, r0
 8003efc:	2d00      	cmp	r5, #0
 8003efe:	dd0b      	ble.n	8003f18 <_dtoa_r+0x738>
 8003f00:	9b07      	ldr	r3, [sp, #28]
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	dd08      	ble.n	8003f18 <_dtoa_r+0x738>
 8003f06:	42ab      	cmp	r3, r5
 8003f08:	bfa8      	it	ge
 8003f0a:	462b      	movge	r3, r5
 8003f0c:	9a07      	ldr	r2, [sp, #28]
 8003f0e:	eba9 0903 	sub.w	r9, r9, r3
 8003f12:	1aed      	subs	r5, r5, r3
 8003f14:	1ad3      	subs	r3, r2, r3
 8003f16:	9307      	str	r3, [sp, #28]
 8003f18:	9b08      	ldr	r3, [sp, #32]
 8003f1a:	b1eb      	cbz	r3, 8003f58 <_dtoa_r+0x778>
 8003f1c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d065      	beq.n	8003fee <_dtoa_r+0x80e>
 8003f22:	b18e      	cbz	r6, 8003f48 <_dtoa_r+0x768>
 8003f24:	4639      	mov	r1, r7
 8003f26:	4632      	mov	r2, r6
 8003f28:	4620      	mov	r0, r4
 8003f2a:	f000 fbaf 	bl	800468c <__pow5mult>
 8003f2e:	465a      	mov	r2, fp
 8003f30:	4601      	mov	r1, r0
 8003f32:	4607      	mov	r7, r0
 8003f34:	4620      	mov	r0, r4
 8003f36:	f000 fb13 	bl	8004560 <__multiply>
 8003f3a:	4659      	mov	r1, fp
 8003f3c:	900a      	str	r0, [sp, #40]	; 0x28
 8003f3e:	4620      	mov	r0, r4
 8003f40:	f000 fa65 	bl	800440e <_Bfree>
 8003f44:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003f46:	469b      	mov	fp, r3
 8003f48:	9b08      	ldr	r3, [sp, #32]
 8003f4a:	1b9a      	subs	r2, r3, r6
 8003f4c:	d004      	beq.n	8003f58 <_dtoa_r+0x778>
 8003f4e:	4659      	mov	r1, fp
 8003f50:	4620      	mov	r0, r4
 8003f52:	f000 fb9b 	bl	800468c <__pow5mult>
 8003f56:	4683      	mov	fp, r0
 8003f58:	2101      	movs	r1, #1
 8003f5a:	4620      	mov	r0, r4
 8003f5c:	f000 faf7 	bl	800454e <__i2b>
 8003f60:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8003f62:	4606      	mov	r6, r0
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	f000 81c6 	beq.w	80042f6 <_dtoa_r+0xb16>
 8003f6a:	461a      	mov	r2, r3
 8003f6c:	4601      	mov	r1, r0
 8003f6e:	4620      	mov	r0, r4
 8003f70:	f000 fb8c 	bl	800468c <__pow5mult>
 8003f74:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8003f76:	4606      	mov	r6, r0
 8003f78:	2b01      	cmp	r3, #1
 8003f7a:	dc3e      	bgt.n	8003ffa <_dtoa_r+0x81a>
 8003f7c:	9b02      	ldr	r3, [sp, #8]
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d137      	bne.n	8003ff2 <_dtoa_r+0x812>
 8003f82:	9b03      	ldr	r3, [sp, #12]
 8003f84:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d134      	bne.n	8003ff6 <_dtoa_r+0x816>
 8003f8c:	9b03      	ldr	r3, [sp, #12]
 8003f8e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003f92:	0d1b      	lsrs	r3, r3, #20
 8003f94:	051b      	lsls	r3, r3, #20
 8003f96:	b12b      	cbz	r3, 8003fa4 <_dtoa_r+0x7c4>
 8003f98:	9b07      	ldr	r3, [sp, #28]
 8003f9a:	f109 0901 	add.w	r9, r9, #1
 8003f9e:	3301      	adds	r3, #1
 8003fa0:	9307      	str	r3, [sp, #28]
 8003fa2:	2301      	movs	r3, #1
 8003fa4:	9308      	str	r3, [sp, #32]
 8003fa6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	d128      	bne.n	8003ffe <_dtoa_r+0x81e>
 8003fac:	2001      	movs	r0, #1
 8003fae:	e02e      	b.n	800400e <_dtoa_r+0x82e>
 8003fb0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8003fb2:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8003fb6:	e796      	b.n	8003ee6 <_dtoa_r+0x706>
 8003fb8:	9b08      	ldr	r3, [sp, #32]
 8003fba:	f108 36ff 	add.w	r6, r8, #4294967295	; 0xffffffff
 8003fbe:	42b3      	cmp	r3, r6
 8003fc0:	bfb7      	itett	lt
 8003fc2:	9b08      	ldrlt	r3, [sp, #32]
 8003fc4:	1b9e      	subge	r6, r3, r6
 8003fc6:	1af2      	sublt	r2, r6, r3
 8003fc8:	9b0c      	ldrlt	r3, [sp, #48]	; 0x30
 8003fca:	bfbf      	itttt	lt
 8003fcc:	9608      	strlt	r6, [sp, #32]
 8003fce:	189b      	addlt	r3, r3, r2
 8003fd0:	930c      	strlt	r3, [sp, #48]	; 0x30
 8003fd2:	2600      	movlt	r6, #0
 8003fd4:	f1b8 0f00 	cmp.w	r8, #0
 8003fd8:	bfb9      	ittee	lt
 8003fda:	eba9 0508 	sublt.w	r5, r9, r8
 8003fde:	2300      	movlt	r3, #0
 8003fe0:	464d      	movge	r5, r9
 8003fe2:	4643      	movge	r3, r8
 8003fe4:	e781      	b.n	8003eea <_dtoa_r+0x70a>
 8003fe6:	9e08      	ldr	r6, [sp, #32]
 8003fe8:	464d      	mov	r5, r9
 8003fea:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8003fec:	e786      	b.n	8003efc <_dtoa_r+0x71c>
 8003fee:	9a08      	ldr	r2, [sp, #32]
 8003ff0:	e7ad      	b.n	8003f4e <_dtoa_r+0x76e>
 8003ff2:	2300      	movs	r3, #0
 8003ff4:	e7d6      	b.n	8003fa4 <_dtoa_r+0x7c4>
 8003ff6:	9b02      	ldr	r3, [sp, #8]
 8003ff8:	e7d4      	b.n	8003fa4 <_dtoa_r+0x7c4>
 8003ffa:	2300      	movs	r3, #0
 8003ffc:	9308      	str	r3, [sp, #32]
 8003ffe:	6933      	ldr	r3, [r6, #16]
 8004000:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8004004:	6918      	ldr	r0, [r3, #16]
 8004006:	f000 fa54 	bl	80044b2 <__hi0bits>
 800400a:	f1c0 0020 	rsb	r0, r0, #32
 800400e:	9b07      	ldr	r3, [sp, #28]
 8004010:	4418      	add	r0, r3
 8004012:	f010 001f 	ands.w	r0, r0, #31
 8004016:	d047      	beq.n	80040a8 <_dtoa_r+0x8c8>
 8004018:	f1c0 0320 	rsb	r3, r0, #32
 800401c:	2b04      	cmp	r3, #4
 800401e:	dd3b      	ble.n	8004098 <_dtoa_r+0x8b8>
 8004020:	9b07      	ldr	r3, [sp, #28]
 8004022:	f1c0 001c 	rsb	r0, r0, #28
 8004026:	4481      	add	r9, r0
 8004028:	4405      	add	r5, r0
 800402a:	4403      	add	r3, r0
 800402c:	9307      	str	r3, [sp, #28]
 800402e:	f1b9 0f00 	cmp.w	r9, #0
 8004032:	dd05      	ble.n	8004040 <_dtoa_r+0x860>
 8004034:	4659      	mov	r1, fp
 8004036:	464a      	mov	r2, r9
 8004038:	4620      	mov	r0, r4
 800403a:	f000 fb75 	bl	8004728 <__lshift>
 800403e:	4683      	mov	fp, r0
 8004040:	9b07      	ldr	r3, [sp, #28]
 8004042:	2b00      	cmp	r3, #0
 8004044:	dd05      	ble.n	8004052 <_dtoa_r+0x872>
 8004046:	4631      	mov	r1, r6
 8004048:	461a      	mov	r2, r3
 800404a:	4620      	mov	r0, r4
 800404c:	f000 fb6c 	bl	8004728 <__lshift>
 8004050:	4606      	mov	r6, r0
 8004052:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004054:	b353      	cbz	r3, 80040ac <_dtoa_r+0x8cc>
 8004056:	4631      	mov	r1, r6
 8004058:	4658      	mov	r0, fp
 800405a:	f000 fbb9 	bl	80047d0 <__mcmp>
 800405e:	2800      	cmp	r0, #0
 8004060:	da24      	bge.n	80040ac <_dtoa_r+0x8cc>
 8004062:	2300      	movs	r3, #0
 8004064:	4659      	mov	r1, fp
 8004066:	220a      	movs	r2, #10
 8004068:	4620      	mov	r0, r4
 800406a:	f000 f9e7 	bl	800443c <__multadd>
 800406e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004070:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8004074:	4683      	mov	fp, r0
 8004076:	2b00      	cmp	r3, #0
 8004078:	f000 8144 	beq.w	8004304 <_dtoa_r+0xb24>
 800407c:	2300      	movs	r3, #0
 800407e:	4639      	mov	r1, r7
 8004080:	220a      	movs	r2, #10
 8004082:	4620      	mov	r0, r4
 8004084:	f000 f9da 	bl	800443c <__multadd>
 8004088:	9b04      	ldr	r3, [sp, #16]
 800408a:	4607      	mov	r7, r0
 800408c:	2b00      	cmp	r3, #0
 800408e:	dc4d      	bgt.n	800412c <_dtoa_r+0x94c>
 8004090:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8004092:	2b02      	cmp	r3, #2
 8004094:	dd4a      	ble.n	800412c <_dtoa_r+0x94c>
 8004096:	e011      	b.n	80040bc <_dtoa_r+0x8dc>
 8004098:	d0c9      	beq.n	800402e <_dtoa_r+0x84e>
 800409a:	9a07      	ldr	r2, [sp, #28]
 800409c:	331c      	adds	r3, #28
 800409e:	441a      	add	r2, r3
 80040a0:	4499      	add	r9, r3
 80040a2:	441d      	add	r5, r3
 80040a4:	4613      	mov	r3, r2
 80040a6:	e7c1      	b.n	800402c <_dtoa_r+0x84c>
 80040a8:	4603      	mov	r3, r0
 80040aa:	e7f6      	b.n	800409a <_dtoa_r+0x8ba>
 80040ac:	f1b8 0f00 	cmp.w	r8, #0
 80040b0:	dc36      	bgt.n	8004120 <_dtoa_r+0x940>
 80040b2:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80040b4:	2b02      	cmp	r3, #2
 80040b6:	dd33      	ble.n	8004120 <_dtoa_r+0x940>
 80040b8:	f8cd 8010 	str.w	r8, [sp, #16]
 80040bc:	9b04      	ldr	r3, [sp, #16]
 80040be:	b963      	cbnz	r3, 80040da <_dtoa_r+0x8fa>
 80040c0:	4631      	mov	r1, r6
 80040c2:	2205      	movs	r2, #5
 80040c4:	4620      	mov	r0, r4
 80040c6:	f000 f9b9 	bl	800443c <__multadd>
 80040ca:	4601      	mov	r1, r0
 80040cc:	4606      	mov	r6, r0
 80040ce:	4658      	mov	r0, fp
 80040d0:	f000 fb7e 	bl	80047d0 <__mcmp>
 80040d4:	2800      	cmp	r0, #0
 80040d6:	f73f add3 	bgt.w	8003c80 <_dtoa_r+0x4a0>
 80040da:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80040dc:	9d06      	ldr	r5, [sp, #24]
 80040de:	ea6f 0a03 	mvn.w	sl, r3
 80040e2:	f04f 0900 	mov.w	r9, #0
 80040e6:	4631      	mov	r1, r6
 80040e8:	4620      	mov	r0, r4
 80040ea:	f000 f990 	bl	800440e <_Bfree>
 80040ee:	2f00      	cmp	r7, #0
 80040f0:	f43f aebd 	beq.w	8003e6e <_dtoa_r+0x68e>
 80040f4:	f1b9 0f00 	cmp.w	r9, #0
 80040f8:	d005      	beq.n	8004106 <_dtoa_r+0x926>
 80040fa:	45b9      	cmp	r9, r7
 80040fc:	d003      	beq.n	8004106 <_dtoa_r+0x926>
 80040fe:	4649      	mov	r1, r9
 8004100:	4620      	mov	r0, r4
 8004102:	f000 f984 	bl	800440e <_Bfree>
 8004106:	4639      	mov	r1, r7
 8004108:	4620      	mov	r0, r4
 800410a:	f000 f980 	bl	800440e <_Bfree>
 800410e:	e6ae      	b.n	8003e6e <_dtoa_r+0x68e>
 8004110:	2600      	movs	r6, #0
 8004112:	4637      	mov	r7, r6
 8004114:	e7e1      	b.n	80040da <_dtoa_r+0x8fa>
 8004116:	46ba      	mov	sl, r7
 8004118:	4637      	mov	r7, r6
 800411a:	e5b1      	b.n	8003c80 <_dtoa_r+0x4a0>
 800411c:	40240000 	.word	0x40240000
 8004120:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004122:	f8cd 8010 	str.w	r8, [sp, #16]
 8004126:	2b00      	cmp	r3, #0
 8004128:	f000 80f3 	beq.w	8004312 <_dtoa_r+0xb32>
 800412c:	2d00      	cmp	r5, #0
 800412e:	dd05      	ble.n	800413c <_dtoa_r+0x95c>
 8004130:	4639      	mov	r1, r7
 8004132:	462a      	mov	r2, r5
 8004134:	4620      	mov	r0, r4
 8004136:	f000 faf7 	bl	8004728 <__lshift>
 800413a:	4607      	mov	r7, r0
 800413c:	9b08      	ldr	r3, [sp, #32]
 800413e:	2b00      	cmp	r3, #0
 8004140:	d04c      	beq.n	80041dc <_dtoa_r+0x9fc>
 8004142:	6879      	ldr	r1, [r7, #4]
 8004144:	4620      	mov	r0, r4
 8004146:	f000 f92e 	bl	80043a6 <_Balloc>
 800414a:	4605      	mov	r5, r0
 800414c:	693a      	ldr	r2, [r7, #16]
 800414e:	f107 010c 	add.w	r1, r7, #12
 8004152:	3202      	adds	r2, #2
 8004154:	0092      	lsls	r2, r2, #2
 8004156:	300c      	adds	r0, #12
 8004158:	f000 f91a 	bl	8004390 <memcpy>
 800415c:	2201      	movs	r2, #1
 800415e:	4629      	mov	r1, r5
 8004160:	4620      	mov	r0, r4
 8004162:	f000 fae1 	bl	8004728 <__lshift>
 8004166:	46b9      	mov	r9, r7
 8004168:	4607      	mov	r7, r0
 800416a:	9b06      	ldr	r3, [sp, #24]
 800416c:	9307      	str	r3, [sp, #28]
 800416e:	9b02      	ldr	r3, [sp, #8]
 8004170:	f003 0301 	and.w	r3, r3, #1
 8004174:	9308      	str	r3, [sp, #32]
 8004176:	4631      	mov	r1, r6
 8004178:	4658      	mov	r0, fp
 800417a:	f7ff faa3 	bl	80036c4 <quorem>
 800417e:	4649      	mov	r1, r9
 8004180:	4605      	mov	r5, r0
 8004182:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8004186:	4658      	mov	r0, fp
 8004188:	f000 fb22 	bl	80047d0 <__mcmp>
 800418c:	463a      	mov	r2, r7
 800418e:	9002      	str	r0, [sp, #8]
 8004190:	4631      	mov	r1, r6
 8004192:	4620      	mov	r0, r4
 8004194:	f000 fb36 	bl	8004804 <__mdiff>
 8004198:	68c3      	ldr	r3, [r0, #12]
 800419a:	4602      	mov	r2, r0
 800419c:	bb03      	cbnz	r3, 80041e0 <_dtoa_r+0xa00>
 800419e:	4601      	mov	r1, r0
 80041a0:	9009      	str	r0, [sp, #36]	; 0x24
 80041a2:	4658      	mov	r0, fp
 80041a4:	f000 fb14 	bl	80047d0 <__mcmp>
 80041a8:	4603      	mov	r3, r0
 80041aa:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80041ac:	4611      	mov	r1, r2
 80041ae:	4620      	mov	r0, r4
 80041b0:	9309      	str	r3, [sp, #36]	; 0x24
 80041b2:	f000 f92c 	bl	800440e <_Bfree>
 80041b6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80041b8:	b9a3      	cbnz	r3, 80041e4 <_dtoa_r+0xa04>
 80041ba:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 80041bc:	b992      	cbnz	r2, 80041e4 <_dtoa_r+0xa04>
 80041be:	9a08      	ldr	r2, [sp, #32]
 80041c0:	b982      	cbnz	r2, 80041e4 <_dtoa_r+0xa04>
 80041c2:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 80041c6:	d029      	beq.n	800421c <_dtoa_r+0xa3c>
 80041c8:	9b02      	ldr	r3, [sp, #8]
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	dd01      	ble.n	80041d2 <_dtoa_r+0x9f2>
 80041ce:	f105 0831 	add.w	r8, r5, #49	; 0x31
 80041d2:	9b07      	ldr	r3, [sp, #28]
 80041d4:	1c5d      	adds	r5, r3, #1
 80041d6:	f883 8000 	strb.w	r8, [r3]
 80041da:	e784      	b.n	80040e6 <_dtoa_r+0x906>
 80041dc:	4638      	mov	r0, r7
 80041de:	e7c2      	b.n	8004166 <_dtoa_r+0x986>
 80041e0:	2301      	movs	r3, #1
 80041e2:	e7e3      	b.n	80041ac <_dtoa_r+0x9cc>
 80041e4:	9a02      	ldr	r2, [sp, #8]
 80041e6:	2a00      	cmp	r2, #0
 80041e8:	db04      	blt.n	80041f4 <_dtoa_r+0xa14>
 80041ea:	d123      	bne.n	8004234 <_dtoa_r+0xa54>
 80041ec:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 80041ee:	bb0a      	cbnz	r2, 8004234 <_dtoa_r+0xa54>
 80041f0:	9a08      	ldr	r2, [sp, #32]
 80041f2:	b9fa      	cbnz	r2, 8004234 <_dtoa_r+0xa54>
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	ddec      	ble.n	80041d2 <_dtoa_r+0x9f2>
 80041f8:	4659      	mov	r1, fp
 80041fa:	2201      	movs	r2, #1
 80041fc:	4620      	mov	r0, r4
 80041fe:	f000 fa93 	bl	8004728 <__lshift>
 8004202:	4631      	mov	r1, r6
 8004204:	4683      	mov	fp, r0
 8004206:	f000 fae3 	bl	80047d0 <__mcmp>
 800420a:	2800      	cmp	r0, #0
 800420c:	dc03      	bgt.n	8004216 <_dtoa_r+0xa36>
 800420e:	d1e0      	bne.n	80041d2 <_dtoa_r+0x9f2>
 8004210:	f018 0f01 	tst.w	r8, #1
 8004214:	d0dd      	beq.n	80041d2 <_dtoa_r+0x9f2>
 8004216:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800421a:	d1d8      	bne.n	80041ce <_dtoa_r+0x9ee>
 800421c:	9b07      	ldr	r3, [sp, #28]
 800421e:	9a07      	ldr	r2, [sp, #28]
 8004220:	1c5d      	adds	r5, r3, #1
 8004222:	2339      	movs	r3, #57	; 0x39
 8004224:	7013      	strb	r3, [r2, #0]
 8004226:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800422a:	1e6a      	subs	r2, r5, #1
 800422c:	2b39      	cmp	r3, #57	; 0x39
 800422e:	d04d      	beq.n	80042cc <_dtoa_r+0xaec>
 8004230:	3301      	adds	r3, #1
 8004232:	e052      	b.n	80042da <_dtoa_r+0xafa>
 8004234:	9a07      	ldr	r2, [sp, #28]
 8004236:	2b00      	cmp	r3, #0
 8004238:	f102 0501 	add.w	r5, r2, #1
 800423c:	dd06      	ble.n	800424c <_dtoa_r+0xa6c>
 800423e:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8004242:	d0eb      	beq.n	800421c <_dtoa_r+0xa3c>
 8004244:	f108 0801 	add.w	r8, r8, #1
 8004248:	9b07      	ldr	r3, [sp, #28]
 800424a:	e7c4      	b.n	80041d6 <_dtoa_r+0x9f6>
 800424c:	9b06      	ldr	r3, [sp, #24]
 800424e:	9a04      	ldr	r2, [sp, #16]
 8004250:	1aeb      	subs	r3, r5, r3
 8004252:	4293      	cmp	r3, r2
 8004254:	f805 8c01 	strb.w	r8, [r5, #-1]
 8004258:	d021      	beq.n	800429e <_dtoa_r+0xabe>
 800425a:	4659      	mov	r1, fp
 800425c:	2300      	movs	r3, #0
 800425e:	220a      	movs	r2, #10
 8004260:	4620      	mov	r0, r4
 8004262:	f000 f8eb 	bl	800443c <__multadd>
 8004266:	45b9      	cmp	r9, r7
 8004268:	4683      	mov	fp, r0
 800426a:	f04f 0300 	mov.w	r3, #0
 800426e:	f04f 020a 	mov.w	r2, #10
 8004272:	4649      	mov	r1, r9
 8004274:	4620      	mov	r0, r4
 8004276:	d105      	bne.n	8004284 <_dtoa_r+0xaa4>
 8004278:	f000 f8e0 	bl	800443c <__multadd>
 800427c:	4681      	mov	r9, r0
 800427e:	4607      	mov	r7, r0
 8004280:	9507      	str	r5, [sp, #28]
 8004282:	e778      	b.n	8004176 <_dtoa_r+0x996>
 8004284:	f000 f8da 	bl	800443c <__multadd>
 8004288:	4639      	mov	r1, r7
 800428a:	4681      	mov	r9, r0
 800428c:	2300      	movs	r3, #0
 800428e:	220a      	movs	r2, #10
 8004290:	4620      	mov	r0, r4
 8004292:	f000 f8d3 	bl	800443c <__multadd>
 8004296:	4607      	mov	r7, r0
 8004298:	e7f2      	b.n	8004280 <_dtoa_r+0xaa0>
 800429a:	f04f 0900 	mov.w	r9, #0
 800429e:	4659      	mov	r1, fp
 80042a0:	2201      	movs	r2, #1
 80042a2:	4620      	mov	r0, r4
 80042a4:	f000 fa40 	bl	8004728 <__lshift>
 80042a8:	4631      	mov	r1, r6
 80042aa:	4683      	mov	fp, r0
 80042ac:	f000 fa90 	bl	80047d0 <__mcmp>
 80042b0:	2800      	cmp	r0, #0
 80042b2:	dcb8      	bgt.n	8004226 <_dtoa_r+0xa46>
 80042b4:	d102      	bne.n	80042bc <_dtoa_r+0xadc>
 80042b6:	f018 0f01 	tst.w	r8, #1
 80042ba:	d1b4      	bne.n	8004226 <_dtoa_r+0xa46>
 80042bc:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80042c0:	1e6a      	subs	r2, r5, #1
 80042c2:	2b30      	cmp	r3, #48	; 0x30
 80042c4:	f47f af0f 	bne.w	80040e6 <_dtoa_r+0x906>
 80042c8:	4615      	mov	r5, r2
 80042ca:	e7f7      	b.n	80042bc <_dtoa_r+0xadc>
 80042cc:	9b06      	ldr	r3, [sp, #24]
 80042ce:	4293      	cmp	r3, r2
 80042d0:	d105      	bne.n	80042de <_dtoa_r+0xafe>
 80042d2:	2331      	movs	r3, #49	; 0x31
 80042d4:	9a06      	ldr	r2, [sp, #24]
 80042d6:	f10a 0a01 	add.w	sl, sl, #1
 80042da:	7013      	strb	r3, [r2, #0]
 80042dc:	e703      	b.n	80040e6 <_dtoa_r+0x906>
 80042de:	4615      	mov	r5, r2
 80042e0:	e7a1      	b.n	8004226 <_dtoa_r+0xa46>
 80042e2:	4b17      	ldr	r3, [pc, #92]	; (8004340 <_dtoa_r+0xb60>)
 80042e4:	f7ff bae1 	b.w	80038aa <_dtoa_r+0xca>
 80042e8:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	f47f aabb 	bne.w	8003866 <_dtoa_r+0x86>
 80042f0:	4b14      	ldr	r3, [pc, #80]	; (8004344 <_dtoa_r+0xb64>)
 80042f2:	f7ff bada 	b.w	80038aa <_dtoa_r+0xca>
 80042f6:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80042f8:	2b01      	cmp	r3, #1
 80042fa:	f77f ae3f 	ble.w	8003f7c <_dtoa_r+0x79c>
 80042fe:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8004300:	9308      	str	r3, [sp, #32]
 8004302:	e653      	b.n	8003fac <_dtoa_r+0x7cc>
 8004304:	9b04      	ldr	r3, [sp, #16]
 8004306:	2b00      	cmp	r3, #0
 8004308:	dc03      	bgt.n	8004312 <_dtoa_r+0xb32>
 800430a:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800430c:	2b02      	cmp	r3, #2
 800430e:	f73f aed5 	bgt.w	80040bc <_dtoa_r+0x8dc>
 8004312:	9d06      	ldr	r5, [sp, #24]
 8004314:	4631      	mov	r1, r6
 8004316:	4658      	mov	r0, fp
 8004318:	f7ff f9d4 	bl	80036c4 <quorem>
 800431c:	9b06      	ldr	r3, [sp, #24]
 800431e:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8004322:	f805 8b01 	strb.w	r8, [r5], #1
 8004326:	9a04      	ldr	r2, [sp, #16]
 8004328:	1aeb      	subs	r3, r5, r3
 800432a:	429a      	cmp	r2, r3
 800432c:	ddb5      	ble.n	800429a <_dtoa_r+0xaba>
 800432e:	4659      	mov	r1, fp
 8004330:	2300      	movs	r3, #0
 8004332:	220a      	movs	r2, #10
 8004334:	4620      	mov	r0, r4
 8004336:	f000 f881 	bl	800443c <__multadd>
 800433a:	4683      	mov	fp, r0
 800433c:	e7ea      	b.n	8004314 <_dtoa_r+0xb34>
 800433e:	bf00      	nop
 8004340:	08004ed0 	.word	0x08004ed0
 8004344:	08004ef4 	.word	0x08004ef4

08004348 <_localeconv_r>:
 8004348:	4b04      	ldr	r3, [pc, #16]	; (800435c <_localeconv_r+0x14>)
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	6a18      	ldr	r0, [r3, #32]
 800434e:	4b04      	ldr	r3, [pc, #16]	; (8004360 <_localeconv_r+0x18>)
 8004350:	2800      	cmp	r0, #0
 8004352:	bf08      	it	eq
 8004354:	4618      	moveq	r0, r3
 8004356:	30f0      	adds	r0, #240	; 0xf0
 8004358:	4770      	bx	lr
 800435a:	bf00      	nop
 800435c:	20000014 	.word	0x20000014
 8004360:	20000078 	.word	0x20000078

08004364 <malloc>:
 8004364:	4b02      	ldr	r3, [pc, #8]	; (8004370 <malloc+0xc>)
 8004366:	4601      	mov	r1, r0
 8004368:	6818      	ldr	r0, [r3, #0]
 800436a:	f000 bb53 	b.w	8004a14 <_malloc_r>
 800436e:	bf00      	nop
 8004370:	20000014 	.word	0x20000014

08004374 <memchr>:
 8004374:	b510      	push	{r4, lr}
 8004376:	b2c9      	uxtb	r1, r1
 8004378:	4402      	add	r2, r0
 800437a:	4290      	cmp	r0, r2
 800437c:	4603      	mov	r3, r0
 800437e:	d101      	bne.n	8004384 <memchr+0x10>
 8004380:	2300      	movs	r3, #0
 8004382:	e003      	b.n	800438c <memchr+0x18>
 8004384:	781c      	ldrb	r4, [r3, #0]
 8004386:	3001      	adds	r0, #1
 8004388:	428c      	cmp	r4, r1
 800438a:	d1f6      	bne.n	800437a <memchr+0x6>
 800438c:	4618      	mov	r0, r3
 800438e:	bd10      	pop	{r4, pc}

08004390 <memcpy>:
 8004390:	b510      	push	{r4, lr}
 8004392:	1e43      	subs	r3, r0, #1
 8004394:	440a      	add	r2, r1
 8004396:	4291      	cmp	r1, r2
 8004398:	d100      	bne.n	800439c <memcpy+0xc>
 800439a:	bd10      	pop	{r4, pc}
 800439c:	f811 4b01 	ldrb.w	r4, [r1], #1
 80043a0:	f803 4f01 	strb.w	r4, [r3, #1]!
 80043a4:	e7f7      	b.n	8004396 <memcpy+0x6>

080043a6 <_Balloc>:
 80043a6:	b570      	push	{r4, r5, r6, lr}
 80043a8:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80043aa:	4604      	mov	r4, r0
 80043ac:	460e      	mov	r6, r1
 80043ae:	b93d      	cbnz	r5, 80043c0 <_Balloc+0x1a>
 80043b0:	2010      	movs	r0, #16
 80043b2:	f7ff ffd7 	bl	8004364 <malloc>
 80043b6:	6260      	str	r0, [r4, #36]	; 0x24
 80043b8:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80043bc:	6005      	str	r5, [r0, #0]
 80043be:	60c5      	str	r5, [r0, #12]
 80043c0:	6a65      	ldr	r5, [r4, #36]	; 0x24
 80043c2:	68eb      	ldr	r3, [r5, #12]
 80043c4:	b183      	cbz	r3, 80043e8 <_Balloc+0x42>
 80043c6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80043c8:	68db      	ldr	r3, [r3, #12]
 80043ca:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 80043ce:	b9b8      	cbnz	r0, 8004400 <_Balloc+0x5a>
 80043d0:	2101      	movs	r1, #1
 80043d2:	fa01 f506 	lsl.w	r5, r1, r6
 80043d6:	1d6a      	adds	r2, r5, #5
 80043d8:	0092      	lsls	r2, r2, #2
 80043da:	4620      	mov	r0, r4
 80043dc:	f000 fabf 	bl	800495e <_calloc_r>
 80043e0:	b160      	cbz	r0, 80043fc <_Balloc+0x56>
 80043e2:	e9c0 6501 	strd	r6, r5, [r0, #4]
 80043e6:	e00e      	b.n	8004406 <_Balloc+0x60>
 80043e8:	2221      	movs	r2, #33	; 0x21
 80043ea:	2104      	movs	r1, #4
 80043ec:	4620      	mov	r0, r4
 80043ee:	f000 fab6 	bl	800495e <_calloc_r>
 80043f2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80043f4:	60e8      	str	r0, [r5, #12]
 80043f6:	68db      	ldr	r3, [r3, #12]
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	d1e4      	bne.n	80043c6 <_Balloc+0x20>
 80043fc:	2000      	movs	r0, #0
 80043fe:	bd70      	pop	{r4, r5, r6, pc}
 8004400:	6802      	ldr	r2, [r0, #0]
 8004402:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 8004406:	2300      	movs	r3, #0
 8004408:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800440c:	e7f7      	b.n	80043fe <_Balloc+0x58>

0800440e <_Bfree>:
 800440e:	b570      	push	{r4, r5, r6, lr}
 8004410:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8004412:	4606      	mov	r6, r0
 8004414:	460d      	mov	r5, r1
 8004416:	b93c      	cbnz	r4, 8004428 <_Bfree+0x1a>
 8004418:	2010      	movs	r0, #16
 800441a:	f7ff ffa3 	bl	8004364 <malloc>
 800441e:	6270      	str	r0, [r6, #36]	; 0x24
 8004420:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8004424:	6004      	str	r4, [r0, #0]
 8004426:	60c4      	str	r4, [r0, #12]
 8004428:	b13d      	cbz	r5, 800443a <_Bfree+0x2c>
 800442a:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800442c:	686a      	ldr	r2, [r5, #4]
 800442e:	68db      	ldr	r3, [r3, #12]
 8004430:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8004434:	6029      	str	r1, [r5, #0]
 8004436:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 800443a:	bd70      	pop	{r4, r5, r6, pc}

0800443c <__multadd>:
 800443c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004440:	461f      	mov	r7, r3
 8004442:	4606      	mov	r6, r0
 8004444:	460c      	mov	r4, r1
 8004446:	2300      	movs	r3, #0
 8004448:	690d      	ldr	r5, [r1, #16]
 800444a:	f101 0c14 	add.w	ip, r1, #20
 800444e:	f8dc 0000 	ldr.w	r0, [ip]
 8004452:	3301      	adds	r3, #1
 8004454:	b281      	uxth	r1, r0
 8004456:	fb02 7101 	mla	r1, r2, r1, r7
 800445a:	0c00      	lsrs	r0, r0, #16
 800445c:	0c0f      	lsrs	r7, r1, #16
 800445e:	fb02 7000 	mla	r0, r2, r0, r7
 8004462:	b289      	uxth	r1, r1
 8004464:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 8004468:	429d      	cmp	r5, r3
 800446a:	ea4f 4710 	mov.w	r7, r0, lsr #16
 800446e:	f84c 1b04 	str.w	r1, [ip], #4
 8004472:	dcec      	bgt.n	800444e <__multadd+0x12>
 8004474:	b1d7      	cbz	r7, 80044ac <__multadd+0x70>
 8004476:	68a3      	ldr	r3, [r4, #8]
 8004478:	42ab      	cmp	r3, r5
 800447a:	dc12      	bgt.n	80044a2 <__multadd+0x66>
 800447c:	6861      	ldr	r1, [r4, #4]
 800447e:	4630      	mov	r0, r6
 8004480:	3101      	adds	r1, #1
 8004482:	f7ff ff90 	bl	80043a6 <_Balloc>
 8004486:	4680      	mov	r8, r0
 8004488:	6922      	ldr	r2, [r4, #16]
 800448a:	f104 010c 	add.w	r1, r4, #12
 800448e:	3202      	adds	r2, #2
 8004490:	0092      	lsls	r2, r2, #2
 8004492:	300c      	adds	r0, #12
 8004494:	f7ff ff7c 	bl	8004390 <memcpy>
 8004498:	4621      	mov	r1, r4
 800449a:	4630      	mov	r0, r6
 800449c:	f7ff ffb7 	bl	800440e <_Bfree>
 80044a0:	4644      	mov	r4, r8
 80044a2:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80044a6:	3501      	adds	r5, #1
 80044a8:	615f      	str	r7, [r3, #20]
 80044aa:	6125      	str	r5, [r4, #16]
 80044ac:	4620      	mov	r0, r4
 80044ae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080044b2 <__hi0bits>:
 80044b2:	0c02      	lsrs	r2, r0, #16
 80044b4:	0412      	lsls	r2, r2, #16
 80044b6:	4603      	mov	r3, r0
 80044b8:	b9b2      	cbnz	r2, 80044e8 <__hi0bits+0x36>
 80044ba:	0403      	lsls	r3, r0, #16
 80044bc:	2010      	movs	r0, #16
 80044be:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 80044c2:	bf04      	itt	eq
 80044c4:	021b      	lsleq	r3, r3, #8
 80044c6:	3008      	addeq	r0, #8
 80044c8:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 80044cc:	bf04      	itt	eq
 80044ce:	011b      	lsleq	r3, r3, #4
 80044d0:	3004      	addeq	r0, #4
 80044d2:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 80044d6:	bf04      	itt	eq
 80044d8:	009b      	lsleq	r3, r3, #2
 80044da:	3002      	addeq	r0, #2
 80044dc:	2b00      	cmp	r3, #0
 80044de:	db06      	blt.n	80044ee <__hi0bits+0x3c>
 80044e0:	005b      	lsls	r3, r3, #1
 80044e2:	d503      	bpl.n	80044ec <__hi0bits+0x3a>
 80044e4:	3001      	adds	r0, #1
 80044e6:	4770      	bx	lr
 80044e8:	2000      	movs	r0, #0
 80044ea:	e7e8      	b.n	80044be <__hi0bits+0xc>
 80044ec:	2020      	movs	r0, #32
 80044ee:	4770      	bx	lr

080044f0 <__lo0bits>:
 80044f0:	6803      	ldr	r3, [r0, #0]
 80044f2:	4601      	mov	r1, r0
 80044f4:	f013 0207 	ands.w	r2, r3, #7
 80044f8:	d00b      	beq.n	8004512 <__lo0bits+0x22>
 80044fa:	07da      	lsls	r2, r3, #31
 80044fc:	d423      	bmi.n	8004546 <__lo0bits+0x56>
 80044fe:	0798      	lsls	r0, r3, #30
 8004500:	bf49      	itett	mi
 8004502:	085b      	lsrmi	r3, r3, #1
 8004504:	089b      	lsrpl	r3, r3, #2
 8004506:	2001      	movmi	r0, #1
 8004508:	600b      	strmi	r3, [r1, #0]
 800450a:	bf5c      	itt	pl
 800450c:	600b      	strpl	r3, [r1, #0]
 800450e:	2002      	movpl	r0, #2
 8004510:	4770      	bx	lr
 8004512:	b298      	uxth	r0, r3
 8004514:	b9a8      	cbnz	r0, 8004542 <__lo0bits+0x52>
 8004516:	2010      	movs	r0, #16
 8004518:	0c1b      	lsrs	r3, r3, #16
 800451a:	f013 0fff 	tst.w	r3, #255	; 0xff
 800451e:	bf04      	itt	eq
 8004520:	0a1b      	lsreq	r3, r3, #8
 8004522:	3008      	addeq	r0, #8
 8004524:	071a      	lsls	r2, r3, #28
 8004526:	bf04      	itt	eq
 8004528:	091b      	lsreq	r3, r3, #4
 800452a:	3004      	addeq	r0, #4
 800452c:	079a      	lsls	r2, r3, #30
 800452e:	bf04      	itt	eq
 8004530:	089b      	lsreq	r3, r3, #2
 8004532:	3002      	addeq	r0, #2
 8004534:	07da      	lsls	r2, r3, #31
 8004536:	d402      	bmi.n	800453e <__lo0bits+0x4e>
 8004538:	085b      	lsrs	r3, r3, #1
 800453a:	d006      	beq.n	800454a <__lo0bits+0x5a>
 800453c:	3001      	adds	r0, #1
 800453e:	600b      	str	r3, [r1, #0]
 8004540:	4770      	bx	lr
 8004542:	4610      	mov	r0, r2
 8004544:	e7e9      	b.n	800451a <__lo0bits+0x2a>
 8004546:	2000      	movs	r0, #0
 8004548:	4770      	bx	lr
 800454a:	2020      	movs	r0, #32
 800454c:	4770      	bx	lr

0800454e <__i2b>:
 800454e:	b510      	push	{r4, lr}
 8004550:	460c      	mov	r4, r1
 8004552:	2101      	movs	r1, #1
 8004554:	f7ff ff27 	bl	80043a6 <_Balloc>
 8004558:	2201      	movs	r2, #1
 800455a:	6144      	str	r4, [r0, #20]
 800455c:	6102      	str	r2, [r0, #16]
 800455e:	bd10      	pop	{r4, pc}

08004560 <__multiply>:
 8004560:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004564:	4614      	mov	r4, r2
 8004566:	690a      	ldr	r2, [r1, #16]
 8004568:	6923      	ldr	r3, [r4, #16]
 800456a:	4688      	mov	r8, r1
 800456c:	429a      	cmp	r2, r3
 800456e:	bfbe      	ittt	lt
 8004570:	460b      	movlt	r3, r1
 8004572:	46a0      	movlt	r8, r4
 8004574:	461c      	movlt	r4, r3
 8004576:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800457a:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800457e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8004582:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8004586:	eb07 0609 	add.w	r6, r7, r9
 800458a:	42b3      	cmp	r3, r6
 800458c:	bfb8      	it	lt
 800458e:	3101      	addlt	r1, #1
 8004590:	f7ff ff09 	bl	80043a6 <_Balloc>
 8004594:	f100 0514 	add.w	r5, r0, #20
 8004598:	462b      	mov	r3, r5
 800459a:	2200      	movs	r2, #0
 800459c:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 80045a0:	4573      	cmp	r3, lr
 80045a2:	d316      	bcc.n	80045d2 <__multiply+0x72>
 80045a4:	f104 0214 	add.w	r2, r4, #20
 80045a8:	f108 0114 	add.w	r1, r8, #20
 80045ac:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 80045b0:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 80045b4:	9300      	str	r3, [sp, #0]
 80045b6:	9b00      	ldr	r3, [sp, #0]
 80045b8:	9201      	str	r2, [sp, #4]
 80045ba:	4293      	cmp	r3, r2
 80045bc:	d80c      	bhi.n	80045d8 <__multiply+0x78>
 80045be:	2e00      	cmp	r6, #0
 80045c0:	dd03      	ble.n	80045ca <__multiply+0x6a>
 80045c2:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d05d      	beq.n	8004686 <__multiply+0x126>
 80045ca:	6106      	str	r6, [r0, #16]
 80045cc:	b003      	add	sp, #12
 80045ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80045d2:	f843 2b04 	str.w	r2, [r3], #4
 80045d6:	e7e3      	b.n	80045a0 <__multiply+0x40>
 80045d8:	f8b2 b000 	ldrh.w	fp, [r2]
 80045dc:	f1bb 0f00 	cmp.w	fp, #0
 80045e0:	d023      	beq.n	800462a <__multiply+0xca>
 80045e2:	4689      	mov	r9, r1
 80045e4:	46ac      	mov	ip, r5
 80045e6:	f04f 0800 	mov.w	r8, #0
 80045ea:	f859 4b04 	ldr.w	r4, [r9], #4
 80045ee:	f8dc a000 	ldr.w	sl, [ip]
 80045f2:	b2a3      	uxth	r3, r4
 80045f4:	fa1f fa8a 	uxth.w	sl, sl
 80045f8:	fb0b a303 	mla	r3, fp, r3, sl
 80045fc:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8004600:	f8dc 4000 	ldr.w	r4, [ip]
 8004604:	4443      	add	r3, r8
 8004606:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800460a:	fb0b 840a 	mla	r4, fp, sl, r8
 800460e:	46e2      	mov	sl, ip
 8004610:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 8004614:	b29b      	uxth	r3, r3
 8004616:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800461a:	454f      	cmp	r7, r9
 800461c:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8004620:	f84a 3b04 	str.w	r3, [sl], #4
 8004624:	d82b      	bhi.n	800467e <__multiply+0x11e>
 8004626:	f8cc 8004 	str.w	r8, [ip, #4]
 800462a:	9b01      	ldr	r3, [sp, #4]
 800462c:	3204      	adds	r2, #4
 800462e:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 8004632:	f1ba 0f00 	cmp.w	sl, #0
 8004636:	d020      	beq.n	800467a <__multiply+0x11a>
 8004638:	4689      	mov	r9, r1
 800463a:	46a8      	mov	r8, r5
 800463c:	f04f 0b00 	mov.w	fp, #0
 8004640:	682b      	ldr	r3, [r5, #0]
 8004642:	f8b9 c000 	ldrh.w	ip, [r9]
 8004646:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 800464a:	b29b      	uxth	r3, r3
 800464c:	fb0a 440c 	mla	r4, sl, ip, r4
 8004650:	46c4      	mov	ip, r8
 8004652:	445c      	add	r4, fp
 8004654:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8004658:	f84c 3b04 	str.w	r3, [ip], #4
 800465c:	f859 3b04 	ldr.w	r3, [r9], #4
 8004660:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 8004664:	0c1b      	lsrs	r3, r3, #16
 8004666:	fb0a b303 	mla	r3, sl, r3, fp
 800466a:	454f      	cmp	r7, r9
 800466c:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8004670:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 8004674:	d805      	bhi.n	8004682 <__multiply+0x122>
 8004676:	f8c8 3004 	str.w	r3, [r8, #4]
 800467a:	3504      	adds	r5, #4
 800467c:	e79b      	b.n	80045b6 <__multiply+0x56>
 800467e:	46d4      	mov	ip, sl
 8004680:	e7b3      	b.n	80045ea <__multiply+0x8a>
 8004682:	46e0      	mov	r8, ip
 8004684:	e7dd      	b.n	8004642 <__multiply+0xe2>
 8004686:	3e01      	subs	r6, #1
 8004688:	e799      	b.n	80045be <__multiply+0x5e>
	...

0800468c <__pow5mult>:
 800468c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004690:	4615      	mov	r5, r2
 8004692:	f012 0203 	ands.w	r2, r2, #3
 8004696:	4606      	mov	r6, r0
 8004698:	460f      	mov	r7, r1
 800469a:	d007      	beq.n	80046ac <__pow5mult+0x20>
 800469c:	4c21      	ldr	r4, [pc, #132]	; (8004724 <__pow5mult+0x98>)
 800469e:	3a01      	subs	r2, #1
 80046a0:	2300      	movs	r3, #0
 80046a2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80046a6:	f7ff fec9 	bl	800443c <__multadd>
 80046aa:	4607      	mov	r7, r0
 80046ac:	10ad      	asrs	r5, r5, #2
 80046ae:	d035      	beq.n	800471c <__pow5mult+0x90>
 80046b0:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80046b2:	b93c      	cbnz	r4, 80046c4 <__pow5mult+0x38>
 80046b4:	2010      	movs	r0, #16
 80046b6:	f7ff fe55 	bl	8004364 <malloc>
 80046ba:	6270      	str	r0, [r6, #36]	; 0x24
 80046bc:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80046c0:	6004      	str	r4, [r0, #0]
 80046c2:	60c4      	str	r4, [r0, #12]
 80046c4:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80046c8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80046cc:	b94c      	cbnz	r4, 80046e2 <__pow5mult+0x56>
 80046ce:	f240 2171 	movw	r1, #625	; 0x271
 80046d2:	4630      	mov	r0, r6
 80046d4:	f7ff ff3b 	bl	800454e <__i2b>
 80046d8:	2300      	movs	r3, #0
 80046da:	4604      	mov	r4, r0
 80046dc:	f8c8 0008 	str.w	r0, [r8, #8]
 80046e0:	6003      	str	r3, [r0, #0]
 80046e2:	f04f 0800 	mov.w	r8, #0
 80046e6:	07eb      	lsls	r3, r5, #31
 80046e8:	d50a      	bpl.n	8004700 <__pow5mult+0x74>
 80046ea:	4639      	mov	r1, r7
 80046ec:	4622      	mov	r2, r4
 80046ee:	4630      	mov	r0, r6
 80046f0:	f7ff ff36 	bl	8004560 <__multiply>
 80046f4:	4681      	mov	r9, r0
 80046f6:	4639      	mov	r1, r7
 80046f8:	4630      	mov	r0, r6
 80046fa:	f7ff fe88 	bl	800440e <_Bfree>
 80046fe:	464f      	mov	r7, r9
 8004700:	106d      	asrs	r5, r5, #1
 8004702:	d00b      	beq.n	800471c <__pow5mult+0x90>
 8004704:	6820      	ldr	r0, [r4, #0]
 8004706:	b938      	cbnz	r0, 8004718 <__pow5mult+0x8c>
 8004708:	4622      	mov	r2, r4
 800470a:	4621      	mov	r1, r4
 800470c:	4630      	mov	r0, r6
 800470e:	f7ff ff27 	bl	8004560 <__multiply>
 8004712:	6020      	str	r0, [r4, #0]
 8004714:	f8c0 8000 	str.w	r8, [r0]
 8004718:	4604      	mov	r4, r0
 800471a:	e7e4      	b.n	80046e6 <__pow5mult+0x5a>
 800471c:	4638      	mov	r0, r7
 800471e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004722:	bf00      	nop
 8004724:	08004ff8 	.word	0x08004ff8

08004728 <__lshift>:
 8004728:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800472c:	460c      	mov	r4, r1
 800472e:	4607      	mov	r7, r0
 8004730:	4616      	mov	r6, r2
 8004732:	6923      	ldr	r3, [r4, #16]
 8004734:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8004738:	eb0a 0903 	add.w	r9, sl, r3
 800473c:	6849      	ldr	r1, [r1, #4]
 800473e:	68a3      	ldr	r3, [r4, #8]
 8004740:	f109 0501 	add.w	r5, r9, #1
 8004744:	42ab      	cmp	r3, r5
 8004746:	db32      	blt.n	80047ae <__lshift+0x86>
 8004748:	4638      	mov	r0, r7
 800474a:	f7ff fe2c 	bl	80043a6 <_Balloc>
 800474e:	2300      	movs	r3, #0
 8004750:	4680      	mov	r8, r0
 8004752:	461a      	mov	r2, r3
 8004754:	f100 0114 	add.w	r1, r0, #20
 8004758:	4553      	cmp	r3, sl
 800475a:	db2b      	blt.n	80047b4 <__lshift+0x8c>
 800475c:	6920      	ldr	r0, [r4, #16]
 800475e:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8004762:	f104 0314 	add.w	r3, r4, #20
 8004766:	f016 021f 	ands.w	r2, r6, #31
 800476a:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800476e:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8004772:	d025      	beq.n	80047c0 <__lshift+0x98>
 8004774:	2000      	movs	r0, #0
 8004776:	f1c2 0e20 	rsb	lr, r2, #32
 800477a:	468a      	mov	sl, r1
 800477c:	681e      	ldr	r6, [r3, #0]
 800477e:	4096      	lsls	r6, r2
 8004780:	4330      	orrs	r0, r6
 8004782:	f84a 0b04 	str.w	r0, [sl], #4
 8004786:	f853 0b04 	ldr.w	r0, [r3], #4
 800478a:	459c      	cmp	ip, r3
 800478c:	fa20 f00e 	lsr.w	r0, r0, lr
 8004790:	d814      	bhi.n	80047bc <__lshift+0x94>
 8004792:	6048      	str	r0, [r1, #4]
 8004794:	b108      	cbz	r0, 800479a <__lshift+0x72>
 8004796:	f109 0502 	add.w	r5, r9, #2
 800479a:	3d01      	subs	r5, #1
 800479c:	4638      	mov	r0, r7
 800479e:	f8c8 5010 	str.w	r5, [r8, #16]
 80047a2:	4621      	mov	r1, r4
 80047a4:	f7ff fe33 	bl	800440e <_Bfree>
 80047a8:	4640      	mov	r0, r8
 80047aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80047ae:	3101      	adds	r1, #1
 80047b0:	005b      	lsls	r3, r3, #1
 80047b2:	e7c7      	b.n	8004744 <__lshift+0x1c>
 80047b4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 80047b8:	3301      	adds	r3, #1
 80047ba:	e7cd      	b.n	8004758 <__lshift+0x30>
 80047bc:	4651      	mov	r1, sl
 80047be:	e7dc      	b.n	800477a <__lshift+0x52>
 80047c0:	3904      	subs	r1, #4
 80047c2:	f853 2b04 	ldr.w	r2, [r3], #4
 80047c6:	459c      	cmp	ip, r3
 80047c8:	f841 2f04 	str.w	r2, [r1, #4]!
 80047cc:	d8f9      	bhi.n	80047c2 <__lshift+0x9a>
 80047ce:	e7e4      	b.n	800479a <__lshift+0x72>

080047d0 <__mcmp>:
 80047d0:	6903      	ldr	r3, [r0, #16]
 80047d2:	690a      	ldr	r2, [r1, #16]
 80047d4:	b530      	push	{r4, r5, lr}
 80047d6:	1a9b      	subs	r3, r3, r2
 80047d8:	d10c      	bne.n	80047f4 <__mcmp+0x24>
 80047da:	0092      	lsls	r2, r2, #2
 80047dc:	3014      	adds	r0, #20
 80047de:	3114      	adds	r1, #20
 80047e0:	1884      	adds	r4, r0, r2
 80047e2:	4411      	add	r1, r2
 80047e4:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80047e8:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80047ec:	4295      	cmp	r5, r2
 80047ee:	d003      	beq.n	80047f8 <__mcmp+0x28>
 80047f0:	d305      	bcc.n	80047fe <__mcmp+0x2e>
 80047f2:	2301      	movs	r3, #1
 80047f4:	4618      	mov	r0, r3
 80047f6:	bd30      	pop	{r4, r5, pc}
 80047f8:	42a0      	cmp	r0, r4
 80047fa:	d3f3      	bcc.n	80047e4 <__mcmp+0x14>
 80047fc:	e7fa      	b.n	80047f4 <__mcmp+0x24>
 80047fe:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004802:	e7f7      	b.n	80047f4 <__mcmp+0x24>

08004804 <__mdiff>:
 8004804:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004808:	460d      	mov	r5, r1
 800480a:	4607      	mov	r7, r0
 800480c:	4611      	mov	r1, r2
 800480e:	4628      	mov	r0, r5
 8004810:	4614      	mov	r4, r2
 8004812:	f7ff ffdd 	bl	80047d0 <__mcmp>
 8004816:	1e06      	subs	r6, r0, #0
 8004818:	d108      	bne.n	800482c <__mdiff+0x28>
 800481a:	4631      	mov	r1, r6
 800481c:	4638      	mov	r0, r7
 800481e:	f7ff fdc2 	bl	80043a6 <_Balloc>
 8004822:	2301      	movs	r3, #1
 8004824:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8004828:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800482c:	bfa4      	itt	ge
 800482e:	4623      	movge	r3, r4
 8004830:	462c      	movge	r4, r5
 8004832:	4638      	mov	r0, r7
 8004834:	6861      	ldr	r1, [r4, #4]
 8004836:	bfa6      	itte	ge
 8004838:	461d      	movge	r5, r3
 800483a:	2600      	movge	r6, #0
 800483c:	2601      	movlt	r6, #1
 800483e:	f7ff fdb2 	bl	80043a6 <_Balloc>
 8004842:	f04f 0e00 	mov.w	lr, #0
 8004846:	60c6      	str	r6, [r0, #12]
 8004848:	692b      	ldr	r3, [r5, #16]
 800484a:	6926      	ldr	r6, [r4, #16]
 800484c:	f104 0214 	add.w	r2, r4, #20
 8004850:	f105 0914 	add.w	r9, r5, #20
 8004854:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 8004858:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 800485c:	f100 0114 	add.w	r1, r0, #20
 8004860:	f852 ab04 	ldr.w	sl, [r2], #4
 8004864:	f859 5b04 	ldr.w	r5, [r9], #4
 8004868:	fa1f f38a 	uxth.w	r3, sl
 800486c:	4473      	add	r3, lr
 800486e:	b2ac      	uxth	r4, r5
 8004870:	1b1b      	subs	r3, r3, r4
 8004872:	0c2c      	lsrs	r4, r5, #16
 8004874:	ebc4 441a 	rsb	r4, r4, sl, lsr #16
 8004878:	eb04 4423 	add.w	r4, r4, r3, asr #16
 800487c:	b29b      	uxth	r3, r3
 800487e:	ea4f 4e24 	mov.w	lr, r4, asr #16
 8004882:	45c8      	cmp	r8, r9
 8004884:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8004888:	4694      	mov	ip, r2
 800488a:	f841 4b04 	str.w	r4, [r1], #4
 800488e:	d8e7      	bhi.n	8004860 <__mdiff+0x5c>
 8004890:	45bc      	cmp	ip, r7
 8004892:	d304      	bcc.n	800489e <__mdiff+0x9a>
 8004894:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 8004898:	b183      	cbz	r3, 80048bc <__mdiff+0xb8>
 800489a:	6106      	str	r6, [r0, #16]
 800489c:	e7c4      	b.n	8004828 <__mdiff+0x24>
 800489e:	f85c 4b04 	ldr.w	r4, [ip], #4
 80048a2:	b2a2      	uxth	r2, r4
 80048a4:	4472      	add	r2, lr
 80048a6:	1413      	asrs	r3, r2, #16
 80048a8:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 80048ac:	b292      	uxth	r2, r2
 80048ae:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 80048b2:	ea4f 4e23 	mov.w	lr, r3, asr #16
 80048b6:	f841 2b04 	str.w	r2, [r1], #4
 80048ba:	e7e9      	b.n	8004890 <__mdiff+0x8c>
 80048bc:	3e01      	subs	r6, #1
 80048be:	e7e9      	b.n	8004894 <__mdiff+0x90>

080048c0 <__d2b>:
 80048c0:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 80048c4:	461c      	mov	r4, r3
 80048c6:	e9dd 6508 	ldrd	r6, r5, [sp, #32]
 80048ca:	2101      	movs	r1, #1
 80048cc:	4690      	mov	r8, r2
 80048ce:	f7ff fd6a 	bl	80043a6 <_Balloc>
 80048d2:	f3c4 0213 	ubfx	r2, r4, #0, #20
 80048d6:	f3c4 540a 	ubfx	r4, r4, #20, #11
 80048da:	4607      	mov	r7, r0
 80048dc:	bb34      	cbnz	r4, 800492c <__d2b+0x6c>
 80048de:	9201      	str	r2, [sp, #4]
 80048e0:	f1b8 0200 	subs.w	r2, r8, #0
 80048e4:	d027      	beq.n	8004936 <__d2b+0x76>
 80048e6:	a802      	add	r0, sp, #8
 80048e8:	f840 2d08 	str.w	r2, [r0, #-8]!
 80048ec:	f7ff fe00 	bl	80044f0 <__lo0bits>
 80048f0:	9900      	ldr	r1, [sp, #0]
 80048f2:	b1f0      	cbz	r0, 8004932 <__d2b+0x72>
 80048f4:	9a01      	ldr	r2, [sp, #4]
 80048f6:	f1c0 0320 	rsb	r3, r0, #32
 80048fa:	fa02 f303 	lsl.w	r3, r2, r3
 80048fe:	430b      	orrs	r3, r1
 8004900:	40c2      	lsrs	r2, r0
 8004902:	617b      	str	r3, [r7, #20]
 8004904:	9201      	str	r2, [sp, #4]
 8004906:	9b01      	ldr	r3, [sp, #4]
 8004908:	2b00      	cmp	r3, #0
 800490a:	bf14      	ite	ne
 800490c:	2102      	movne	r1, #2
 800490e:	2101      	moveq	r1, #1
 8004910:	61bb      	str	r3, [r7, #24]
 8004912:	6139      	str	r1, [r7, #16]
 8004914:	b1c4      	cbz	r4, 8004948 <__d2b+0x88>
 8004916:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 800491a:	4404      	add	r4, r0
 800491c:	6034      	str	r4, [r6, #0]
 800491e:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8004922:	6028      	str	r0, [r5, #0]
 8004924:	4638      	mov	r0, r7
 8004926:	b002      	add	sp, #8
 8004928:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800492c:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8004930:	e7d5      	b.n	80048de <__d2b+0x1e>
 8004932:	6179      	str	r1, [r7, #20]
 8004934:	e7e7      	b.n	8004906 <__d2b+0x46>
 8004936:	a801      	add	r0, sp, #4
 8004938:	f7ff fdda 	bl	80044f0 <__lo0bits>
 800493c:	2101      	movs	r1, #1
 800493e:	9b01      	ldr	r3, [sp, #4]
 8004940:	6139      	str	r1, [r7, #16]
 8004942:	617b      	str	r3, [r7, #20]
 8004944:	3020      	adds	r0, #32
 8004946:	e7e5      	b.n	8004914 <__d2b+0x54>
 8004948:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800494c:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 8004950:	6030      	str	r0, [r6, #0]
 8004952:	6918      	ldr	r0, [r3, #16]
 8004954:	f7ff fdad 	bl	80044b2 <__hi0bits>
 8004958:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 800495c:	e7e1      	b.n	8004922 <__d2b+0x62>

0800495e <_calloc_r>:
 800495e:	b538      	push	{r3, r4, r5, lr}
 8004960:	fb02 f401 	mul.w	r4, r2, r1
 8004964:	4621      	mov	r1, r4
 8004966:	f000 f855 	bl	8004a14 <_malloc_r>
 800496a:	4605      	mov	r5, r0
 800496c:	b118      	cbz	r0, 8004976 <_calloc_r+0x18>
 800496e:	4622      	mov	r2, r4
 8004970:	2100      	movs	r1, #0
 8004972:	f7fe fa2f 	bl	8002dd4 <memset>
 8004976:	4628      	mov	r0, r5
 8004978:	bd38      	pop	{r3, r4, r5, pc}
	...

0800497c <_free_r>:
 800497c:	b538      	push	{r3, r4, r5, lr}
 800497e:	4605      	mov	r5, r0
 8004980:	2900      	cmp	r1, #0
 8004982:	d043      	beq.n	8004a0c <_free_r+0x90>
 8004984:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004988:	1f0c      	subs	r4, r1, #4
 800498a:	2b00      	cmp	r3, #0
 800498c:	bfb8      	it	lt
 800498e:	18e4      	addlt	r4, r4, r3
 8004990:	f000 fa27 	bl	8004de2 <__malloc_lock>
 8004994:	4a1e      	ldr	r2, [pc, #120]	; (8004a10 <_free_r+0x94>)
 8004996:	6813      	ldr	r3, [r2, #0]
 8004998:	4610      	mov	r0, r2
 800499a:	b933      	cbnz	r3, 80049aa <_free_r+0x2e>
 800499c:	6063      	str	r3, [r4, #4]
 800499e:	6014      	str	r4, [r2, #0]
 80049a0:	4628      	mov	r0, r5
 80049a2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80049a6:	f000 ba1d 	b.w	8004de4 <__malloc_unlock>
 80049aa:	42a3      	cmp	r3, r4
 80049ac:	d90b      	bls.n	80049c6 <_free_r+0x4a>
 80049ae:	6821      	ldr	r1, [r4, #0]
 80049b0:	1862      	adds	r2, r4, r1
 80049b2:	4293      	cmp	r3, r2
 80049b4:	bf01      	itttt	eq
 80049b6:	681a      	ldreq	r2, [r3, #0]
 80049b8:	685b      	ldreq	r3, [r3, #4]
 80049ba:	1852      	addeq	r2, r2, r1
 80049bc:	6022      	streq	r2, [r4, #0]
 80049be:	6063      	str	r3, [r4, #4]
 80049c0:	6004      	str	r4, [r0, #0]
 80049c2:	e7ed      	b.n	80049a0 <_free_r+0x24>
 80049c4:	4613      	mov	r3, r2
 80049c6:	685a      	ldr	r2, [r3, #4]
 80049c8:	b10a      	cbz	r2, 80049ce <_free_r+0x52>
 80049ca:	42a2      	cmp	r2, r4
 80049cc:	d9fa      	bls.n	80049c4 <_free_r+0x48>
 80049ce:	6819      	ldr	r1, [r3, #0]
 80049d0:	1858      	adds	r0, r3, r1
 80049d2:	42a0      	cmp	r0, r4
 80049d4:	d10b      	bne.n	80049ee <_free_r+0x72>
 80049d6:	6820      	ldr	r0, [r4, #0]
 80049d8:	4401      	add	r1, r0
 80049da:	1858      	adds	r0, r3, r1
 80049dc:	4282      	cmp	r2, r0
 80049de:	6019      	str	r1, [r3, #0]
 80049e0:	d1de      	bne.n	80049a0 <_free_r+0x24>
 80049e2:	6810      	ldr	r0, [r2, #0]
 80049e4:	6852      	ldr	r2, [r2, #4]
 80049e6:	4401      	add	r1, r0
 80049e8:	6019      	str	r1, [r3, #0]
 80049ea:	605a      	str	r2, [r3, #4]
 80049ec:	e7d8      	b.n	80049a0 <_free_r+0x24>
 80049ee:	d902      	bls.n	80049f6 <_free_r+0x7a>
 80049f0:	230c      	movs	r3, #12
 80049f2:	602b      	str	r3, [r5, #0]
 80049f4:	e7d4      	b.n	80049a0 <_free_r+0x24>
 80049f6:	6820      	ldr	r0, [r4, #0]
 80049f8:	1821      	adds	r1, r4, r0
 80049fa:	428a      	cmp	r2, r1
 80049fc:	bf01      	itttt	eq
 80049fe:	6811      	ldreq	r1, [r2, #0]
 8004a00:	6852      	ldreq	r2, [r2, #4]
 8004a02:	1809      	addeq	r1, r1, r0
 8004a04:	6021      	streq	r1, [r4, #0]
 8004a06:	6062      	str	r2, [r4, #4]
 8004a08:	605c      	str	r4, [r3, #4]
 8004a0a:	e7c9      	b.n	80049a0 <_free_r+0x24>
 8004a0c:	bd38      	pop	{r3, r4, r5, pc}
 8004a0e:	bf00      	nop
 8004a10:	20000228 	.word	0x20000228

08004a14 <_malloc_r>:
 8004a14:	b570      	push	{r4, r5, r6, lr}
 8004a16:	1ccd      	adds	r5, r1, #3
 8004a18:	f025 0503 	bic.w	r5, r5, #3
 8004a1c:	3508      	adds	r5, #8
 8004a1e:	2d0c      	cmp	r5, #12
 8004a20:	bf38      	it	cc
 8004a22:	250c      	movcc	r5, #12
 8004a24:	2d00      	cmp	r5, #0
 8004a26:	4606      	mov	r6, r0
 8004a28:	db01      	blt.n	8004a2e <_malloc_r+0x1a>
 8004a2a:	42a9      	cmp	r1, r5
 8004a2c:	d903      	bls.n	8004a36 <_malloc_r+0x22>
 8004a2e:	230c      	movs	r3, #12
 8004a30:	6033      	str	r3, [r6, #0]
 8004a32:	2000      	movs	r0, #0
 8004a34:	bd70      	pop	{r4, r5, r6, pc}
 8004a36:	f000 f9d4 	bl	8004de2 <__malloc_lock>
 8004a3a:	4a21      	ldr	r2, [pc, #132]	; (8004ac0 <_malloc_r+0xac>)
 8004a3c:	6814      	ldr	r4, [r2, #0]
 8004a3e:	4621      	mov	r1, r4
 8004a40:	b991      	cbnz	r1, 8004a68 <_malloc_r+0x54>
 8004a42:	4c20      	ldr	r4, [pc, #128]	; (8004ac4 <_malloc_r+0xb0>)
 8004a44:	6823      	ldr	r3, [r4, #0]
 8004a46:	b91b      	cbnz	r3, 8004a50 <_malloc_r+0x3c>
 8004a48:	4630      	mov	r0, r6
 8004a4a:	f000 f98f 	bl	8004d6c <_sbrk_r>
 8004a4e:	6020      	str	r0, [r4, #0]
 8004a50:	4629      	mov	r1, r5
 8004a52:	4630      	mov	r0, r6
 8004a54:	f000 f98a 	bl	8004d6c <_sbrk_r>
 8004a58:	1c43      	adds	r3, r0, #1
 8004a5a:	d124      	bne.n	8004aa6 <_malloc_r+0x92>
 8004a5c:	230c      	movs	r3, #12
 8004a5e:	4630      	mov	r0, r6
 8004a60:	6033      	str	r3, [r6, #0]
 8004a62:	f000 f9bf 	bl	8004de4 <__malloc_unlock>
 8004a66:	e7e4      	b.n	8004a32 <_malloc_r+0x1e>
 8004a68:	680b      	ldr	r3, [r1, #0]
 8004a6a:	1b5b      	subs	r3, r3, r5
 8004a6c:	d418      	bmi.n	8004aa0 <_malloc_r+0x8c>
 8004a6e:	2b0b      	cmp	r3, #11
 8004a70:	d90f      	bls.n	8004a92 <_malloc_r+0x7e>
 8004a72:	600b      	str	r3, [r1, #0]
 8004a74:	18cc      	adds	r4, r1, r3
 8004a76:	50cd      	str	r5, [r1, r3]
 8004a78:	4630      	mov	r0, r6
 8004a7a:	f000 f9b3 	bl	8004de4 <__malloc_unlock>
 8004a7e:	f104 000b 	add.w	r0, r4, #11
 8004a82:	1d23      	adds	r3, r4, #4
 8004a84:	f020 0007 	bic.w	r0, r0, #7
 8004a88:	1ac3      	subs	r3, r0, r3
 8004a8a:	d0d3      	beq.n	8004a34 <_malloc_r+0x20>
 8004a8c:	425a      	negs	r2, r3
 8004a8e:	50e2      	str	r2, [r4, r3]
 8004a90:	e7d0      	b.n	8004a34 <_malloc_r+0x20>
 8004a92:	684b      	ldr	r3, [r1, #4]
 8004a94:	428c      	cmp	r4, r1
 8004a96:	bf16      	itet	ne
 8004a98:	6063      	strne	r3, [r4, #4]
 8004a9a:	6013      	streq	r3, [r2, #0]
 8004a9c:	460c      	movne	r4, r1
 8004a9e:	e7eb      	b.n	8004a78 <_malloc_r+0x64>
 8004aa0:	460c      	mov	r4, r1
 8004aa2:	6849      	ldr	r1, [r1, #4]
 8004aa4:	e7cc      	b.n	8004a40 <_malloc_r+0x2c>
 8004aa6:	1cc4      	adds	r4, r0, #3
 8004aa8:	f024 0403 	bic.w	r4, r4, #3
 8004aac:	42a0      	cmp	r0, r4
 8004aae:	d005      	beq.n	8004abc <_malloc_r+0xa8>
 8004ab0:	1a21      	subs	r1, r4, r0
 8004ab2:	4630      	mov	r0, r6
 8004ab4:	f000 f95a 	bl	8004d6c <_sbrk_r>
 8004ab8:	3001      	adds	r0, #1
 8004aba:	d0cf      	beq.n	8004a5c <_malloc_r+0x48>
 8004abc:	6025      	str	r5, [r4, #0]
 8004abe:	e7db      	b.n	8004a78 <_malloc_r+0x64>
 8004ac0:	20000228 	.word	0x20000228
 8004ac4:	2000022c 	.word	0x2000022c

08004ac8 <__ssputs_r>:
 8004ac8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004acc:	688e      	ldr	r6, [r1, #8]
 8004ace:	4682      	mov	sl, r0
 8004ad0:	429e      	cmp	r6, r3
 8004ad2:	460c      	mov	r4, r1
 8004ad4:	4690      	mov	r8, r2
 8004ad6:	4699      	mov	r9, r3
 8004ad8:	d837      	bhi.n	8004b4a <__ssputs_r+0x82>
 8004ada:	898a      	ldrh	r2, [r1, #12]
 8004adc:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8004ae0:	d031      	beq.n	8004b46 <__ssputs_r+0x7e>
 8004ae2:	2302      	movs	r3, #2
 8004ae4:	6825      	ldr	r5, [r4, #0]
 8004ae6:	6909      	ldr	r1, [r1, #16]
 8004ae8:	1a6f      	subs	r7, r5, r1
 8004aea:	6965      	ldr	r5, [r4, #20]
 8004aec:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004af0:	fb95 f5f3 	sdiv	r5, r5, r3
 8004af4:	f109 0301 	add.w	r3, r9, #1
 8004af8:	443b      	add	r3, r7
 8004afa:	429d      	cmp	r5, r3
 8004afc:	bf38      	it	cc
 8004afe:	461d      	movcc	r5, r3
 8004b00:	0553      	lsls	r3, r2, #21
 8004b02:	d530      	bpl.n	8004b66 <__ssputs_r+0x9e>
 8004b04:	4629      	mov	r1, r5
 8004b06:	f7ff ff85 	bl	8004a14 <_malloc_r>
 8004b0a:	4606      	mov	r6, r0
 8004b0c:	b950      	cbnz	r0, 8004b24 <__ssputs_r+0x5c>
 8004b0e:	230c      	movs	r3, #12
 8004b10:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004b14:	f8ca 3000 	str.w	r3, [sl]
 8004b18:	89a3      	ldrh	r3, [r4, #12]
 8004b1a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004b1e:	81a3      	strh	r3, [r4, #12]
 8004b20:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004b24:	463a      	mov	r2, r7
 8004b26:	6921      	ldr	r1, [r4, #16]
 8004b28:	f7ff fc32 	bl	8004390 <memcpy>
 8004b2c:	89a3      	ldrh	r3, [r4, #12]
 8004b2e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8004b32:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004b36:	81a3      	strh	r3, [r4, #12]
 8004b38:	6126      	str	r6, [r4, #16]
 8004b3a:	443e      	add	r6, r7
 8004b3c:	6026      	str	r6, [r4, #0]
 8004b3e:	464e      	mov	r6, r9
 8004b40:	6165      	str	r5, [r4, #20]
 8004b42:	1bed      	subs	r5, r5, r7
 8004b44:	60a5      	str	r5, [r4, #8]
 8004b46:	454e      	cmp	r6, r9
 8004b48:	d900      	bls.n	8004b4c <__ssputs_r+0x84>
 8004b4a:	464e      	mov	r6, r9
 8004b4c:	4632      	mov	r2, r6
 8004b4e:	4641      	mov	r1, r8
 8004b50:	6820      	ldr	r0, [r4, #0]
 8004b52:	f000 f92d 	bl	8004db0 <memmove>
 8004b56:	68a3      	ldr	r3, [r4, #8]
 8004b58:	2000      	movs	r0, #0
 8004b5a:	1b9b      	subs	r3, r3, r6
 8004b5c:	60a3      	str	r3, [r4, #8]
 8004b5e:	6823      	ldr	r3, [r4, #0]
 8004b60:	441e      	add	r6, r3
 8004b62:	6026      	str	r6, [r4, #0]
 8004b64:	e7dc      	b.n	8004b20 <__ssputs_r+0x58>
 8004b66:	462a      	mov	r2, r5
 8004b68:	f000 f93d 	bl	8004de6 <_realloc_r>
 8004b6c:	4606      	mov	r6, r0
 8004b6e:	2800      	cmp	r0, #0
 8004b70:	d1e2      	bne.n	8004b38 <__ssputs_r+0x70>
 8004b72:	6921      	ldr	r1, [r4, #16]
 8004b74:	4650      	mov	r0, sl
 8004b76:	f7ff ff01 	bl	800497c <_free_r>
 8004b7a:	e7c8      	b.n	8004b0e <__ssputs_r+0x46>

08004b7c <_svfiprintf_r>:
 8004b7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004b80:	461d      	mov	r5, r3
 8004b82:	898b      	ldrh	r3, [r1, #12]
 8004b84:	b09d      	sub	sp, #116	; 0x74
 8004b86:	061f      	lsls	r7, r3, #24
 8004b88:	4680      	mov	r8, r0
 8004b8a:	460c      	mov	r4, r1
 8004b8c:	4616      	mov	r6, r2
 8004b8e:	d50f      	bpl.n	8004bb0 <_svfiprintf_r+0x34>
 8004b90:	690b      	ldr	r3, [r1, #16]
 8004b92:	b96b      	cbnz	r3, 8004bb0 <_svfiprintf_r+0x34>
 8004b94:	2140      	movs	r1, #64	; 0x40
 8004b96:	f7ff ff3d 	bl	8004a14 <_malloc_r>
 8004b9a:	6020      	str	r0, [r4, #0]
 8004b9c:	6120      	str	r0, [r4, #16]
 8004b9e:	b928      	cbnz	r0, 8004bac <_svfiprintf_r+0x30>
 8004ba0:	230c      	movs	r3, #12
 8004ba2:	f8c8 3000 	str.w	r3, [r8]
 8004ba6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004baa:	e0c8      	b.n	8004d3e <_svfiprintf_r+0x1c2>
 8004bac:	2340      	movs	r3, #64	; 0x40
 8004bae:	6163      	str	r3, [r4, #20]
 8004bb0:	2300      	movs	r3, #0
 8004bb2:	9309      	str	r3, [sp, #36]	; 0x24
 8004bb4:	2320      	movs	r3, #32
 8004bb6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004bba:	2330      	movs	r3, #48	; 0x30
 8004bbc:	f04f 0b01 	mov.w	fp, #1
 8004bc0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004bc4:	9503      	str	r5, [sp, #12]
 8004bc6:	4637      	mov	r7, r6
 8004bc8:	463d      	mov	r5, r7
 8004bca:	f815 3b01 	ldrb.w	r3, [r5], #1
 8004bce:	b10b      	cbz	r3, 8004bd4 <_svfiprintf_r+0x58>
 8004bd0:	2b25      	cmp	r3, #37	; 0x25
 8004bd2:	d13e      	bne.n	8004c52 <_svfiprintf_r+0xd6>
 8004bd4:	ebb7 0a06 	subs.w	sl, r7, r6
 8004bd8:	d00b      	beq.n	8004bf2 <_svfiprintf_r+0x76>
 8004bda:	4653      	mov	r3, sl
 8004bdc:	4632      	mov	r2, r6
 8004bde:	4621      	mov	r1, r4
 8004be0:	4640      	mov	r0, r8
 8004be2:	f7ff ff71 	bl	8004ac8 <__ssputs_r>
 8004be6:	3001      	adds	r0, #1
 8004be8:	f000 80a4 	beq.w	8004d34 <_svfiprintf_r+0x1b8>
 8004bec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004bee:	4453      	add	r3, sl
 8004bf0:	9309      	str	r3, [sp, #36]	; 0x24
 8004bf2:	783b      	ldrb	r3, [r7, #0]
 8004bf4:	2b00      	cmp	r3, #0
 8004bf6:	f000 809d 	beq.w	8004d34 <_svfiprintf_r+0x1b8>
 8004bfa:	2300      	movs	r3, #0
 8004bfc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004c00:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004c04:	9304      	str	r3, [sp, #16]
 8004c06:	9307      	str	r3, [sp, #28]
 8004c08:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004c0c:	931a      	str	r3, [sp, #104]	; 0x68
 8004c0e:	462f      	mov	r7, r5
 8004c10:	2205      	movs	r2, #5
 8004c12:	f817 1b01 	ldrb.w	r1, [r7], #1
 8004c16:	4850      	ldr	r0, [pc, #320]	; (8004d58 <_svfiprintf_r+0x1dc>)
 8004c18:	f7ff fbac 	bl	8004374 <memchr>
 8004c1c:	9b04      	ldr	r3, [sp, #16]
 8004c1e:	b9d0      	cbnz	r0, 8004c56 <_svfiprintf_r+0xda>
 8004c20:	06d9      	lsls	r1, r3, #27
 8004c22:	bf44      	itt	mi
 8004c24:	2220      	movmi	r2, #32
 8004c26:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8004c2a:	071a      	lsls	r2, r3, #28
 8004c2c:	bf44      	itt	mi
 8004c2e:	222b      	movmi	r2, #43	; 0x2b
 8004c30:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8004c34:	782a      	ldrb	r2, [r5, #0]
 8004c36:	2a2a      	cmp	r2, #42	; 0x2a
 8004c38:	d015      	beq.n	8004c66 <_svfiprintf_r+0xea>
 8004c3a:	462f      	mov	r7, r5
 8004c3c:	2000      	movs	r0, #0
 8004c3e:	250a      	movs	r5, #10
 8004c40:	9a07      	ldr	r2, [sp, #28]
 8004c42:	4639      	mov	r1, r7
 8004c44:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004c48:	3b30      	subs	r3, #48	; 0x30
 8004c4a:	2b09      	cmp	r3, #9
 8004c4c:	d94d      	bls.n	8004cea <_svfiprintf_r+0x16e>
 8004c4e:	b1b8      	cbz	r0, 8004c80 <_svfiprintf_r+0x104>
 8004c50:	e00f      	b.n	8004c72 <_svfiprintf_r+0xf6>
 8004c52:	462f      	mov	r7, r5
 8004c54:	e7b8      	b.n	8004bc8 <_svfiprintf_r+0x4c>
 8004c56:	4a40      	ldr	r2, [pc, #256]	; (8004d58 <_svfiprintf_r+0x1dc>)
 8004c58:	463d      	mov	r5, r7
 8004c5a:	1a80      	subs	r0, r0, r2
 8004c5c:	fa0b f000 	lsl.w	r0, fp, r0
 8004c60:	4318      	orrs	r0, r3
 8004c62:	9004      	str	r0, [sp, #16]
 8004c64:	e7d3      	b.n	8004c0e <_svfiprintf_r+0x92>
 8004c66:	9a03      	ldr	r2, [sp, #12]
 8004c68:	1d11      	adds	r1, r2, #4
 8004c6a:	6812      	ldr	r2, [r2, #0]
 8004c6c:	9103      	str	r1, [sp, #12]
 8004c6e:	2a00      	cmp	r2, #0
 8004c70:	db01      	blt.n	8004c76 <_svfiprintf_r+0xfa>
 8004c72:	9207      	str	r2, [sp, #28]
 8004c74:	e004      	b.n	8004c80 <_svfiprintf_r+0x104>
 8004c76:	4252      	negs	r2, r2
 8004c78:	f043 0302 	orr.w	r3, r3, #2
 8004c7c:	9207      	str	r2, [sp, #28]
 8004c7e:	9304      	str	r3, [sp, #16]
 8004c80:	783b      	ldrb	r3, [r7, #0]
 8004c82:	2b2e      	cmp	r3, #46	; 0x2e
 8004c84:	d10c      	bne.n	8004ca0 <_svfiprintf_r+0x124>
 8004c86:	787b      	ldrb	r3, [r7, #1]
 8004c88:	2b2a      	cmp	r3, #42	; 0x2a
 8004c8a:	d133      	bne.n	8004cf4 <_svfiprintf_r+0x178>
 8004c8c:	9b03      	ldr	r3, [sp, #12]
 8004c8e:	3702      	adds	r7, #2
 8004c90:	1d1a      	adds	r2, r3, #4
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	9203      	str	r2, [sp, #12]
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	bfb8      	it	lt
 8004c9a:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8004c9e:	9305      	str	r3, [sp, #20]
 8004ca0:	4d2e      	ldr	r5, [pc, #184]	; (8004d5c <_svfiprintf_r+0x1e0>)
 8004ca2:	2203      	movs	r2, #3
 8004ca4:	7839      	ldrb	r1, [r7, #0]
 8004ca6:	4628      	mov	r0, r5
 8004ca8:	f7ff fb64 	bl	8004374 <memchr>
 8004cac:	b138      	cbz	r0, 8004cbe <_svfiprintf_r+0x142>
 8004cae:	2340      	movs	r3, #64	; 0x40
 8004cb0:	1b40      	subs	r0, r0, r5
 8004cb2:	fa03 f000 	lsl.w	r0, r3, r0
 8004cb6:	9b04      	ldr	r3, [sp, #16]
 8004cb8:	3701      	adds	r7, #1
 8004cba:	4303      	orrs	r3, r0
 8004cbc:	9304      	str	r3, [sp, #16]
 8004cbe:	7839      	ldrb	r1, [r7, #0]
 8004cc0:	2206      	movs	r2, #6
 8004cc2:	4827      	ldr	r0, [pc, #156]	; (8004d60 <_svfiprintf_r+0x1e4>)
 8004cc4:	1c7e      	adds	r6, r7, #1
 8004cc6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004cca:	f7ff fb53 	bl	8004374 <memchr>
 8004cce:	2800      	cmp	r0, #0
 8004cd0:	d038      	beq.n	8004d44 <_svfiprintf_r+0x1c8>
 8004cd2:	4b24      	ldr	r3, [pc, #144]	; (8004d64 <_svfiprintf_r+0x1e8>)
 8004cd4:	bb13      	cbnz	r3, 8004d1c <_svfiprintf_r+0x1a0>
 8004cd6:	9b03      	ldr	r3, [sp, #12]
 8004cd8:	3307      	adds	r3, #7
 8004cda:	f023 0307 	bic.w	r3, r3, #7
 8004cde:	3308      	adds	r3, #8
 8004ce0:	9303      	str	r3, [sp, #12]
 8004ce2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004ce4:	444b      	add	r3, r9
 8004ce6:	9309      	str	r3, [sp, #36]	; 0x24
 8004ce8:	e76d      	b.n	8004bc6 <_svfiprintf_r+0x4a>
 8004cea:	fb05 3202 	mla	r2, r5, r2, r3
 8004cee:	2001      	movs	r0, #1
 8004cf0:	460f      	mov	r7, r1
 8004cf2:	e7a6      	b.n	8004c42 <_svfiprintf_r+0xc6>
 8004cf4:	2300      	movs	r3, #0
 8004cf6:	250a      	movs	r5, #10
 8004cf8:	4619      	mov	r1, r3
 8004cfa:	3701      	adds	r7, #1
 8004cfc:	9305      	str	r3, [sp, #20]
 8004cfe:	4638      	mov	r0, r7
 8004d00:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004d04:	3a30      	subs	r2, #48	; 0x30
 8004d06:	2a09      	cmp	r2, #9
 8004d08:	d903      	bls.n	8004d12 <_svfiprintf_r+0x196>
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	d0c8      	beq.n	8004ca0 <_svfiprintf_r+0x124>
 8004d0e:	9105      	str	r1, [sp, #20]
 8004d10:	e7c6      	b.n	8004ca0 <_svfiprintf_r+0x124>
 8004d12:	fb05 2101 	mla	r1, r5, r1, r2
 8004d16:	2301      	movs	r3, #1
 8004d18:	4607      	mov	r7, r0
 8004d1a:	e7f0      	b.n	8004cfe <_svfiprintf_r+0x182>
 8004d1c:	ab03      	add	r3, sp, #12
 8004d1e:	9300      	str	r3, [sp, #0]
 8004d20:	4622      	mov	r2, r4
 8004d22:	4b11      	ldr	r3, [pc, #68]	; (8004d68 <_svfiprintf_r+0x1ec>)
 8004d24:	a904      	add	r1, sp, #16
 8004d26:	4640      	mov	r0, r8
 8004d28:	f7fe f8ee 	bl	8002f08 <_printf_float>
 8004d2c:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 8004d30:	4681      	mov	r9, r0
 8004d32:	d1d6      	bne.n	8004ce2 <_svfiprintf_r+0x166>
 8004d34:	89a3      	ldrh	r3, [r4, #12]
 8004d36:	065b      	lsls	r3, r3, #25
 8004d38:	f53f af35 	bmi.w	8004ba6 <_svfiprintf_r+0x2a>
 8004d3c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004d3e:	b01d      	add	sp, #116	; 0x74
 8004d40:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004d44:	ab03      	add	r3, sp, #12
 8004d46:	9300      	str	r3, [sp, #0]
 8004d48:	4622      	mov	r2, r4
 8004d4a:	4b07      	ldr	r3, [pc, #28]	; (8004d68 <_svfiprintf_r+0x1ec>)
 8004d4c:	a904      	add	r1, sp, #16
 8004d4e:	4640      	mov	r0, r8
 8004d50:	f7fe fb86 	bl	8003460 <_printf_i>
 8004d54:	e7ea      	b.n	8004d2c <_svfiprintf_r+0x1b0>
 8004d56:	bf00      	nop
 8004d58:	08005004 	.word	0x08005004
 8004d5c:	0800500a 	.word	0x0800500a
 8004d60:	0800500e 	.word	0x0800500e
 8004d64:	08002f09 	.word	0x08002f09
 8004d68:	08004ac9 	.word	0x08004ac9

08004d6c <_sbrk_r>:
 8004d6c:	b538      	push	{r3, r4, r5, lr}
 8004d6e:	2300      	movs	r3, #0
 8004d70:	4c05      	ldr	r4, [pc, #20]	; (8004d88 <_sbrk_r+0x1c>)
 8004d72:	4605      	mov	r5, r0
 8004d74:	4608      	mov	r0, r1
 8004d76:	6023      	str	r3, [r4, #0]
 8004d78:	f7fc f924 	bl	8000fc4 <_sbrk>
 8004d7c:	1c43      	adds	r3, r0, #1
 8004d7e:	d102      	bne.n	8004d86 <_sbrk_r+0x1a>
 8004d80:	6823      	ldr	r3, [r4, #0]
 8004d82:	b103      	cbz	r3, 8004d86 <_sbrk_r+0x1a>
 8004d84:	602b      	str	r3, [r5, #0]
 8004d86:	bd38      	pop	{r3, r4, r5, pc}
 8004d88:	200002a4 	.word	0x200002a4

08004d8c <__ascii_mbtowc>:
 8004d8c:	b082      	sub	sp, #8
 8004d8e:	b901      	cbnz	r1, 8004d92 <__ascii_mbtowc+0x6>
 8004d90:	a901      	add	r1, sp, #4
 8004d92:	b142      	cbz	r2, 8004da6 <__ascii_mbtowc+0x1a>
 8004d94:	b14b      	cbz	r3, 8004daa <__ascii_mbtowc+0x1e>
 8004d96:	7813      	ldrb	r3, [r2, #0]
 8004d98:	600b      	str	r3, [r1, #0]
 8004d9a:	7812      	ldrb	r2, [r2, #0]
 8004d9c:	1c10      	adds	r0, r2, #0
 8004d9e:	bf18      	it	ne
 8004da0:	2001      	movne	r0, #1
 8004da2:	b002      	add	sp, #8
 8004da4:	4770      	bx	lr
 8004da6:	4610      	mov	r0, r2
 8004da8:	e7fb      	b.n	8004da2 <__ascii_mbtowc+0x16>
 8004daa:	f06f 0001 	mvn.w	r0, #1
 8004dae:	e7f8      	b.n	8004da2 <__ascii_mbtowc+0x16>

08004db0 <memmove>:
 8004db0:	4288      	cmp	r0, r1
 8004db2:	b510      	push	{r4, lr}
 8004db4:	eb01 0302 	add.w	r3, r1, r2
 8004db8:	d807      	bhi.n	8004dca <memmove+0x1a>
 8004dba:	1e42      	subs	r2, r0, #1
 8004dbc:	4299      	cmp	r1, r3
 8004dbe:	d00a      	beq.n	8004dd6 <memmove+0x26>
 8004dc0:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004dc4:	f802 4f01 	strb.w	r4, [r2, #1]!
 8004dc8:	e7f8      	b.n	8004dbc <memmove+0xc>
 8004dca:	4283      	cmp	r3, r0
 8004dcc:	d9f5      	bls.n	8004dba <memmove+0xa>
 8004dce:	1881      	adds	r1, r0, r2
 8004dd0:	1ad2      	subs	r2, r2, r3
 8004dd2:	42d3      	cmn	r3, r2
 8004dd4:	d100      	bne.n	8004dd8 <memmove+0x28>
 8004dd6:	bd10      	pop	{r4, pc}
 8004dd8:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004ddc:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8004de0:	e7f7      	b.n	8004dd2 <memmove+0x22>

08004de2 <__malloc_lock>:
 8004de2:	4770      	bx	lr

08004de4 <__malloc_unlock>:
 8004de4:	4770      	bx	lr

08004de6 <_realloc_r>:
 8004de6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004de8:	4607      	mov	r7, r0
 8004dea:	4614      	mov	r4, r2
 8004dec:	460e      	mov	r6, r1
 8004dee:	b921      	cbnz	r1, 8004dfa <_realloc_r+0x14>
 8004df0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8004df4:	4611      	mov	r1, r2
 8004df6:	f7ff be0d 	b.w	8004a14 <_malloc_r>
 8004dfa:	b922      	cbnz	r2, 8004e06 <_realloc_r+0x20>
 8004dfc:	f7ff fdbe 	bl	800497c <_free_r>
 8004e00:	4625      	mov	r5, r4
 8004e02:	4628      	mov	r0, r5
 8004e04:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004e06:	f000 f821 	bl	8004e4c <_malloc_usable_size_r>
 8004e0a:	42a0      	cmp	r0, r4
 8004e0c:	d20f      	bcs.n	8004e2e <_realloc_r+0x48>
 8004e0e:	4621      	mov	r1, r4
 8004e10:	4638      	mov	r0, r7
 8004e12:	f7ff fdff 	bl	8004a14 <_malloc_r>
 8004e16:	4605      	mov	r5, r0
 8004e18:	2800      	cmp	r0, #0
 8004e1a:	d0f2      	beq.n	8004e02 <_realloc_r+0x1c>
 8004e1c:	4631      	mov	r1, r6
 8004e1e:	4622      	mov	r2, r4
 8004e20:	f7ff fab6 	bl	8004390 <memcpy>
 8004e24:	4631      	mov	r1, r6
 8004e26:	4638      	mov	r0, r7
 8004e28:	f7ff fda8 	bl	800497c <_free_r>
 8004e2c:	e7e9      	b.n	8004e02 <_realloc_r+0x1c>
 8004e2e:	4635      	mov	r5, r6
 8004e30:	e7e7      	b.n	8004e02 <_realloc_r+0x1c>

08004e32 <__ascii_wctomb>:
 8004e32:	b149      	cbz	r1, 8004e48 <__ascii_wctomb+0x16>
 8004e34:	2aff      	cmp	r2, #255	; 0xff
 8004e36:	bf8b      	itete	hi
 8004e38:	238a      	movhi	r3, #138	; 0x8a
 8004e3a:	700a      	strbls	r2, [r1, #0]
 8004e3c:	6003      	strhi	r3, [r0, #0]
 8004e3e:	2001      	movls	r0, #1
 8004e40:	bf88      	it	hi
 8004e42:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 8004e46:	4770      	bx	lr
 8004e48:	4608      	mov	r0, r1
 8004e4a:	4770      	bx	lr

08004e4c <_malloc_usable_size_r>:
 8004e4c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004e50:	1f18      	subs	r0, r3, #4
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	bfbc      	itt	lt
 8004e56:	580b      	ldrlt	r3, [r1, r0]
 8004e58:	18c0      	addlt	r0, r0, r3
 8004e5a:	4770      	bx	lr

08004e5c <_init>:
 8004e5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004e5e:	bf00      	nop
 8004e60:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004e62:	bc08      	pop	{r3}
 8004e64:	469e      	mov	lr, r3
 8004e66:	4770      	bx	lr

08004e68 <_fini>:
 8004e68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004e6a:	bf00      	nop
 8004e6c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004e6e:	bc08      	pop	{r3}
 8004e70:	469e      	mov	lr, r3
 8004e72:	4770      	bx	lr
